{"_id":"moize","_rev":"110-5846e0f61c29a90e5e8139543f9a9231","name":"moize","description":"Blazing fast memoization based on all parameters passed","dist-tags":{"latest":"6.1.6","next":"6.1.6-beta.0"},"versions":{"1.0.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"circular-json":"^0.3.1","json-stringify-safe":"^5.0.1","map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.0.0","gitHead":"5aadcbfbc93cc9b79542cf4836646893c9421cbe","_id":"moize@1.0.0","_shasum":"fe8f6d9703045ce591023abc0305dd87ad4499c3","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"fe8f6d9703045ce591023abc0305dd87ad4499c3","tarball":"https://registry.npmjs.org/moize/-/moize-1.0.0.tgz","integrity":"sha512-qzKVJeCe1EeGqM8BxZCCQ4Z9T5lXBrDeAdx6/LqXvtgZngIKQ/pFhiQ+UVyBauVSAQf1F4lsceMXnvDT7U7AcA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDEMO+Zh6xhFgXyhp4AAPnyHynqY5XUyKbJNhnEQEvt/wIhAPXZrVLByR0uYRkammWrox9WSM3+ZV/hMCBgCR1KaHc5"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-1.0.0.tgz_1481496856077_0.6975152695085853"},"directories":{}},"1.0.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"circular-json":"^0.3.1","json-stringify-safe":"^5.0.1","map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.0.1","gitHead":"b2793c22fb0f70ffe6567255992624f22a2c0831","_id":"moize@1.0.1","_shasum":"31f2adebb4e34ddea84e550ac44f908a1df35cae","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"31f2adebb4e34ddea84e550ac44f908a1df35cae","tarball":"https://registry.npmjs.org/moize/-/moize-1.0.1.tgz","integrity":"sha512-Vo5/fmkf8RRZ+CACHrhI/TUTRldADVpR4fQ+R+9izlt4ePqilqbIkzz4b9qU0KL/oey9BdkH9uyvIkl/VchT3g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC0AXlM3MCB6pfHX28faWAptlFd32TCaO/LRC+X4kG6pQIgfT4uDQHKOBaC00nger/C6uM2CC1CVbDZ41CWnv/0DLA="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-1.0.1.tgz_1481497151309_0.40672875032760203"},"directories":{}},"1.0.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.0.2","gitHead":"466fbe7082c6814237f069979bd845efb00f9d4a","_id":"moize@1.0.2","_shasum":"283782d6d08653b859b5419f7b56b07431107989","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"283782d6d08653b859b5419f7b56b07431107989","tarball":"https://registry.npmjs.org/moize/-/moize-1.0.2.tgz","integrity":"sha512-8PrCx/YrIIf5LkbY/gAD3JJiWHx7xI+kvhpHi1FAj4AMlO8zhe3CWqCTFjVo5Vns+vwwSaihGbUBDLNRsNixoA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDUJOMx6d4CWfKiNPEJtGWZftjqTRpBlOZZmUGZSSBbsgIgCG9AoHkHfkTQEkdcADMO5Igptjs9WJG5917NL3ViAgM="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.0.2.tgz_1481497426056_0.34856928209774196"},"directories":{}},"1.0.3":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.0.3","gitHead":"c15beadd41d7bdcf723be495492891702998655f","_id":"moize@1.0.3","_shasum":"69626c74d1659f25fbfc54a54be79580001e2ec1","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"69626c74d1659f25fbfc54a54be79580001e2ec1","tarball":"https://registry.npmjs.org/moize/-/moize-1.0.3.tgz","integrity":"sha512-806I7UxJ6OwMsObZI7/MKWNdxaTREDVT8HDbxgOrSIsdk4z/9uuAi4a9kUV/ALQe84z0YCKIeTRFwSWmlIcweA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCU49aUdS1AYohLCRXvopr3UWOHKWvMOf6dkorcOeALsQIgLtHWY5v8nsZ0y8jo0eWMVZkL0B6RAbpI9aQ4BCFbpxE="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.0.3.tgz_1481497885360_0.9878669450990856"},"directories":{}},"1.1.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"cycle":"^1.0.3","map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.1.0","gitHead":"c2f57408ee27488d8cc2369b4eb5fbebc2516b1d","_id":"moize@1.1.0","_shasum":"01684a58c05cfb24fdfb636bd7d1debae4a50d40","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"01684a58c05cfb24fdfb636bd7d1debae4a50d40","tarball":"https://registry.npmjs.org/moize/-/moize-1.1.0.tgz","integrity":"sha512-mOwnvQUfi1oDLy/NgkKK9RsiwIuc1ilj6u35pfF377gEYPPKQLqsDH5/iLa3MF+nZslimHDVzYuZKgyVZyGO9Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDJ/3/55Kj6IOwjfccxer44Fl05MbVR7wQxLyD3YZ31DQIhAPVF8UI9nnZ6NFkNxOSFRIrc0o6Eud6aq2Mmd66EfTwc"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.1.0.tgz_1481515369609_0.2268042853102088"},"directories":{}},"1.1.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"cycle":"^1.0.3","map-or-similar":"^1.3.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow status src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.1.1","gitHead":"3118fb3d6090b7e8bd19ace872ea8e7c37cf27ac","_id":"moize@1.1.1","_shasum":"7d7c0b49052602eb834b3eb2fecf09f9db7b4833","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"7d7c0b49052602eb834b3eb2fecf09f9db7b4833","tarball":"https://registry.npmjs.org/moize/-/moize-1.1.1.tgz","integrity":"sha512-Q6Ts3mIdBX3alL4y41cittw8oMrCUcAsmNw7C4JLPl+M1spI7hKHlewYHX7PzDR2LxXl4eV++9RO8Pfi43lV3g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCZbaG3CMoUyq5OBXv/50HBfPndusNG7UlKGqgRIbAFQwIhAOeXnlrXQwpiwbe9HEO3f1kF31FNYvjbgsVn3wfD2MOW"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.1.1.tgz_1481543476705_0.06654562405310571"},"directories":{}},"1.1.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.0","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.36.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.1.2","gitHead":"749301b0560f854d8d29d4937deaf221c19516f4","_id":"moize@1.1.2","_shasum":"552f74558253bd52ba589d561d1710b9b8470a6d","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"552f74558253bd52ba589d561d1710b9b8470a6d","tarball":"https://registry.npmjs.org/moize/-/moize-1.1.2.tgz","integrity":"sha512-gwnZiergkF+h5bQXHErqq4ykqOrg2d7GBVeNvn9YDUW7qmVkI5aKs8Iqt+ac2uBE9XCkNMYupsk/D065Ey/aGQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBkyWapl2fkW4Cc6+6wiBp7s1lxLjUGW9pakvPdTE4Z3AiEAuJP2ogSgd3v2/1EhZdK+MKNokHyJZ3orSFshtMsZZkQ="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.1.2.tgz_1481632460068_0.28833335638046265"},"directories":{}},"1.2.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.1","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.37.0","html-webpack-plugin":"^2.24.1","iMemoized":"^1.0.2","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.2.0","gitHead":"15919c66c67aadf3bf6ea4ea8edc280de4cdf8a1","_id":"moize@1.2.0","_shasum":"0d1674af2e0ce60407d93e346548146aef3a0954","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"0d1674af2e0ce60407d93e346548146aef3a0954","tarball":"https://registry.npmjs.org/moize/-/moize-1.2.0.tgz","integrity":"sha512-d9gnU5/XJ05IYV+mVLm6MSOea2INV6dIs0Ona3QDE1wUqPHU6fBCPzRSnSAGA7ccGGo9PIPuWo9aSKnKRN4Jeg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDLZ+NjGkcLK5snr9zrt7mgZL4XdDQdq+mT/v4h97pHOwIhANRtCXaY77dpNZNCSmWol3NCORS3k/og5NPGkPcwRAyD"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-1.2.0.tgz_1481687316365_0.7692967881448567"},"directories":{}},"1.3.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.2","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.37.0","html-webpack-plugin":"^2.24.1","iMemoized":"^1.0.2","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.3.0","gitHead":"12886694ea7fe27587fef9da4b250f6529628ef1","_id":"moize@1.3.0","_shasum":"fcbb29314b227f3e174ec8f7e7932c5749858e74","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"fcbb29314b227f3e174ec8f7e7932c5749858e74","tarball":"https://registry.npmjs.org/moize/-/moize-1.3.0.tgz","integrity":"sha512-HtOfVZmWEfyaQdWM843CD+legCRUJm00yWvOwtQGhvXnvKPVSCuUESlMiDJxiCz7JyQW3pDKP07hQhnOj/KScw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEMZH+eX7wQ9W58t09V3r3yrSYqNb7FNwn3nI7nF4j1zAiEAhuVutEpQ9n6Frvl5rLxdA51DJDdlkSKF/aNDYF2plZU="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.3.0.tgz_1481773771997_0.18681748071685433"},"directories":{}},"1.3.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.9","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.18.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.2","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.37.0","html-webpack-plugin":"^2.24.1","iMemoized":"^1.0.2","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.3.1","gitHead":"87651f7b1d1893c2cd062c3345ea988b8f130752","_id":"moize@1.3.1","_shasum":"4e1f69202ac8af3c343b931df1ef8ac7677ca8dc","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"4e1f69202ac8af3c343b931df1ef8ac7677ca8dc","tarball":"https://registry.npmjs.org/moize/-/moize-1.3.1.tgz","integrity":"sha512-Mjus9l4D7Mb1BqxXzJ75B/ed+eM0w35Mh+y69NuWXPmGfZtdES76q/x0OLiN/Dk6AueBouGgmep4Kl2tour7fg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEjknXiCu5W6ayYF0dmjYOfTeG0yWZA4Tu9yOh19RvwHAiEAlQ02Yz4XVCUqC5njd2HI332/a7D4uMxqOe91FPTMMIM="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.3.1.tgz_1481773946160_0.7127716289833188"},"directories":{}},"1.3.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.2","eslint":"^3.12.2","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.37.0","html-webpack-plugin":"^2.24.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.2","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.22.1","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.6","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.3.2","gitHead":"547adb2b00d80b6cbfdc3df04a57b13cfae171b6","_id":"moize@1.3.2","_shasum":"2c2d1a120715b1e262762a66d9750de81f840cf8","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"2c2d1a120715b1e262762a66d9750de81f840cf8","tarball":"https://registry.npmjs.org/moize/-/moize-1.3.2.tgz","integrity":"sha512-V2pL86cG3l8iYilKrmYla4jQIQ662E29+8z0hv2lNvPxq3o3R32wk5fs5uxgwZjm0/30KlxGoXrgOQ4PyII7NQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG0ASBG0XuSJqBZn1K3+6q7mfLAIykfwhVoehZAIZ5QeAiEAwzL7QITAR3lnX9Q3+YyC2unDjnj83KLChJnCW9wKJLA="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.3.2.tgz_1481931089597_0.32872858666814864"},"directories":{}},"1.3.3":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["latest",{"loose":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-latest":"^6.16.0","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.3","eslint":"^3.12.2","eslint-friendly-formatter":"^2.0.6","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.37.4","html-webpack-plugin":"^2.25.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.0.0","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.1","react-dom":"^15.4.1","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.3.3","gitHead":"91c7661c595b07da83b7892926165a1e9a151c67","_id":"moize@1.3.3","_shasum":"84c10be59f34da8e79cbc931d79e7c8c2e06026d","_from":".","_npmVersion":"4.0.3","_nodeVersion":"6.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"84c10be59f34da8e79cbc931d79e7c8c2e06026d","tarball":"https://registry.npmjs.org/moize/-/moize-1.3.3.tgz","integrity":"sha512-nVPSYgPhxinMc/tdu1dYsECiUPoesHZVyruD82N4hPkgkRds4LPR0rDy1W62H1iuuh6X1IekoE1gKdqa+mS8wA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCwSRoCLogcb6BTYX7TrV+ntKRu5vn0I9x+yg66LZPsXAIgT3j7aQWq0BJMG0ziifcDkO4r37C99xjyl2dPiB0ViGo="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.3.3.tgz_1483281867930_0.7144870997872204"},"directories":{}},"1.4.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["env",{"loose":true,"targets":{"browsers":["last 2 versions","ie >= 9"]},"useBuiltIns":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-env":"^1.1.8","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.3","eslint":"^3.13.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.0","gitHead":"a3fdbfd92300e18520122cd76d426a5adaa46597","_id":"moize@1.4.0","_shasum":"c5659bb11dfb7441916fad6ffa480700f009cabb","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"c5659bb11dfb7441916fad6ffa480700f009cabb","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.0.tgz","integrity":"sha512-alCG2G9eN+lwAdVbS+LrLnglIxF5xFBp8EyeriUkjxF4xyA0WL7uzFhIrrDvJvWju2H8bRnQu/NcDy9bRNSxsA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDnatnk9Ntu/JYMENDa1eV0vKW53K0M4Vwm4MxeB5/j3AIhANVX3dV9q6cv4xvFBk/7yNd1o/ENMZ80o0Dy/MatxZ9w"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.4.0.tgz_1484796538815_0.05731627298519015"},"directories":{}},"1.4.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["env",{"loose":true,"targets":{"browsers":["last 2 versions","ie >= 9"]},"useBuiltIns":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-env":"^1.1.8","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.3","eslint":"^3.13.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.1","gitHead":"2c560d87eaf02caba871fff6180a2c4817c152cf","_id":"moize@1.4.1","_shasum":"70f4cc6dc089a586841891b450780682987ffe02","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"70f4cc6dc089a586841891b450780682987ffe02","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.1.tgz","integrity":"sha512-Rad2ZCO4ZDTgu80gXtp8rGVqv4WQ6G/j8HxOWvyS6lyhaG7mkSqS3vudg0iY8Tanu+tQxtevr0H3VW6yVGs5dQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC+mlFMUeGplUqty7qgaE+9MzV2+N2/HPDbtfF7IAmTJwIhAKtR/1Qh3ElgCICq+cFNlkgI6eQYxQ/BfTO3QL4do9tR"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.4.1.tgz_1484796967345_0.42839910462498665"},"directories":{}},"1.4.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["env",{"loose":true,"targets":{"browsers":["last 2 versions","ie >= 9"]},"useBuiltIns":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-env":"^1.1.8","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.3","eslint":"^3.13.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.2","gitHead":"41422c67e7b7caaf772087562986be31e41fe1ce","_id":"moize@1.4.2","_shasum":"40a356f218f67bde7aed5659e9ef450c626d9a44","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"40a356f218f67bde7aed5659e9ef450c626d9a44","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.2.tgz","integrity":"sha512-5AdOkPkS53NQCHHUvskHrXS3f7pscMHCu4xGipgpHMUEYJ0O6SuGSwyvKsLexrTgRjdTJ19uFpu9Hy3sJSCepQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBsF0+80j1gxhd8OiCNLR3YeIydGzSf8Wq5LHlcQHrNQAiEAtgmSNDWJpHGzSALAtVc4wJ9hViBSulgq3HPuSLexEa0="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.4.2.tgz_1484880551867_0.02101547084748745"},"directories":{}},"1.4.3":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":[["env",{"loose":true,"targets":{"browsers":["last 2 versions","ie >= 9"]},"useBuiltIns":true}],"stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.18.0","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-flow-strip-types":"^6.21.0","babel-polyfill":"^6.20.0","babel-preset-env":"^1.1.8","babel-preset-react":"^6.16.0","babel-preset-stage-2":"^6.18.0","babel-register":"^6.18.0","benchmark":"^2.1.3","eslint":"^3.13.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.8.6","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.3","gitHead":"ab900d349d8c4e52df57446523da82089a1e9a37","_id":"moize@1.4.3","_shasum":"b09af79af1cbd264ee3bc3f8e75c214d803ff014","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"b09af79af1cbd264ee3bc3f8e75c214d803ff014","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.3.tgz","integrity":"sha512-SF+U6irBoTH0+Xafq9oJuoqF2rxwULImuS2vBXVlczDC20ygG5tKsRQ0ZhegBj6A4xM4/g6lkdDVnwHPDW27lw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBB2hegBQt55qhjnNwMDHqV83B9Ib/gfIpQ0WSbJIblwAiEAo6vCwTdvSCguOb2NFF9F5riVGX2y9VjoDmf9onAt7EM="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-1.4.3.tgz_1485312882533_0.9729881542734802"},"directories":{}},"1.4.4":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.22.2","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-decorators-legacy":"^1.3.4","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.22.0","babel-preset-latest":"^6.22.0","babel-preset-react":"^6.22.0","babel-preset-stage-2":"^6.22.0","babel-register":"^6.22.0","benchmark":"^2.1.3","eslint":"^3.14.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.10.0","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.4","gitHead":"6b64d9f79fa368ebead6a32a45bd210f099dadc7","_id":"moize@1.4.4","_shasum":"e42a17a81c9af4192cedeac5f7b10c6eab88001d","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"e42a17a81c9af4192cedeac5f7b10c6eab88001d","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.4.tgz","integrity":"sha512-HCVXZ5WdsoW/8qfU+0mF9d3veZaIlMMv9K9qTAhzZ6z0u9b9ueVi7JLfYYA2bxBWnQBRjgDosjeFKaiGo5K8yw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD2g27xopUpoJo2y8Q3K4kuIUbIq+QJyIZJiSnlaThOGgIhAOvREemumkOknwlpnmN4CSXaMaKuHqgRAd2ATXfEh4EA"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-1.4.4.tgz_1485397521212_0.11994637222960591"},"directories":{}},"1.4.5":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.22.2","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-decorators-legacy":"^1.3.4","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.22.0","babel-preset-latest":"^6.22.0","babel-preset-react":"^6.22.0","babel-preset-stage-2":"^6.22.0","babel-register":"^6.22.0","benchmark":"^2.1.3","eslint":"^3.14.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.10.0","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.4.5","gitHead":"7c9cef470318a472bfabd02e6456d9ec182841f1","_id":"moize@1.4.5","_shasum":"4219ac4c7b3edd064423de6561de747d58443f15","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"4219ac4c7b3edd064423de6561de747d58443f15","tarball":"https://registry.npmjs.org/moize/-/moize-1.4.5.tgz","integrity":"sha512-niyNmhSpnx47cIn01y8KQ3GtkXiHwssBR8wcl6A6t35qS6NMkEsYWcFsmw3MMi2iqwS6oCEIlj35wxA6qxxhww==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH0J/fwEEBb0AEe6H4NaVCLOEUpuEPWyIk+ZM5zpYsFRAiEAlHwjGlDGmJFBmGzz1GgnpNFzF83rk/ZI5+ij8KK+tew="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.4.5.tgz_1485653356634_0.46499379235319793"},"directories":{}},"1.5.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.17.0","babel":"^6.5.2","babel-cli":"^6.22.2","babel-eslint":"^7.1.1","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-transform-decorators-legacy":"^1.3.4","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.22.0","babel-preset-latest":"^6.22.0","babel-preset-react":"^6.22.0","babel-preset-stage-2":"^6.22.0","babel-register":"^6.22.0","benchmark":"^2.1.3","eslint":"^3.14.1","eslint-friendly-formatter":"^2.0.7","eslint-loader":"^1.6.1","fast-memoize":"^2.0.2","flow-babel-webpack-plugin":"^1.0.1","flow-bin":"^0.38.0","html-webpack-plugin":"^2.26.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.0","jsdoc":"^3.4.3","jsdoc-babel":"^0.3.0","lodash":"^4.17.4","memoizee":"^0.4.1","memoizerific":"^1.10.0","nyc":"^10.1.2","optimize-js-plugin":"^0.0.4","ramda":"^0.23.0","react":"^15.4.2","react-dom":"^15.4.2","rimraf":"^2.5.4","sinon":"^1.17.7","underscore":"^1.8.3","webpack":"^1.14.0","webpack-dev-server":"^1.16.2","winston":"^2.3.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"1.5.0","gitHead":"d18bfc54addfd3b6ba49270a11ddaf7d0433dafc","_id":"moize@1.5.0","_shasum":"faa5b3f0f2949768793cdae7ab746cde7844087d","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"faa5b3f0f2949768793cdae7ab746cde7844087d","tarball":"https://registry.npmjs.org/moize/-/moize-1.5.0.tgz","integrity":"sha512-tK625w3382xaXhCNimRWDGdvoqf56rexp5fiyXgszH96bz2AoU8y83iQRcW/YlMbXzVJOcAH/nSYGgU+oVYa9w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC2qu+tWnEyHRpo2zoWO5F/Axm4trLnLRPzGxYKwIgB4QIgMqKBt888LNwhIHQD6c7EyCr9kY9CaYjMdsyFacHIjWQ="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-1.5.0.tgz_1485666790079_0.046569101279601455"},"directories":{}},"2.0.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.0","gitHead":"93c508185689cc523694f459679546a84fbbf07f","_id":"moize@2.0.0","_shasum":"34625205322c606b1e5b8c9d679f533a1be95aa1","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"34625205322c606b1e5b8c9d679f533a1be95aa1","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.0.tgz","integrity":"sha512-6TOKphDrVqz6nJukI5o8AeLDHRfzCsByrilYa/aiSjMglcJgZta066KSGAeLYunk7/JtNZSfVh19E7Crujb/9g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCnNUjK8xNMJQ3i0cDJvLvLFUryWz/jDCOuRYOUgiMFfwIhAOSVLsbG8tXI/TxPUY90iN75+X+NqGf3OlEbHSx7CtJo"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.0.0.tgz_1485776191365_0.739848115015775"},"directories":{}},"2.0.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.1","gitHead":"66715612d5860a16d152e9189a58ba9ee059eb8d","_id":"moize@2.0.1","_shasum":"371816ef85746b68cc2f4a8eea1867d41d2249d3","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"371816ef85746b68cc2f4a8eea1867d41d2249d3","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.1.tgz","integrity":"sha512-nHHchBlUVC4sx6yQZgGCkw/40ZXch6oT9rBvDL+YP38xmT9DbgSErRwqE74Ml4wStpg21RgsxHTHH4i8Zu9cvw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCO6uKEhRKBC4mNIGgZxh2neobXNIEzwPhZtjqXZVyyRQIhAPAUJMK1s4Q57nX1QW+I/o9/Dhfan/92Zr6TytAndYv5"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.0.1.tgz_1485824094436_0.7081610665190965"},"directories":{}},"2.0.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"babel":{"plugins":["syntax-flow","transform-flow-strip-types","add-module-exports"],"presets":["latest","stage-2"]},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.2","gitHead":"d93455657989508bcbb01f8768121a4acc8b0671","_id":"moize@2.0.2","_shasum":"7a516675925f69e6466a11704a6f92c9b86bce72","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"7a516675925f69e6466a11704a6f92c9b86bce72","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.2.tgz","integrity":"sha512-tXSMjBMtQ+Kt0IkgRIot0qcjzh6grfRTyN+UZIjblcdSHRnv6QIdsIEoCCyE1jrUjOjmae8ml0TFAHYk2qml0A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCWKvp/fv6y2NRsNiNftmnN3TsAACtaeGz/VuwAMfOHDAIhAOC24HBG9DJx6AqGeGSVmvTpIaYiD8+wCNfgmKxggQzg"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.0.2.tgz_1485832041843_0.25049146823585033"},"directories":{}},"2.0.3-0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.3-0","gitHead":"338f9741768769d20f79a66fc59e5d3d95e2d8fc","_id":"moize@2.0.3-0","_shasum":"26dd3af7fc74a845348d02c7c583fed2727712cf","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"26dd3af7fc74a845348d02c7c583fed2727712cf","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.3-0.tgz","integrity":"sha512-lo48mwXxG0Xr0blZlk8MDzKohYHqvsrTHQCeggKag9aYb/5EE7fa8611o08MpHEZvibVBmJxbSJ9h3mbBHizgA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE2lqd1cBvislyxNx217N5y7BHBi+IC9PAHSaT+3UzHSAiEAm0uz+p/dG9KXiLMuqjIPIoJ73MEWppjM4MVClyoTxWM="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.0.3-0.tgz_1485860389917_0.024806701811030507"},"directories":{}},"2.0.3-1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.3-1","gitHead":"679f72b536c23a4eac33e8986782f4624f64d18a","_id":"moize@2.0.3-1","_shasum":"4ecf0d4076b28d7527ee05dad7ce49734f1c1bb7","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"4ecf0d4076b28d7527ee05dad7ce49734f1c1bb7","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.3-1.tgz","integrity":"sha512-Myfbwvu0hZI/4YqR5dGbY2/+GPGygxV9gjdDcW9KZDJRvZu8l9Up7qXnWINH4RkfklhGGwNHlMpduyvgWyfwkA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGwfetFjeYI3dcXqv/bke5XMk+SjIwOaGyzT2DUfct+zAiBoxnpkX+KGABdquczqrQnbnX/M/LhqO0r33p8lWyZevw=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.0.3-1.tgz_1485860569677_0.310692987870425"},"directories":{}},"2.0.3":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.0.3","gitHead":"7a660a0ed7e6ad23632a35f2ef3c9e4eaa3c02a8","_id":"moize@2.0.3","_shasum":"395c4bdc66897650609ce6a23a18e2899e6e3c01","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"395c4bdc66897650609ce6a23a18e2899e6e3c01","tarball":"https://registry.npmjs.org/moize/-/moize-2.0.3.tgz","integrity":"sha512-nVys77lXGQeZgKNHp4YNmZg5a0M3jl2AHFecOe03ooEOuMIroUgPmfPb2GtCBg454kiy11s6HXkD05eHpM6GTw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH4Z5dcatb7DC4WP/Gldzv8MwIKnz/K4n4GG6Ia23Ob/AiEA4tpdO+bezRpANLzd92f/nCFd90OpnX4EEByyo2Apkzw="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.0.3.tgz_1486002805393_0.269074879353866"},"directories":{}},"2.1.0":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.17.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.1.1","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.0","gitHead":"f58e6780578e53bf1966d629c7acef313174948b","_id":"moize@2.1.0","_shasum":"ce8ebba74d64f0710132ff264b7f6bf3e36d660b","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"ce8ebba74d64f0710132ff264b7f6bf3e36d660b","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.0.tgz","integrity":"sha512-o2k1IkeWrz6v3buYOlA2QbMRdkFUfPXax6NLPMpgUUvGdx9oNGsBfe4EtpgTxcMzI1qmZapvzUWSOsk6ItnL5g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDljhpkOVYVkiHdTc6tqg5ErMXz1mnzTlUBm070wHKFkgIhAL7LGKtO3qrlLsoxOHKoSTguQiavEwvuhLKg9q4bIrZ6"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.1.0.tgz_1486036646480_0.9860466104000807"},"directories":{}},"2.1.1":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.1","gitHead":"ab071055766c177b362d20296b26f717fecd5d6e","_id":"moize@2.1.1","_shasum":"874f885f25b1449380744aa110eda4f115c362e2","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"874f885f25b1449380744aa110eda4f115c362e2","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.1.tgz","integrity":"sha512-/eacLFb5y0n+vf6b5PTj4OCIlZs/yVX0LQ7d+GxX5VZ3Wq2HPd9hhkxbKKmZdlVzpoGcQvRIM1FCksvcpq73+A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIQCVJq057PwIEuHst0HBn5UlOS/Crx3uttI3I2YqSX4L1wIfAqCTZ0oQCltVvmW931YTkiIMx1/0v/bRdX7qVUY/wQ=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.1.1.tgz_1486096115713_0.8138990455772728"},"directories":{}},"2.1.2":{"author":{"name":"planttheidea"},"ava":{"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.0","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.14.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.9.1","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"1.14.0","webpack-dev-server":"1.16.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","dev":"NODE_ENV=development webpack-dev-server --progress --colors --config=webpack.config.dev.js","dist":"rimraf dist && npm run build && npm run build:minified","docs":"rimraf docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"rimraf lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.2","gitHead":"954ca675857cabcb12a1ad4e72cd91d9f80da21f","_id":"moize@2.1.2","_shasum":"1507b221a042bc08df503f011aa19e48c095f15b","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"1507b221a042bc08df503f011aa19e48c095f15b","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.2.tgz","integrity":"sha512-0jEjZvOl6noDPhbLrnRf60lXHr9acRXWZ4IsFtE+EzKHz6nnJXHi8o3kF3nasHLpI5ZJccHYnVFYQf3foQoatQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGOVz85sGGiXaFz+aMLqKVWQm1bswJ2ZALh1wYf+BU7GAiEAlswzyznJSeT2ovjS9hVjEVegZFMJtdVzQYHlc8cWJGY="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.1.2.tgz_1486122034344_0.2023394398856908"},"directories":{}},"2.1.3":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.3","gitHead":"5fdbdb0b2fef3c6898c11241303eb05d92afc423","_id":"moize@2.1.3","_shasum":"95efe8dd55bf00ae19951fce7b078e728b974331","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"95efe8dd55bf00ae19951fce7b078e728b974331","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.3.tgz","integrity":"sha512-BfWkrZkNZKE4Fk1XknCUk6mmTnx1SLVRswMYnMQf45hKrScv2nHaLkIPjNsTDa7LvCYM5dCer7BKbG45+n/Qtw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBh09UeaIs/vjNJnA3Q4OBF8/Bgt5HrVfQkHHmgYpQCzAiEA/N//FKGjBKNMm1bvMQlol1bUH/cXVwv73SZhmurOHW0="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.1.3.tgz_1486262274313_0.6521418076008558"},"directories":{}},"2.1.4":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.4","gitHead":"36c1fd8fbb81c01c73e879a3aa614632710dc01c","_id":"moize@2.1.4","_shasum":"fecb6c34247ff61bcd2f897dbac8e3770774f146","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"fecb6c34247ff61bcd2f897dbac8e3770774f146","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.4.tgz","integrity":"sha512-SdLLGWkczfY5ftw01Lki76faG1S56PJYwPI3pIJwANiOlECRa6DurMjdeBe6Kvm/BGkHfiY9P/fx+OFuAHgZWA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDtwrTh5yM0rQeh0TLJmrICR1norGV2hWVYsAv1XWSJqQIgWaRhr2aVxO/4OEnazq7OPJrGepHPMuLz+qY6cmiDLf8="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.1.4.tgz_1486296299449_0.3911935640498996"},"directories":{}},"2.1.5":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.5","gitHead":"942120df13a087b102714c926eb1805cbd78e8f6","_id":"moize@2.1.5","_shasum":"d615eaf58d386e3e9171a043a5267b471f7b6f32","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"d615eaf58d386e3e9171a043a5267b471f7b6f32","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.5.tgz","integrity":"sha512-1gqfgpP61cLkBPvguoA+7xr9YtECInJqIcsBYkeZzBDFPw5qi3cTEhGZ1BOoNDmH8zqMnd/dLx9uHoDjIR9GYA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCCMdzXXZrWQDaHoxDJQK7KF1tLnAQDMGUY5aL7bYdjqgIhAL5JraY0eZoXBLrlw57Pa8LjvJ6sJpnwxwshUucnMCC/"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.1.5.tgz_1486383596677_0.9291179166175425"},"directories":{}},"2.1.6":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","benchmark":"2.1.3","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.38.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.1.6","gitHead":"3df3db5c6c4c82fe9e137a833d336b5e2aa9b3d0","_id":"moize@2.1.6","_shasum":"660f8c7ccfe3651165c7e59850895ef8bcaeeed3","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"660f8c7ccfe3651165c7e59850895ef8bcaeeed3","tarball":"https://registry.npmjs.org/moize/-/moize-2.1.6.tgz","integrity":"sha512-yMe7IKNovpgv4i2vSKbNH2HzxoosWyqezkkX1nEY3HP95bxAF+gAkAco4AEXEBqe9QTvj7zjeRadhiwHHyCIUQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFjHHv7wRPwX5jLktAllUMlCMdMI0w2NVtIBC4z9+3cXAiBFkE4tC6zB/vT0fYvFaYmZpUsba+gwfscKVSKhtHAU7Q=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.1.6.tgz_1486470268628_0.7468073463533074"},"directories":{}},"2.2.0":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","bbq":"0.1.1","benchmark":"2.1.3","bluebird":"3.4.7","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.39.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","q":"1.4.1","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.2.0","gitHead":"57395aeb1380c42500b2bf357985aa212f053a14","_id":"moize@2.2.0","_shasum":"8fab080d166bca032bbff7763706c5956a5e8cec","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"8fab080d166bca032bbff7763706c5956a5e8cec","tarball":"https://registry.npmjs.org/moize/-/moize-2.2.0.tgz","integrity":"sha512-Yo6OQTPLBcdu4IQOa4Vvpy6Cvg2teD6Wz3ZnU5+JW5upP1Nt+hb1K+KWPkCyfIbdMheBLUDukoiXyAlm9pZMXg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG8PunXJrpal283UVMVlSTV5dTk8Crn2bkxZWgFGBr/pAiAhXJ9dZW3M3zd2/S+o7qbwE4maTRQqvgMqo+n5gFWZNQ=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.2.0.tgz_1486846203346_0.4797053043730557"},"directories":{}},"2.2.1":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.1","babel":"6.5.2","babel-cli":"6.22.2","babel-eslint":"7.1.1","babel-loader":"6.2.10","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.22.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.22.0","babel-preset-stage-2":"6.22.0","babel-register":"6.22.0","bbq":"0.1.1","benchmark":"2.1.3","bluebird":"3.4.7","cli-table2":"0.2.0","eslint":"3.15.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.1","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.39.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.10.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.1","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","q":"1.4.1","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.5.4","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.3.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.2.1","gitHead":"a194e6289e3bc2a9c54d5586dc05525097a960ce","_id":"moize@2.2.1","_shasum":"49e485cc6c6bccd8a7d8336991e8e67a95637dbc","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"49e485cc6c6bccd8a7d8336991e8e67a95637dbc","tarball":"https://registry.npmjs.org/moize/-/moize-2.2.1.tgz","integrity":"sha512-XVmY/Gz+n2fK8PDjdV3GSUbR+sydlipbFJVaIS8gs7BABILyg6k+JQhzOskVqq2S/jhqIAW54j/4RlXDlTU9Sg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBHk3KS+qXCmlHVr9j7nzqiWN5S9m3elSEgkYS61CeY+AiEA3j4NaSunIl3kLKAsFXyfGtV2QYEFtIG+QEGvXxBV4Y8="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.2.1.tgz_1486987946765_0.020556056406348944"},"directories":{}},"2.2.2":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.2","babel-cli":"6.23.0","babel-eslint":"7.1.1","babel-loader":"6.3.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.23.0","babel-preset-stage-2":"6.22.0","babel-register":"6.23.0","bbq":"0.1.1","benchmark":"2.1.3","bluebird":"3.4.7","cli-table2":"0.2.0","eslint":"3.16.1","eslint-config-rapid7":"2.8.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.3","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.40.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.11.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.3","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","q":"1.4.1","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.6.1","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.4.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.2.2","gitHead":"4db8106a132554cd5c45a8676876ba66abb3c1e7","_id":"moize@2.2.2","_shasum":"2bb8d4be1b88e930aa1eb8f90d0ce1a04b0a5eb6","_from":".","_npmVersion":"4.3.0","_nodeVersion":"7.6.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"2bb8d4be1b88e930aa1eb8f90d0ce1a04b0a5eb6","tarball":"https://registry.npmjs.org/moize/-/moize-2.2.2.tgz","integrity":"sha512-sAI0UNxrVypwnDiRfsyBZJESlAehE2tnNJW5riQoaf0T2jNzgOdEIS9xeBAMOJLSYlGjG/exBbkbhASA+ZwP7Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDYuEqb7Xdr8vIsVz9niOCjaxVFD9ECbamL0En3ofZudAIgf58esAKNdGMSOgUR40HZFc74TLGcKxJifQNBUxBx3ao="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.2.2.tgz_1488082310890_0.3830812363885343"},"directories":{}},"2.2.3":{"author":{"name":"planttheidea"},"ava":{"babel":"inherit","concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.18.2","babel-cli":"6.23.0","babel-eslint":"7.1.1","babel-loader":"6.4.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-latest":"6.22.0","babel-preset-react":"6.23.0","babel-preset-stage-2":"6.22.0","babel-register":"6.23.0","bbq":"0.1.1","benchmark":"2.1.3","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"3.17.1","eslint-config-rapid7":"2.8.1","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.6.3","fast-memoize":"2.2.0","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.41.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.11.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.3","memoizerific":"1.10.0","nyc":"10.1.2","optimize-js-plugin":"0.0.4","ora":"1.1.0","q":"1.4.1","ramda":"0.23.0","react":"15.4.2","react-dom":"15.4.2","rimraf":"2.6.1","sinon":"1.17.7","underscore":"1.8.3","webpack":"2.2.1","webpack-dashboard":"0.3.0","webpack-dev-server":"2.4.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.2.3","gitHead":"fd77f7339b6b85a9c4bfb262195a2d66f6479109","_id":"moize@2.2.3","_shasum":"6231f57a092061deb0a85279bbd23a691ee76260","_from":".","_npmVersion":"4.3.0","_nodeVersion":"7.7.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"6231f57a092061deb0a85279bbd23a691ee76260","tarball":"https://registry.npmjs.org/moize/-/moize-2.2.3.tgz","integrity":"sha512-yXNTyD5OyAHm2cx+VVsqG3G2+nBYdPqKsTRrMYvmARZjsMwwFXWSjNh8FDUS3JImiXmOzakb3A29ATz3mnj6jg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEOf3XZnwPbhbZ2CHHoqmuYyIrsRlSlkrQQMX2gyh1+yAiA/Aeoe2bNP6DqOQQaHLh52aaVZfvpf/HtcPnfvG3MQ4Q=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/moize-2.2.3.tgz_1488968362053_0.20664420095272362"},"directories":{}},"2.3.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.0","babel-cli":"6.24.1","babel-eslint":"7.2.1","babel-loader":"6.4.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.3.3","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"3.19.0","eslint-config-rapid7":"2.9.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.7.1","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.43.1","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.12.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.4","memoizerific":"1.11.2","nyc":"10.2.0","optimize-js-plugin":"0.0.4","ora":"1.2.0","q":"1.5.0","ramda":"0.23.0","react":"15.5.3","react-dom":"15.5.3","rimraf":"2.6.1","sinon":"2.1.0","underscore":"1.8.3","webpack":"2.3.3","webpack-dashboard":"0.3.0","webpack-dev-server":"2.4.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.3.0","gitHead":"c7e8b59c27b051ef6fafb5d5818d6cafa951a403","_id":"moize@2.3.0","_shasum":"eb36b58882d33f4dc0af5edb786e829f26232a10","_from":".","_npmVersion":"4.4.4","_nodeVersion":"7.7.3","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"eb36b58882d33f4dc0af5edb786e829f26232a10","tarball":"https://registry.npmjs.org/moize/-/moize-2.3.0.tgz","integrity":"sha512-AQHSSe33fOIyX1M6LyZ4qKS3hdDfv+3O5XQi+pBm6bn6Wve/JEWRRYqvKMw9CSiPQGc6fQqv2UiCyerVWqc+Aw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDz37N1o7r0R2lDvrkha5WKGjCdQash1Zl9YlSis/UkyAIhAI02CQpMdB7t6hTVqO4GkdVM30Y7L0S5khY49FNiqXPy"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.3.0.tgz_1491775824975_0.093193001113832"},"directories":{}},"2.3.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.0","babel-cli":"6.24.1","babel-eslint":"7.2.1","babel-loader":"6.4.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.3.3","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"3.19.0","eslint-config-rapid7":"2.9.0","eslint-friendly-formatter":"2.0.7","eslint-loader":"1.7.1","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.43.1","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"9.12.0","jsdom-global":"2.1.1","lodash":"4.17.4","memoizee":"0.4.4","memoizerific":"1.11.2","nyc":"10.2.0","optimize-js-plugin":"0.0.4","ora":"1.2.0","q":"1.5.0","ramda":"0.23.0","react":"15.5.3","react-dom":"15.5.3","rimraf":"2.6.1","sinon":"2.1.0","underscore":"1.8.3","webpack":"2.3.3","webpack-dashboard":"0.3.0","webpack-dev-server":"2.4.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.3.1","gitHead":"e967da48ed98319f0fcf6c707f1b2f73b710f0ba","_id":"moize@2.3.1","_shasum":"af962063280241e1822c1d47d2706aadc70e0853","_from":".","_npmVersion":"4.4.4","_nodeVersion":"7.7.3","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"af962063280241e1822c1d47d2706aadc70e0853","tarball":"https://registry.npmjs.org/moize/-/moize-2.3.1.tgz","integrity":"sha512-c+zB8aRDzwD98N7QJQYUmhyKeLWnzP9DHKELnOAiwT4v29/Hr9F+ugATVQEenrjUGt99TnjQYYdsVA4wcBU6UQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDOi44dgL9Ly4ACR/mTCuaODsmxHYWflssyuf3RCXg/XAIhALy9B8uI2kGHRVvvDFF86++VugwkmlCpyBQI1fhr5zkP"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.3.1.tgz_1491821043724_0.36646404629573226"},"directories":{}},"2.3.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.1","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.0.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.4.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"3.19.0","eslint-config-rapid7":"2.9.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.7.1","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.46.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"10.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lodash-webpack-plugin":"0.11.3","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"10.3.2","optimize-js-plugin":"0.0.4","ora":"1.2.0","q":"1.5.0","ramda":"0.23.0","react":"15.5.4","react-dom":"15.5.4","rimraf":"2.6.1","sinon":"2.2.0","underscore":"1.8.3","webpack":"2.5.1","webpack-dashboard":"0.4.0","webpack-dev-server":"2.4.5"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.3.2","gitHead":"b3ab3fdf0e10e0de5238c865b7a0bb3e307e4929","_id":"moize@2.3.2","_shasum":"acc3637ad2505fab8645e23e13caff3dd0a9e514","_from":".","_npmVersion":"4.5.0","_nodeVersion":"7.10.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"acc3637ad2505fab8645e23e13caff3dd0a9e514","tarball":"https://registry.npmjs.org/moize/-/moize-2.3.2.tgz","integrity":"sha512-2rUinnG/nNjeVcIxgkAjA66wPibTPykDC1KAWjNjljBtYjXCEnf+ctmHFJNlq9Blh1i0w7V2W+dfK5OCgT2Hxw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFUW889crF76SJPfKJyWlk8S3KnHnP+m6r/oHd2GVrTQAiB4z7Zeof7RzUmtWn4+79KlU3TqMo5A+3Qx46GAtsr/sA=="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/moize-2.3.2.tgz_1495105283770_0.9771990159060806"},"directories":{}},"2.3.3":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.1","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.0.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.4.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"3.19.0","eslint-config-rapid7":"2.9.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.7.1","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.46.0","html-webpack-plugin":"2.28.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"10.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"10.3.2","optimize-js-plugin":"0.0.4","ora":"1.2.0","q":"1.5.0","ramda":"0.23.0","react":"15.5.4","react-dom":"15.5.4","rimraf":"2.6.1","sinon":"2.2.0","underscore":"1.8.3","webpack":"2.5.1","webpack-dashboard":"0.4.0","webpack-dev-server":"2.4.5"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.3.3","gitHead":"6f8e1170e385527bee9df8073ab9e966cd1cc448","_id":"moize@2.3.3","_shasum":"1d0ce9599d8cb7acbf8c34740831248bc006b9b8","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"1d0ce9599d8cb7acbf8c34740831248bc006b9b8","tarball":"https://registry.npmjs.org/moize/-/moize-2.3.3.tgz","integrity":"sha512-4hqYLjmpMFvLimpsbmqWRTCxGwBYHK2KDG5oJsqBK/N+dFuaIH7/QlkYvbCe5dVz6msNFdew3udGJszKq87Sew==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE2OB7MDrqcYLBBl6qxMUyRP9k3HvN0urY4u5mi/FnmYAiEAxuVZwwcWBMlERJ7Ul/NoXB1MbTsNUYoEYARo33PTeu4="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-2.3.3.tgz_1495308526539_0.8181484516244382"},"directories":{}},"2.4.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.1","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.5.2","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.1.1","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.8.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.48.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"11.0.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.5","underscore":"1.8.3","webpack":"3.0.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.4.0","gitHead":"abe360bb297b6aa6b5e8ee01f4b2de1e66fe3eba","_id":"moize@2.4.0","_shasum":"559001cff5b37dc4c08cc9d3002a5124657b7a29","_from":".","_npmVersion":"4.6.1","_nodeVersion":"8.1.2","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"559001cff5b37dc4c08cc9d3002a5124657b7a29","tarball":"https://registry.npmjs.org/moize/-/moize-2.4.0.tgz","integrity":"sha512-Kfsn7wT04pzgLhl+oJcuTtfVWq++iJV+UzQMEesrNxs4S5VbUzZ0tm1Ttfn/0lMa/bcV7/nVsAXxbuYmYtZnCg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCfghX7mbRA8K4a4oULqWeepFB5+LJFrLovHCHGeVNlXAIhALm39dw0I0DPysKuAm9vDeDXxF9cW6Lcj1AzmpXKJXqM"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-2.4.0.tgz_1498527045742_0.2647226869594306"},"directories":{}},"2.4.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.1","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.5.2","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.1.1","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.8.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.48.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"11.0.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.5","underscore":"1.8.3","webpack":"3.0.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"version":"2.4.1","gitHead":"1b142a22ee2b764566d7380730a3a480375f7c1f","_id":"moize@2.4.1","_shasum":"2f218705c7cc0bb3ae7e279855abac09556fae6b","_from":".","_npmVersion":"4.6.1","_nodeVersion":"8.1.2","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"2f218705c7cc0bb3ae7e279855abac09556fae6b","tarball":"https://registry.npmjs.org/moize/-/moize-2.4.1.tgz","integrity":"sha512-N99otLohgs5K8pS3mkxZ2qMNSLseKeX58P0cbARbRRCMfaPPVqT//K+yUye21J0Ro4W+fvA7cy7jimBApcVLng==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGNmDMT3e/c9IHMCPnBNKfFne9KgeFuU9kS0UHDHfJZhAiEA/udnatLBqdpQS+spEJeB9lSq3q2NoPkHKgAWzql8p6g="}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-2.4.1.tgz_1498732849292_0.9665033568162471"},"directories":{}},"2.5.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.19.1","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.0","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.5.2","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.1.1","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.8.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.48.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"11.0.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.5","underscore":"1.8.3","webpack":"3.0.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"typings":"./index.d.ts","version":"2.5.0","gitHead":"2988a43ec11d62ec52c32750062898be65b91449","_id":"moize@2.5.0","_shasum":"7182116efb69f5d2f5497f106a0bcd8daa8f24a5","_from":".","_npmVersion":"4.6.1","_nodeVersion":"8.1.2","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"7182116efb69f5d2f5497f106a0bcd8daa8f24a5","tarball":"https://registry.npmjs.org/moize/-/moize-2.5.0.tgz","integrity":"sha512-3EdkPgbxA8oKiCqpmWzxDj/j2et69z0J2TauASvxdvkPZsE4R/LLX55ROJHetm2BMgEvUCikCCW+iD2CqGYxmg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxG4Szg8t8NXshN3XrQ5Cl/LB21VMvFAVM71i2WJ7hLAIhAN7elalT5RSceBIjdnZrLWMNaKw0PbexMrbOWXwDDTSb"}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-2.5.0.tgz_1499202905100_0.13458655355498195"},"directories":{}},"2.5.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["./test/*.js"],"require":["babel-register","babel-polyfill"],"verbose":true},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.20.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.0.1","flow-bin":"0.49.1","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.4.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.6","underscore":"1.8.3","webpack":"3.1.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dashboard -p 3210 -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=test ava --no-cache","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"2.5.1","gitHead":"5f3a89ee9625df3ac0e07ea34f5dde5b32a632e9","_id":"moize@2.5.1","_shasum":"eb5a881c7d68c7fb6f9dfdd8d411201daae8e430","_from":".","_npmVersion":"4.6.1","_nodeVersion":"8.1.3","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"shasum":"eb5a881c7d68c7fb6f9dfdd8d411201daae8e430","tarball":"https://registry.npmjs.org/moize/-/moize-2.5.1.tgz","integrity":"sha512-i0w4VRT7yY7Wx7JZxwO1Liptxhwc6K4WPFRPPW3C2IRHIYSKIIV1dD+/PTkMYErfAHDf4nx2p2qwV/gCrouKPA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIChm7FnmmPzWll4HNUl9/oNK4Fa5j8qK6gDahu8NDq8yAiEAwtlXJJKGzrMskEpM816VSlG98mn+7dDEAjCMDCJIoZY="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-2.5.1.tgz_1499637824035_0.720521344570443"},"directories":{}},"3.0.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.0.0","gitHead":"8ebecb9fdce7619a4309349281dd741b83224162","_id":"moize@3.0.0","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-kTKr201YspXKh6PeCU++xhUR4moBx+TLykzgDbb5ulypbOB9IOhMxpstXj615puwZlt78fX7FKR2Mn8CiBX84w==","shasum":"0749a5a116598c2d9fda28aae212835a8ee8da33","tarball":"https://registry.npmjs.org/moize/-/moize-3.0.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCaosvaNzgCZDeJp54vlC/GE8ECscQdE1LbyguRvqeWGQIhANdI1h4Fo3F3t/KHPiTcR3p9KnpASs7k8HynNUGY7O5Q"}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.0.0.tgz_1500366696256_0.4787533001508564"},"directories":{}},"3.0.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.0.1","gitHead":"366871f21361615c6cf85859694e1ae73966d1fc","_id":"moize@3.0.1","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-yLgn1ir1detCKOs0p5eHvNjn5JorJKhpve3HMixq9iLuQoqbkH4kmnF9LtxAiIPEYgXIQ/bO2GYGU5hg93GAQw==","shasum":"3e39c27a7167b4b16c6eac5ef7b43d6a1f2246a8","tarball":"https://registry.npmjs.org/moize/-/moize-3.0.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGIjx/IgSKbo2oUDk7OVO9unOf+i/OY04ILNSntJqZLQAiEAoprhh2wbDPYRYGU08H2WOGsgfcteQwOLNj9NIlT3b5A="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.0.1.tgz_1500367064739_0.11710585211403668"},"directories":{}},"3.0.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","html-webpack-plugin":"2.29.0","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run docs","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.0.2","gitHead":"2833faa110d270f3223be094744044032a411d34","_id":"moize@3.0.2","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-sPjjRtkZh7UHpNBwxaWPIKuIbvGDNRX+GWZvv6LGgWL6aGAasAh7oYJ0sZ05UA87tqsNU6ng3Qj8s7nnqU7+3Q==","shasum":"39cc6735cbf0f2d5661c08f77b6b531c977b660f","tarball":"https://registry.npmjs.org/moize/-/moize-3.0.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHegX78jgMEP0SSWwlvJ4Y1qERJgWi1bTOXf1UJ0twUkAiAvXJcYENy5dVjU45k2+XC0TZ6aR6C30VnyAxdOAlsw9Q=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.0.2.tgz_1500396910018_0.3403106222394854"},"directories":{}},"3.1.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.1.0","gitHead":"abf34ca1f743f00f902c5eaa89dec66a44d27501","_id":"moize@3.1.0","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-YQvPz+roOqEikGq2QKTU/Oq6P+TSwA5kd3qekv0RH1gzOnxAWjNZ/eK93hatfgN3jou7U0X6uOhN6tHvFV7Hxg==","shasum":"644b8b1635ddf10125d30fec268a2e46d6db27d6","tarball":"https://registry.npmjs.org/moize/-/moize-3.1.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG9iShAotucRNjTBQnyHnvvNG8JhFjTLyGmcrsor59D3AiEAinEoDq/FTEarhoJ5OWxvEDjnWSwGMk6/luHq+Dg0HzU="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.1.0.tgz_1500496244511_0.17965647322125733"},"directories":{}},"3.1.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.1.1","gitHead":"bbcc207dd6a8e80aa297690f8704301df5adbccf","_id":"moize@3.1.1","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-s4IsjrmG+0fymMeEfsMRdJuoZWuEU4FbSNWdG79c0ptRkhK75X1OUw8mMgJv4EVr8QqlN6fmQZi5N1g/CTc9yA==","shasum":"3b5b093ce5a0566b3168362fbf9a5284b5d86e02","tarball":"https://registry.npmjs.org/moize/-/moize-3.1.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCjv+fM/bkrzORg2mFYVEgHrZfgDY32yvpvbpDRkfRdAAIhAN68G+BW26EmFU/TDWC+yMQwP2RaWZkWP9Jn12qUonu6"}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.1.1.tgz_1500529368441_0.9412965690717101"},"directories":{}},"3.1.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.1.2","gitHead":"8cc281b61a1b86f202956125c4cd5474f531804d","_id":"moize@3.1.2","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-Lr+AkosOkYcjfDuJ/5nmZ5Y0n5qYW1lC5uPP0vKmTLqQcJPHJoEk1YEg/2YKE2diHafD5NJB0nsUPLpoJuuFQw==","shasum":"9533f7fa95fb251d2efedc299a5365c66bcb5c4b","tarball":"https://registry.npmjs.org/moize/-/moize-3.1.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCHmc6YWErAJJcqFSgxGhtXp8TY/F/OKdp2if4ou67pLQIgW00J/elZSiSnUc1JLikH9KzJcn/shPXbHv8xjOV2w8Y="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.1.2.tgz_1500529520690_0.1999406791292131"},"directories":{}},"3.2.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.2.0","gitHead":"64842966e4a725b74593f89f64b9affbb36bd87b","_id":"moize@3.2.0","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-8RdnkU05cNRi8bss4zgjNtc+jdsgpHQeZCz4Jrcpx69YZJcdkhcyrK2kk0NwT8nQua14DUK+K3HMmEMeUiqeIw==","shasum":"e81af10c8c94c34aba274f2eb983960bdca478a3","tarball":"https://registry.npmjs.org/moize/-/moize-3.2.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG6UKACmnQTDAM8Wx+a9EswMu/wpOrmQSawHc9rYeXKHAiEA1fJHvZqaWhABI1HfQEfh9LjAvDhfHMiRgXkKBock/h8="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.2.0.tgz_1500535233029_0.7792782543692738"},"directories":{}},"3.2.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.2.1","gitHead":"ff791c89f169d67006f5f2776279ad29dc774652","_id":"moize@3.2.1","_npmVersion":"5.2.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-7VthGzTLZ1jVIFt1wBalFx6nzivRL4ocKKdBG5a26R4cfTz0fRgLl04lFFkXmBs8z6/azbvtF1eWbFxKlBqkwg==","shasum":"77350647e92f575425758474560cc08d612972e3","tarball":"https://registry.npmjs.org/moize/-/moize-3.2.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDstYbECTb8xjT8roFuM1CN5HL+vf+LYysSLX+KIqRznAiANdOtzwdDZwP5pR5waYekzCw4HGlP/ItYfYZfW2Vnk1w=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.2.1.tgz_1500537838047_0.017701839795336127"},"directories":{}},"3.2.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile":"npm run clean:lib && NODE_ENV=production babel src --out-dir lib"},"types":"./index.d.ts","version":"3.2.2","gitHead":"3b73b4a76b41bc1e40d03778455c18ecf4f63bb2","_id":"moize@3.2.2","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-E26obxLIPRBx9kYxGEz9Ao9i4+JyYPxmmep128mazIEAxb+V8FhauhOo7fQQN338fzX/EOyUjlmcZMyUFuhzkQ==","shasum":"202ecdb7c045617ceb1970d788d7e57a10c90a43","tarball":"https://registry.npmjs.org/moize/-/moize-3.2.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCdgSLYu4MTXbq0I4b8DR8am8/gJliahfzojYAdFT8DtQIgUuIGD9EsjgonAu0sDfPh377kd5dOK9DeXYXaEBrqKrQ="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.2.2.tgz_1500586199611_0.09814675501547754"},"directories":{}},"3.3.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-prettier":"2.3.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lint-staged":"4.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier":"1.5.3","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","lint-staged":{"src/*.js":["npm run prettify","git add"]},"main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","precommit":"lint-staged","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run flow:generate && npm run docs","prettify":"prettier --single-quote --no-bracket-spacing --write 'src/*.js'","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.3.0","gitHead":"1144271df9fe310b54fb38996d3ef1a42cb3b8cc","_id":"moize@3.3.0","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-CZq1Kxk3c6bgLfKv8T34ZfqkgaL+Kmr3KP6l6R7fAwynHB4btxSspLHmfbd5yojC/ggqSJfZCT1FMKJWmQ6hKw==","shasum":"1f677fbdd07a60624bd7a6c020c6903ba5647b22","tarball":"https://registry.npmjs.org/moize/-/moize-3.3.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG105of2oH/r1NTZIc+GjJHGKJQ8AiUzxKi1ZtH9e8XOAiB3DNvcNdI13uKYkliN0Mh9fXS5QTPkqgxi4wnIVAafYg=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.3.0.tgz_1500827529968_0.20670409151352942"},"directories":{}},"3.3.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.2.0","eslint-config-rapid7":"2.10.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.7","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.50.0","flowgen":"1.2.0","html-webpack-plugin":"2.29.0","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.3","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.0.3","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier-eslint":"6.4.2","prettier-eslint-cli":"4.1.1","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"2.3.8","underscore":"1.8.3","webpack":"3.3.0","webpack-dashboard":"0.4.0","webpack-dev-server":"2.5.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","format":"prettier-eslint 'src/*.js' --write && git add .","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepush":"npm run format","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run flow:generate && npm run docs","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.3.1","gitHead":"de0b44118291c6b370675e50421ac53d7a778d0c","_id":"moize@3.3.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-a9QXFcKhvjB5NBrBYIis3bDITLQi6HS5vnDIw1isCsS7Pc5QmbkF6rC5RowShcqb9QYhHqcS1KzNikCTfLb79w==","shasum":"510da796a5df7f85369f60420bab4b86e9d6c701","tarball":"https://registry.npmjs.org/moize/-/moize-3.3.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAC2adpWMIIs/LjUetI5zpXe/A8EIjdd8Unc1U2rISecAiBWCtahdpBYCHXBfvYdSOL5iLUCFNgBZoy6rDSKPG6fyQ=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.3.1.tgz_1501981017543_0.3983544195070863"},"directories":{}},"3.4.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"concurrency":5,"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"0.21.0","babel-cli":"6.24.1","babel-eslint":"7.2.3","babel-loader":"7.1.1","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"6.23.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"6.24.1","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"4.4.0","eslint-config-rapid7":"2.11.0","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"0.52.0","flowgen":"1.2.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.4","jsdoc-babel":"0.3.0","jsdom":"11.1.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"0.4.5","memoizerific":"1.11.2","nyc":"11.1.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier-eslint":"6.4.2","prettier-eslint-cli":"4.1.1","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"3.0.0","underscore":"1.8.3","webpack":"3.4.1","webpack-dashboard":"0.4.0","webpack-dev-server":"2.6.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --config=webpack.config.dev.js","dev:dashboard":"NODE_ENV=development webpack-dashboard -p 3210 -m -- webpack-dev-server --colors --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","format":"prettier-eslint 'src/*.js' --write && git add .","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepush":"npm run format","prepublish":"in-publish && npm run prepublish:compile || echo ''","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run flow:generate && npm run docs","start":"npm run dev:dashboard","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.4.0","gitHead":"242071c48046f0efa06f5e2351de8859eb5fb828","_id":"moize@3.4.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-+MICsXj+ROJjO1n6gPg3UlRDU6Vff5kXU90PYfpmB7K1bE1riUvUidPYSv60BG6CbGpDWBarBPt6WTYULeQy8A==","shasum":"3fc3edba2001475117ed7955d6290d442882660c","tarball":"https://registry.npmjs.org/moize/-/moize-3.4.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHV2RXvGZ56kUwEVI00fpFVC7hL4zuczwj6UhT7sXm+8AiEA8hVHHR2rxJYHSk3JO+V6ZwlMZnWoLQtFRM7XBcTu0fc="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.4.0.tgz_1502025492806_0.06191989965736866"},"directories":{}},"3.4.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.22.0","babel-cli":"^6.26.0","babel-eslint":"7.2.3","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","bbq":"0.1.1","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"^4.6.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.54.0","flowgen":"1.2.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.4","jsdoc-babel":"0.3.0","jsdom":"^11.2.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.9","memoizerific":"1.11.2","nyc":"11.1.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prettier-eslint":"^7.1.0","prettier-eslint-cli":"^4.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"^3.2.1","underscore":"1.8.3","webpack":"^3.5.5","webpack-dev-server":"^2.7.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoization","cache","memo","memoizer"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.4.1","gitHead":"03e6e6149bc32d14903f2945a84452c4ea4881a8","_id":"moize@3.4.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-QnhQtWiLTwpt/smNPs6L1WK9DL+6UbAy9IKDXbauRXI1HNTUEdGg7ImQsB56+NXHo6yV72XAhpryZ4lELA04zw==","shasum":"16d08e62ca75b3f9c03dbc7f3ee83bb6a208849c","tarball":"https://registry.npmjs.org/moize/-/moize-3.4.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCP1mIZv7l0wKh4AcsVvtyTASHKqXBR+WO/KoZPyX7QQgIhAL94AcwQuJwDGSEcjrNK/aXXiEZfBIY5VEHXF4VOwOO5"}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.4.1.tgz_1504431300520_0.4894964077975601"},"directories":{}},"3.4.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.22.0","babel-cli":"^6.26.0","babel-eslint":"7.2.3","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"^4.6.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.54.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.4","jsdoc-babel":"0.3.0","jsdom":"^11.2.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.9","memoizerific":"1.11.2","nyc":"11.1.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"^3.2.1","underscore":"1.8.3","webpack":"^3.5.5","webpack-dev-server":"^2.7.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.4.2","gitHead":"a1ca09358ab7c719eb709f1d4b88d811f0900528","_id":"moize@3.4.2","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-WNsl8JKuXfTmLdn9H2ptAd1yQKADnU0L984iO0RSke/hsAjHqfm3pJW9UEahUCczFj4JBF5vvtcPG6DSiTXvKQ==","shasum":"f254e05692a60a23ab6d2ae6b433ae21c43662fa","tarball":"https://registry.npmjs.org/moize/-/moize-3.4.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCw1Lyv11WhE2w8dLW8/Fn4luG3ONQ17hnsGPRaK6QsogIgFWHhLyl4p4PONiCakjCmr8ijpyQHJx1OZB5eDe8igno="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.4.2.tgz_1504454899270_0.7477164731826633"},"directories":{}},"3.5.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.22.0","babel-cli":"^6.26.0","babel-eslint":"7.2.3","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"^4.6.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.54.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.4","jsdoc-babel":"0.3.0","jsdom":"^11.2.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.9","memoizerific":"1.11.2","nyc":"11.1.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"^3.2.1","underscore":"1.8.3","webpack":"^3.5.5","webpack-dev-server":"^2.7.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"3.5.0","gitHead":"1fd81fd41a746f03b120666aa3c283f593ae1fc0","_id":"moize@3.5.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-3VjTYhIPkOPMJy2tsq6Lz3ePg3M3aaWpet4fI+xt1tbfOUAxMILdOK8Dhj3fbhnIfZBA3zXhi5YlptWYiYTXGg==","shasum":"28b32be875be88a92bddc6765fb5def989708d73","tarball":"https://registry.npmjs.org/moize/-/moize-3.5.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGxjlexjMrQ4XSF2ySCgIMce3UVRGub0o0GkUqe8SMc+AiBSlD0bE1myUb4YxfjFgKNjHhT98YwWpjXVf9S8qB5lMg=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-3.5.0.tgz_1504994592649_0.9584468037355691"},"directories":{}},"4.0.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.22.0","babel-cli":"^6.26.0","babel-eslint":"7.2.3","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.0","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.0","cli-table2":"0.2.0","eslint":"^4.6.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.54.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.4","jsdoc-babel":"0.3.0","jsdom":"^11.2.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.9","memoizerific":"1.11.2","nyc":"11.1.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.5.10","q":"1.5.0","ramda":"0.24.1","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.1","sinon":"^3.2.1","underscore":"1.8.3","webpack":"^3.5.5","webpack-dev-server":"^2.7.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"4.0.0","gitHead":"e5e00dc529527524c9b3f84af4e203899c8e1619","_id":"moize@4.0.0","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-vP+Yo4ZiAuQTBii4ARYZ89DvuNP3m4O1197xjW5guBzCtmADAWCOIM+x4is8fi5i2Kqp0GX8wQCHyxM7r/ZsZg==","shasum":"e7326d207dcb5f78aed083ad1110a24ec37baec9","tarball":"https://registry.npmjs.org/moize/-/moize-4.0.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvLWAlXggCK+Ug0NXHfnWpOwfw2ohSuFy0w4heInm3hgIgQbnt3bcbXo1B6mo/Sq0fPqOtuppuO+wu9MzaKI/Dsuw="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-4.0.0.tgz_1505006369450_0.9660856740083545"},"directories":{}},"4.0.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.22.0","babel-cli":"^6.26.0","babel-eslint":"8.0.1","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.1","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.1","cli-table2":"0.2.0","eslint":"^4.9.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-equals":"1.0.3","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.57.3","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.5","jsdoc-babel":"0.3.0","jsdom":"^11.3.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.11","memoizerific":"1.11.2","nyc":"11.2.1","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.6.0","q":"1.5.1","ramda":"0.25.0","react":"15.6.1","react-dom":"15.6.1","rimraf":"2.6.2","sinon":"^4.0.1","underscore":"1.8.3","webpack":"^3.8.1","webpack-dev-server":"^2.9.3"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"4.0.1","gitHead":"edafb87962dc9a08f4aed77dcc1914bd7da6ca11","_id":"moize@4.0.1","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-6o6JwrT2MT3RVEEJX6xrT7wns0rnPA1D3GuOjgsB3GMJqeXIpDloAt41s+Yjfpeq94bXVIo6kGYBqHOAjNpT1g==","shasum":"c131fa7079fba15d85b31e5c55cd09532bcdb8cc","tarball":"https://registry.npmjs.org/moize/-/moize-4.0.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHwNsQ1/xUH49oZoGjtAYEjEvXEVawes9MsLXhyJCU/1AiEAryZeaoSCwWfhPQIiex7aRVBhJ6UR9JaCTuSwXuUac6Y="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-4.0.1.tgz_1508516598512_0.9539540607947856"},"directories":{}},"4.0.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.23.0","babel-cli":"^6.26.0","babel-eslint":"8.0.1","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.1","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.1","cli-table2":"0.2.0","eslint":"^4.10.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-equals":"1.0.5","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.58.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.0","jsdoc":"3.5.5","jsdoc-babel":"0.3.0","jsdom":"^11.3.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.11","memoizerific":"1.11.2","nyc":"11.2.1","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.6.0","q":"1.5.1","ramda":"0.25.0","react":"16.0.0","react-dom":"16.0.0","rimraf":"2.6.2","sinon":"^4.0.2","underscore":"1.8.3","webpack":"^3.8.1","webpack-dev-server":"^2.9.3"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"4.0.2","gitHead":"8f78bafc106a71891d05df24883f88353a4f009b","_id":"moize@4.0.2","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-E5nnV41xBQX3WNzUEmpDc8UPt/AbO9kgLlhTpFmnxIDsO0nP20mDdtsQq53sACWH9Z+N7EJx3/NPjFtPHkvnhg==","shasum":"56cc8a82fe1e92e21a855e9a4984a9e29d54ee1a","tarball":"https://registry.npmjs.org/moize/-/moize-4.0.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG4VbWOFepuj6WMNRMNtHUy2DefohPQunExtUYTCOWO2AiA0hcszs6KW46pRsr75h8Yp/CH7X08CYP97wpmZviBGXw=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-4.0.2.tgz_1509589918041_0.00862587965093553"},"directories":{}},"4.0.3":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.23.0","babel-cli":"^6.26.0","babel-eslint":"8.0.2","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.1","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.1","cli-table2":"0.2.0","eslint":"^4.11.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-equals":"1.0.5","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.59.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.2","jsdoc":"3.5.5","jsdoc-babel":"0.3.0","jsdom":"^11.3.0","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.11","memoizerific":"1.11.2","nyc":"11.3.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.6.0","q":"1.5.1","ramda":"0.25.0","react":"16.1.1","react-dom":"16.1.1","rimraf":"2.6.2","sinon":"^4.1.2","underscore":"1.8.3","webpack":"^3.8.1","webpack-dev-server":"^2.9.4"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"4.0.3","gitHead":"6e2a4146d67dcc7a7820ea2f40d9d4bdc9c3e0f3","_id":"moize@4.0.3","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-0R/XtwP0Q3Tja+ryEmG8Ymb2RKz+tt0mU2uwRA3QeuxB90ckvFH8ZzUHOv+nS8DpN1YF97kAj/siGb29U3/XMA==","shasum":"c31a256484e4f34148c7f35b6580283d93dc054a","tarball":"https://registry.npmjs.org/moize/-/moize-4.0.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICIjmYSOHSxKyG2QSwgu4wyRaqVG2r1JJO6/hRQblAAzAiAJG+cKYao5gKRJC8sEP175FByjHPjJxCCXV+vxdVJnXQ=="}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-4.0.3.tgz_1511042227642_0.6605741251260042"},"directories":{}},"4.0.4":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.24.0","babel-cli":"^6.26.0","babel-eslint":"8.0.3","babel-loader":"^7.1.2","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-decorators-legacy":"1.3.4","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.1","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.1","cli-table2":"0.2.0","eslint":"^4.13.0","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"1.9.0","fast-equals":"1.0.5","fast-memoize":"2.2.8","flow-babel-webpack-plugin":"1.1.0","flow-bin":"^0.61.0","html-webpack-plugin":"2.30.1","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.2","jsdoc":"3.5.5","jsdoc-babel":"0.3.0","jsdom":"^11.5.1","jsdom-global":"3.0.2","lodash":"4.17.4","lru-memoize":"1.0.2","memoizee":"^0.4.11","memoizerific":"1.11.2","nyc":"11.3.0","optimize-js-plugin":"0.0.4","ora":"1.3.0","prop-types":"15.6.0","q":"1.5.1","ramda":"0.25.0","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.2","sinon":"^4.1.3","underscore":"1.8.3","webpack":"^3.10.0","webpack-dev-server":"^2.9.7"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["memoize","memoized","memoizer","memoization","memo","memcache","memcached","cache","cached","async","storage","memory","optimize","performance","lru","ttl","expire","promise"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","build":"NODE_ENV=development webpack --progress --colors","build:minified":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js","build:stats":"NODE_ENV=production webpack --progress --colors --config=webpack.config.minified.js --json > stats.json","clean":"npm run clean:lib && npm run clean:dist && npm run clean:docs","clean:docs":"rimraf docs","clean:dist":"rimraf dist","clean:lib":"rimraf lib","clean:es":"rimraf es","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack.config.dev.js","dist":"npm run clean:dist && npm run build && npm run build:minified","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","flow:generate":"flowgen ./index.d.ts --output-file flow-typed/moize.js","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist && npm run docs","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:lib":"npm run clean:lib && babel src --out-dir lib","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es"},"types":"./index.d.ts","version":"4.0.4","gitHead":"2c2b91d821642837dbb71f7485476fce61f1ccf9","_id":"moize@4.0.4","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-YZMPkqir1d468cQzxKoUAw8Hh3AeZKFwRxuCGfPz4QgIMf1FpK+JzVfzuOnboFrE25J71aXyLANaFS27vCAMbg==","shasum":"f58ce63439f73f8f3014fb92129dec615160a8d6","tarball":"https://registry.npmjs.org/moize/-/moize-4.0.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCZfnF4W5eGl99pQS7LbgmyBKzljAXnyQxkq0tev0LFRQIhAIGnCrHppwAI9IM7VVjRX/34iSQ+AHIE44I1U0QjT43u"}]},"maintainers":[{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"},{"email":"tony.quetano@planttheidea.com","name":"planttheidea"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize-4.0.4.tgz_1513080804210_0.7948875441215932"},"directories":{}},"5.0.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"json-stringify-safe":"5.0.1","micro-memoize":"1.8.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"1.6.1","babel-preset-react":"6.24.1","babel-preset-stage-2":"6.24.1","babel-register":"^6.26.0","benchmark":"2.1.4","bluebird":"3.5.1","cli-table2":"0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"3.0.0","eslint-loader":"2.0.0","fast-equals":"1.2.1","fast-memoize":"2.3.0","flow-babel-webpack-plugin":"1.1.1","flow-bin":"^0.67.1","html-webpack-plugin":"3.0.6","husky":"0.14.3","in-publish":"2.0.0","ink-docstrap":"1.3.2","jsdoc":"3.5.5","jsdoc-babel":"0.4.0","jsdom":"^11.6.2","jsdom-global":"3.0.2","lodash":"4.17.5","lru-memoize":"1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"1.11.2","nyc":"11.4.1","optimize-js-plugin":"0.0.4","ora":"2.0.0","prop-types":"15.6.1","q":"1.5.1","ramda":"0.25.0","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.2","rollup":"0.56.5","rollup-plugin-babel":"3.0.3","rollup-plugin-commonjs":"9.0.0","rollup-plugin-node-resolve":"3.2.0","rollup-plugin-uglify":"3.0.0","sinon":"^4.4.2","underscore":"1.8.3","webpack":"^4.1.1","webpack-cli":"2.0.11","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.0.0","gitHead":"59fb4e9e804ab488986feb17e48f72b29544dda0","_id":"moize@5.0.0","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-eOTKCfa59jfZReWa6M+5PU0Cv7B9mo+EFkEMiPK4aVUUsbFH/P5wDpMhOq08SCa/CDxaeTFyjV8PD4jLvrbpgw==","shasum":"5eba1e2c795366d8ec449667b8b2ba46c6600fe2","tarball":"https://registry.npmjs.org/moize/-/moize-5.0.0.tgz","fileCount":29,"unpackedSize":257975,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDHMLXx+T4pNTjbk+DwtxauOl6PDvCJizgicOAlkhFjlgIgW4iKsQxy445sxONdE+sFLQNN7bOJh3do7SPRIR0p5HU="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.0.0_1520803288649_0.7820839450094945"},"_hasShrinkwrap":false},"5.0.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^1.8.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.0","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.67.1","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.4.1","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rollup":"^0.56.5","rimraf":"^2.6.2","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.0.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.2","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.11","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.0.1","gitHead":"1c3e1e7d2404cefe847d84d06a0f1c2c959d3cf2","_id":"moize@5.0.1","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-wyoxOVpPchMayNHcdeFZvnyEMUvi7H2o4AYQLXycAHGd0176ePTLbgqXIXER2QZ/mVeI8r3EMElIkCfnlvVNbA==","shasum":"e8a45dcb636259886af76f258e467a68c3b521bc","tarball":"https://registry.npmjs.org/moize/-/moize-5.0.1.tgz","fileCount":29,"unpackedSize":258075,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICw+/fG2Ceva9aTXe/ToK6U8lni6Vj3yT6bhNp4CAWRrAiEAnx1X+BULTdZLw0SP0T4McyT7vBewPbLC6+NWy9Pm488="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.0.1_1520814499866_0.5207039487125564"},"_hasShrinkwrap":false},"5.1.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.67.1","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.6.0","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rimraf":"^2.6.2","rollup":"^0.56.5","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.5","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.12","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.1.0","gitHead":"89a95fc1f57b0d476ff1c13c83650d683b6d103c","_id":"moize@5.1.0","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-KZdtpu1Sx0OCvimcDJZ/c1x7YusmpEG0WV3jrslgx+LOocyB1UBjm1O4WU+DKjeHQ/sucLcygesGe8ixs8sylA==","shasum":"5e42bc7053632a925535ee737336cd06c07b5507","tarball":"https://registry.npmjs.org/moize/-/moize-5.1.0.tgz","fileCount":29,"unpackedSize":262230,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDjdGu9e1uroMcuRoGEx5wz6X8OEgKEgMa7lzrVji3keAiAV3HGA/FacsyJh8yOWv5BT8TLApbJqjkC00opBJ+4Tsw=="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.1.0_1521054813986_0.3610861065593429"},"_hasShrinkwrap":false},"5.1.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.67.1","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.6.0","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rimraf":"^2.6.2","rollup":"^0.56.5","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.5","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.12","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.1.1","gitHead":"e77655bb996d3448366e138178fd961fe751535c","_id":"moize@5.1.1","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-oVZvFDLKLk6fY5IfqrfoIVrJfMBD7d8Qar5DpyQu4oUsQrF3YFVN24gCckKGSy2J2uzBbP3o1h60iSkmGdmYyw==","shasum":"d653f777eb3d54885ef513ba9b522136fc48d6ac","tarball":"https://registry.npmjs.org/moize/-/moize-5.1.1.tgz","fileCount":29,"unpackedSize":263853,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCG2Fp29T/8wRYowufc9tVRpEkBm05SUw0RUYslqjOO6gIgOT3anSS0nX1q8zuNd4fjj7ea1mPHAzgu1RcshyOCyMM="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.1.1_1521076160922_0.6462344729695264"},"_hasShrinkwrap":false},"5.1.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.67.1","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.6.0","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rimraf":"^2.6.2","rollup":"^0.56.5","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.5","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.12","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.1.2","gitHead":"a7823b288f62f2638a504558d43eec4e5faf960b","_id":"moize@5.1.2","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-mq2QdlAI/ocPxUPJgvB9+k78yJcBhmGyG/EXmUcsq6yC2ODXl1QHjafGMnMjCQsD9kxvF4E5mqdDzTTqDi/RTg==","shasum":"5cf12e75ea18af6d3657ab6be2112e8bccc111b7","tarball":"https://registry.npmjs.org/moize/-/moize-5.1.2.tgz","fileCount":29,"unpackedSize":264043,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCq89adECv2drWrzItMpnIDgojXh8i/kKSpiGSX0Cn0vgIhAKRZR84yhPUeYOhp7yYe9UPVZIQW2tISGcdjoFegiTtH"}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.1.2_1521077830481_0.7375007473826576"},"_hasShrinkwrap":false},"5.2.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.68.0","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.6.0","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rimraf":"^2.6.2","rollup":"^0.57.0","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.6","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.12","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.2.0","gitHead":"3240a68f0ec9bce976955489ab7ef680bb2d54e8","_id":"moize@5.2.0","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-k+t63nuZXomlydmCinnWfmPnwIaVWLDEGrGT4cMWcgL9YWllw7xhl54Je/KWQYaEPICL2CRdBHRGDXKX/ftn6Q==","shasum":"4a9002924853f6d87963b3eb16e19a80c823038d","tarball":"https://registry.npmjs.org/moize/-/moize-5.2.0.tgz","fileCount":29,"unpackedSize":265903,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHU+N4ptENfCxpZnLsKAHER4/pLcn5fPXtFkWOvztqBFAiEA8grCHGtVCm7eE9T9bJjCcsmzRnV4zoY8phav+wd+Hc8="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.2.0_1521213415843_0.9620737478345689"},"_hasShrinkwrap":false},"5.2.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.2.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.2","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.18.2","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^3.0.0","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.68.0","html-webpack-plugin":"^3.0.6","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.6.2","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.2","nyc":"^11.6.0","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.2.0","react-dom":"^16.2.0","rimraf":"^2.6.2","rollup":"^0.57.0","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.2.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.6","underscore":"^1.8.3","webpack":"^4.1.1","webpack-cli":"^2.0.12","webpack-dev-server":"^3.1.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.2.1","gitHead":"455ffd36d4ef3d5284ee5dac3411343be2667f56","_id":"moize@5.2.1","_npmVersion":"5.7.1","_nodeVersion":"8.9.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-dP6kpE4+lQ2wR/C2WwS8K9GoNhkhaLUiT8X9/tZK5C16xo/haQRUMzt4bK/PNPgASwMnXgUxzDaMxTZdpAboPQ==","shasum":"7b0da061ac6efe4ee8ca0b9511d9ce687bdacf0e","tarball":"https://registry.npmjs.org/moize/-/moize-5.2.1.tgz","fileCount":29,"unpackedSize":265101,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD3aWx/GswLeuRfJeja4JsGgn51qE/JZOZ/G3kfwJb/dgIhAODe9/r27flV2Y0XczvUx4Udk/1LXtvE61OlYbVriQMk"}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.2.1_1521214884559_0.7626673334978538"},"_hasShrinkwrap":false},"5.2.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.3.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.19.1","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.70.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.8.0","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.3","nyc":"^11.7.1","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.58.1","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.6","underscore":"^1.9.0","webpack":"^4.6.0","webpack-cli":"^2.0.15","webpack-dev-server":"^3.1.3"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.2.2","gitHead":"4fd965597adce7087407cf81d736db2d22427781","_id":"moize@5.2.2","_npmVersion":"5.8.0","_nodeVersion":"8.11.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-byCh9yX/mvW3+/UNkEEbVzJQUizozcjvrj7aRKkAw5Dg7z/wI4/aGwPTcVBPS9cH5mTwHgL0NPkta8T9UzHC1A==","shasum":"f4725937258e2cea58fd836b854f764ecb6cea4b","tarball":"https://registry.npmjs.org/moize/-/moize-5.2.2.tgz","fileCount":29,"unpackedSize":277844,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3QqPCRA9TVsSAnZWagAA7UMP/Rf3Bqgq3E5VWqh1BYVs\nT5LUM5C4feoS7ROmqFiur6Av8EsAWgS+AvPN7Dbd+g59S8POnoPdA+qjFdrU\nizAkVcENoAhQXCr0T2uVmppEF9QeLYe9nFSaKmiA5IPZC1OfOhJPoV7eJy+3\nlhEhQZqIXNmbc12xlzhvQQ0qQrXZsapKuDmBiJtACjSH56mGEt+PxL0vcgFI\njyGKtkYFpysHAo4y6ktFHeycWXvk6jAGAmE5vjVwrwbLBkrVx0b95SKSbRkJ\nLAQf4P2Nr7cKdaS78yegw3gWIpcVoSy8kInVApOjjkrvHVIUtWQOic8H4i2h\n3LtZkcysaXZvVxYZugrcW6Yd4G+A+9/vaYYSlNTdcdPE+J+DedbAMue8++1W\non9PbThLClj9+ms1/KqHas0c917qNyUNfq2MtCpDVePjkoAdG5npIoYy+mUJ\nlexbAqYLRfIv7j8EUFUh9CJoU37kUYH/ENUuvJDAaX/hjejdUuKUxE9XCe7F\nOMImfjRNuw1gGG0QsX2RBvnWEoWaR/LST0JXg5xSJ/O7II45EjWuUD76VWAs\nNIk+4VP0aj3frm0JtJrXiwz6vKUwMSYamMokAeihGITOrWhFmwdGTdKStdNe\nHzBVUsm5/D9xgQkynoq6Mti5/A9/bir/HXdeKAhOs0S7KbtZ3YoCEm6eojCJ\ngp9h\r\n=JwBf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzeIoOaq3mBrAjwS/6dARVLMLJcJ/Ka3W19Z8cKhn5TwIgFHQJ6TYMZEy3dk90NYfo9GJj8+yZA3pfHO4xeyBRGAc="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.2.2_1524435596144_0.41954360393895285"},"_hasShrinkwrap":false},"5.2.3":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.3.1","json-stringify-safe":"^5.0.1","micro-memoize":"^2.0.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.6.1","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.19.1","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.0.0","fast-memoize":"^2.3.2","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.70.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.8.0","jsdom-global":"^3.0.2","lodash":"^4.17.5","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.3","nyc":"^11.7.1","optimize-js-plugin":"^0.0.4","ora":"^2.0.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.58.1","rollup-plugin-babel":"^3.0.3","rollup-plugin-commonjs":"^9.1.0","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^3.0.0","sinon":"^4.4.6","underscore":"^1.9.0","webpack":"^4.6.0","webpack-cli":"^2.0.15","webpack-dev-server":"^3.1.3"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.2.3","gitHead":"fbeff061051779c11ee0bb64edb95b65fe02aca9","_id":"moize@5.2.3","_npmVersion":"5.8.0","_nodeVersion":"8.11.1","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-5jmBoMatftFX9FfSeza2Do630G0uv1NxEiZI3RI9hP/El07jLmFntr2u1lezxqCDf4VjeQtzBys2vFKwyEEPUA==","shasum":"0a0d8d070c4f4adf48cbc10b065dc3cf206698a7","tarball":"https://registry.npmjs.org/moize/-/moize-5.2.3.tgz","fileCount":29,"unpackedSize":278051,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3pocCRA9TVsSAnZWagAAP2QP/jDLn6SBNrNHDPQDguil\nEQ45iJ0jZBXaMtK51Faqtp59wJ8nH4aGkDosQlUBXfQ2sPSpLIwU+hwo/2qC\nHn+54T1pw3L/Jl42qWTKUcLJFPLNCl8rde3KTTs6yur2r/FjIljKT5ULnBll\nYruhGYRcSVMogX/+xIhd/DK7yGCnmIjLLL259wAqfHjBxY/Fpdz8gvmTDNzp\n2X6B/R6vFiiLLJXCWFOnxGrWVR9dClzfxhJEVtElRkrDxVWuvL95z8m/Nhnl\npybRSiwAr4tcN9KFZXUw2drvX+BpfhLAoRA8gjvZbRS8ZgFNhQ2w2RJlVr85\nizaakqfZv2/aznYH0GLmEFHOT8zIj36Q/TGJ1Jxjx4kzcaGKEQEN3sl6UWDE\noK0lWsucU3rB9YiMvQ3oME8cnss/UKvoInu2jpoJCTJT3KHjcO2MaUEZfFrd\ngPs67tyAHnW4HaUqOGT7g0D+DH0kQtmLv0RShahTg3QMPFhKgxhApbqt1g3e\nm6wom2/R0uIwXNNm3usUhzQo7KBPeqK/yFRjhJJ7o3IcmnR5U6MrOsU5dQBq\nA6CgpDumYMYnORamf6h247GLYwtmmK2SvqxZy0hNIB2Ds9V2LTpmYF3MivmF\naJhEsPox3krVmcJ4L3s7B7gQHD+uLY03nyfyO8x2BI45QdNGvDiy2UDDqGv4\n7O5h\r\n=BOdK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIARu/hs2yMNoDnkZGJEH53vYwruHqRUF0Q6OHp0wONUCAiAttt1LBYngUsQcvzBj3z4otVIiYvzsLgR2hSUB68SQ0w=="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.2.3_1524537881701_0.02294139621993385"},"_hasShrinkwrap":false},"5.3.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.5.3","fast-stringify":"^1.0.3","micro-memoize":"^2.0.3"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-search-and-replace":"^0.3.0","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.7.0","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.19.1","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.0.0","fast-memoize":"^2.4.0","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.73.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.11.0","jsdom-global":"^3.0.2","lodash":"^4.17.10","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.3","nyc":"^12.0.2","optimize-js-plugin":"^0.0.4","ora":"^2.1.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.4.0","react-dom":"^16.4.0","rimraf":"^2.6.2","rollup":"^0.59.4","rollup-plugin-babel":"^3.0.4","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^4.0.0","sinon":"^5.0.10","underscore":"^1.9.1","webpack":"^4.11.0","webpack-cli":"^3.0.2","webpack-dev-server":"^3.1.4"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.3.0","gitHead":"424365b78bff76c354f88733892fe2364b081842","_id":"moize@5.3.0","_npmVersion":"6.1.0","_nodeVersion":"8.11.2","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-WO95YQeCl+/UNiGEcpIPi/IrC3IRgPmE29RiFOb1kipX0I5+shSV2PoS0MeUrYS68xUpJRyu+EWxogXJT52zpw==","shasum":"54b46c310f637aee7648ee673fa22bc298a2c075","tarball":"https://registry.npmjs.org/moize/-/moize-5.3.0.tgz","fileCount":29,"unpackedSize":304558,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbF0a0CRA9TVsSAnZWagAAuVkP/0GrEvTru448KJISDm63\nmJujTNPue2a7AU92ghIYctDoFsVb+I1NICizDST0IwXl2SqPD7UDfkbxM8Ud\n4QP5BWKA3CEXow5DIsvMSihR8zfHawkXiyZfDR5bi+d2CBeWWc3Rle5rEKKY\nKUpQ9q60f93T4v7p3GCEgeVYKb7O3CSINY/NXniC4iKSnb1igMaM56g6Xqjg\nEuTd0s8vIkMiEq+/uSDTDeQmZyggloRNEnDT4VMMCiyk3p6vrF+/hqbCw5IJ\nAshT04gcElGKbUyrCInlknmjrUbCVM0oXT/bH+4R+fjIQLCD4frIkCoGH+hw\n1hh5xAgdg8SgajkHfEJBIj77yxvZVVlRUePPTbGMaldkzDucCS96+6dFMdW1\nAip+vMVzydH4EQgxPsu8noM8WybjXTsxAlyqjwcMEzvnE+lSw6xE3b+fABed\nuFsWJkymRtkYvW7iJlUpoBr34Oo4ooGLgX2yliAhmLoX7fQS+vigWRnyQsR5\nXivPi1O7o5IuxdtJih8dbWWyq4FK+3ZR6nz4mEcV9FRRHhVqzHVsRVgRp/RV\ngpsgi8xMtGe3BtXwiW01KHq506f8/lViVlIg6YTM4sz4lvmtzABWKQ+yNM3L\nO9tKbRexUjcCUOeC1u9M4wxncRjVBAXpOq/ShSadT7U/pa4URl2szoIggA9m\na1Fq\r\n=DR+N\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFdKnxRrdfuKUEBvr0d683X1KWmKL8QmBakP0n8Ky1mVAiAXOVT7ke45G/MadkBkfUnkmv0mFyV+mmsL8fVSZWss7g=="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.3.0_1528252082001_0.8935612228694922"},"_hasShrinkwrap":false},"5.3.1":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.5.3","fast-stringify":"^1.0.3","micro-memoize":"^2.0.3"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.3","babel-loader":"^7.1.4","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-search-and-replace":"^0.3.0","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.7.0","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^4.19.1","eslint-config-rapid7":"^2.11.1","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.0.0","fast-memoize":"^2.4.0","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.73.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.11.0","jsdom-global":"^3.0.2","lodash":"^4.17.10","lru-memoize":"^1.0.2","mem":"^3.0.0","memoizee":"^0.4.12","memoizerific":"^1.11.3","nyc":"^12.0.2","optimize-js-plugin":"^0.0.4","ora":"^2.1.0","prop-types":"^15.6.1","q":"^1.5.1","ramda":"^0.25.0","react":"^16.4.0","react-dom":"^16.4.0","rimraf":"^2.6.2","rollup":"^0.59.4","rollup-plugin-babel":"^3.0.4","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^4.0.0","sinon":"^5.0.10","underscore":"^1.9.1","webpack":"^4.11.0","webpack-cli":"^3.0.2","webpack-dev-server":"^3.1.4"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.3.1","gitHead":"1d8583beee57ab6978aa977632572e96ce278058","_id":"moize@5.3.1","_npmVersion":"6.1.0","_nodeVersion":"8.11.2","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-h+ZBUbfaWrcYbwOUyhrzryyyImbqBmCi9xkTMBIZROmIukuqAQYdVscpXRoxUARpY56IOha1m1s3Sbbg/xlMGA==","shasum":"72a8d2bcd2fad5214f9d8bc19cac317ead222c1b","tarball":"https://registry.npmjs.org/moize/-/moize-5.3.1.tgz","fileCount":29,"unpackedSize":304560,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGPQnCRA9TVsSAnZWagAALb4QAIssgNrp9bzkfyqpE1Js\nQLnTMQIdjuYwy1k3LDoDlPanX4+ySHpVJ2PtpatxxvA0Nkg+vUyYK42UO3ac\nJGYn0GhoWv4buWDfPEJ4ibRb/7YyZFjai94Jp1vQ1/cKTlcTMmTpb+AkttPz\nhMBVRvfRmxBvmsojE7Rt+WxO08SzUckMRGRlBe6P+yKAgsCcjkXE8X+3zse2\nhVZtwu/0R7B0lefE3A7ZQx+nc/3+y0OLpP7/PP8PhR/Cxah62QnsqUVQEujK\nxT0E0/voDMXnlnl7Br9MnjNTPzt0t7YqBFKjOa+ZK8g2k4T8HzB5pK+C/MS6\n/4NC76ynJaGZZqW3izoQfIfb7vWgZ0gGLXCkcUCa8bEkRJcH6+Q5ETl2UGED\nTy7rwIlbNOUz//R/Z5Ge+tx4sxzQS9UtcMoxyoYHz44eMjpzQnSME97+N/H+\nn/ryXw+d1pflsWi8Dy3scm3o8iwvqbSb1PtCKK4Uz027Y5vfyvtDQ+ARBuzL\nt8WEgN1Vq+zYNWU4G6XO7u5WxMCB+nODc1vNGH5JhMHoBXfLl+nzfpe03dVZ\nAvXb9489j3bOUar+Lrti3fw+vp5DHGKP6iR3DEDKz3DdvZ0jUY9+pNpaiI9U\nh/u/uwNKWRgVxkMtKLYHHaJoCcaevzlUzDjfD9Ey8OeF5EWyrAmumzsu30jH\nRDpW\r\n=Jz67\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHnDETzxDGZd+HAJfp4iPgw/3J5h1TnEdL0U0oR3Zi7kAiEA/EuMk1hDqi8YNnqzWWfDJhFEzniUE5tUI6ajNPxsuyQ="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.3.1_1528362020776_0.43824296562160736"},"_hasShrinkwrap":false},"5.3.2":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.5.3","fast-stringify":"^1.0.4","micro-memoize":"^2.0.4"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.6","babel-loader":"^7.1.5","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-search-and-replace":"^0.3.0","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.7.0","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^5.3.0","eslint-config-rapid7":"^3.0.4","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.78.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.12.0","jsdom-global":"^3.0.2","lodash":"^4.17.10","lru-memoize":"^1.0.2","mem":"^3.0.1","memoizee":"^0.4.13","memoizerific":"^1.11.3","nyc":"^12.0.2","optimize-js-plugin":"^0.0.4","ora":"^3.0.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.25.0","react":"^16.4.2","react-dom":"^16.4.2","rimraf":"^2.6.2","rollup":"^0.63.5","rollup-plugin-babel":"^3.0.7","rollup-plugin-commonjs":"^9.1.4","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^4.0.0","sinon":"^6.1.4","underscore":"^1.9.1","webpack":"^4.16.5","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.5"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run dist","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib"},"types":"./index.d.ts","version":"5.3.2","gitHead":"67f605f414e7b13ef5db4030556036d76a8fab8e","_id":"moize@5.3.2","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-jY28OxLceDd3nW0BNlYTh6eJfPVlEtgw97z6Cak96FieW5zY6tRk8fR41vMffg1k6dflzKHpFrKqbVZllTG2ZA==","shasum":"9e4039e41c17c8c6bfc20e7dad3456562fabf908","tarball":"https://registry.npmjs.org/moize/-/moize-5.3.2.tgz","fileCount":29,"unpackedSize":306554,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbaO9eCRA9TVsSAnZWagAAiaoQAIwWXo7MNY0BBvTOQgmL\nsWyaxgIOjOV5LOd+zpbkYR/zUaeVv4YobA+qhGvv5zlB5rT5njY74xzPDw0o\nLq2ZUcNSQPfRYzS8Q05kzVu2Dm2d+alphWytTcFxTwk9+Dl4kaiPXUiSscHT\nfUfGhA4RChyRsCGoxzntIl9vmJCCkAGL1uszMa+XN8M2fGGDmY+XyXDgc1kx\n/E251r25nFM2BKWdnU1GoCrKI3EzKzv9+EwwETvqVEFKKZikUkq4bK1YMdbG\nx7Rh1mx3F+9Yn2dS4Nr4Kk6MtUkWWt46XQPBYpXeJQyT4JyTPBPSjrw2hB02\nw29t/xvcfxKV6nhftHs+it8Z/levgtoB2K6gU2PF+9qU2p0SWKjs8RU5IT+W\nJRZxifpedWixbxBf88UHhOZ3aC272F2bwDSuUitLYvq1QqxRccEuZcMHpRIn\nm08hW61xedmZZzSaYFQ99B+jW4LDHUtmn8x62VVQdwAztjfC++u4pK7OOeEF\nkt7L47ZBQQJ2vqNnSx3IYOHi6Ljl8PRQsG8pOVSs4LdoO5f4CV+t7dmgvup4\nq5GAsxqvmvJKTN55FSBcNNRqjGtf5D3IK0PodP53vQ2vfwZrRkRjBfXC0xMZ\nqLoexp3IqmxMNAO4IrxFSB7LmXcmt0iJSZqv1TNDXd36lyd49cLb2wQNK5iy\nRMGQ\r\n=et43\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDsimyK64vRZTR49OBa3aoCNCU+b+bHo5/a8pkj3ZCWWAiEA8bTCbEkEk/MdnWNb+XMod97ecf81nG0m+WekNgQsd1Y="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.3.2_1533603677486_0.638275073878992"},"_hasShrinkwrap":false},"5.4.0":{"author":{"name":"planttheidea"},"ava":{"babel":{"babelrc":true,"presets":["react"]},"failFast":true,"files":["test/*.js","!test-utils/*.js"],"require":["babel-register","babel-polyfill"],"source":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.0"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"ava":"^0.25.0","babel-cli":"^6.26.0","babel-eslint":"^8.2.6","babel-loader":"^7.1.5","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-search-and-replace":"^0.3.0","babel-plugin-syntax-flow":"^6.18.0","babel-plugin-transform-flow-strip-types":"^6.22.0","babel-polyfill":"^6.26.0","babel-preset-env":"^1.7.0","babel-preset-react":"^6.24.1","babel-preset-stage-2":"^6.24.1","babel-register":"^6.26.0","benchmark":"^2.1.4","bluebird":"^3.5.1","cli-table2":"^0.2.0","eslint":"^5.3.0","eslint-config-rapid7":"^3.0.4","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.78.0","fs-extra":"^7.0.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.4.0","jsdom":"^11.12.0","jsdom-global":"^3.0.2","lodash":"^4.17.10","lru-memoize":"^1.0.2","mem":"^3.0.1","memoizee":"^0.4.13","memoizerific":"^1.11.3","nyc":"^12.0.2","optimize-js-plugin":"^0.0.4","ora":"^3.0.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.25.0","react":"^16.4.2","react-dom":"^16.4.2","rimraf":"^2.6.2","rollup":"^0.64.1","rollup-plugin-babel":"^3.0.7","rollup-plugin-commonjs":"^9.1.5","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-uglify":"^4.0.0","sinon":"^6.1.5","underscore":"^1.9.1","webpack":"^4.16.5","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.5"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"types":"./index.d.ts","version":"5.4.0","gitHead":"1d292c1d0e4d2263c4448b5d1f86210e06a579fd","_id":"moize@5.4.0","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-4XXbdc8wOG3vJ11WrQ2AKYcJec/CiyCblmpUR9Ftz5VBwPfDhBUEmFtsXbHHRI+8vnY8ey5PtGPoDziqgfPLoQ==","shasum":"98497bb860e5b8c2ee39b764d07b125dc503bb38","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.0.tgz","fileCount":41,"unpackedSize":343769,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbcMeyCRA9TVsSAnZWagAAHUEP/20e5qAeyYJa9/rmaeUm\n0JoDFYzFbL5+Zq26a41uoX+M0YfMp5Eu8PAV1gijFmWX+OJDvJFpk32IARFv\nHIcm7dMqAXikauUd+SWQk3H/iWRSLK8mfCG2nuFMw4T01t/YA1LpfhIfollW\neMkQn22bRt5sHB+E8g8yFk0mRtAFUciXrqmcKnqBe20by4Lv547RFLS3PA5Z\nNc33LBI6TiVgZP2XFvCiBXk/x7CchpErTPKvQX8WwiM3tPzST1+3gfZrwXco\nrrelRrGH79+w7DrayM2FBnSpCBg5MTO/47VTl0LYF+rK+wuD0vQ29k5rjSs8\nDr7oVZ/zM+K51mjo47NMNz74HlPO1oSzpHcgoKm6NiYa5lQ2B72iwemMb8tt\n2dPlPvK6XzH69M9mAFbFucj46LYQ7rMdlfMpjYK6RuOhcfwhET0Uq+7EwSNe\ngByhboL5y3iXPfqlQ+TBJClk9ji3WMnYJjJqvj0rNPsgttHXSjC3AAvESzfB\neToOVBE+y5s6y/b9hluUR/28I96ourquBWeTBdH4/7ZPZmJN6AHuCY8jjlq8\nfZdjHNw4TpPqmisZN/lf43FVSoXlHQ65oSj1BLNmrUOogLtQ4vEmQzrkxfar\ns6vzl9EPyrQbXW5G1nUqdzQFqU+cvgVYyWnoDBXfL6ECeUHNfTKHk7YMKqs0\nCviT\r\n=mKa9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG9pX7wazE90yPODew/rRI+OW5BfSydTwoq+DaHcRFT9AiEAn0R2NATIMhT0S1apM4vJsBHRTk20dLgPD6JvRhWA0yw="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.0_1534117809837_0.5769263776128308"},"_hasShrinkwrap":false},"5.4.1":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@babel/plugin-syntax-flow":"^7.0.0","@babel/plugin-transform-flow-strip-types":"^7.0.0","@babel/polyfill":"^7.0.0","@babel/preset-env":"^7.0.0","@babel/preset-flow":"^7.0.0","@babel/preset-react":"^7.0.0","@babel/register":"^7.0.0","ava":"^1.0.0-beta.8","babel-eslint":"^9.0.0","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.5.2","cli-table2":"^0.2.0","eslint":"^5.6.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.81.0","fs-extra":"^7.0.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^12.0.0","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^4.0.0","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^13.0.1","optimize-js-plugin":"^0.0.4","ora":"^3.0.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.25.0","react":"^16.5.2","react-dom":"^16.5.2","rimraf":"^2.6.2","rollup":"^0.66.0","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-uglify":"^6.0.0","sinon":"^6.3.4","underscore":"^1.9.1","webpack":"^4.19.1","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.8"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.1","gitHead":"9e6198e38999319e8574d76e9355aeaf68ea4435","_id":"moize@5.4.1","_npmVersion":"6.4.1","_nodeVersion":"8.11.4","_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"dist":{"integrity":"sha512-wRVMg+7tOBOkcoDI5MS+mReO4oI7pd6LshRR4l9AdRY49vCC3v6xzgo2bUjHDZzU0FyG35rmTFs+csGbfpwk6w==","shasum":"664a1a6856bd8dfe0ceda72f17e6765ff5910243","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.1.tgz","fileCount":42,"unpackedSize":348639,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbobU8CRA9TVsSAnZWagAA8IYP/11Lz2cHtpy/PukqQWMe\nAHM7LYsFcnAORtt35J+HRIrtV1CrETop/5f+pVKBObgks/S4oICoTCddpwWL\nykAIuTxGHKYH9JopSyqjHfP/5+pTw+J0AdRF/zQRngBj3nw05PVUd3rax69R\n7+aQFBkgE8ShtteJj8xv8W+Aie9HIUXiWoBjlys0Bl6Mxsa5i3YkSaNaGE5l\nfxGVsTo00PUr7CN09ylSEtnNCmN8pk/G1ZmqvM8iSKGOxu6Ivr7i0waZ7ieI\nlsiZ6MrdkbG/cxkGqykOhcshPUseGYjFs8VBREl5U/WOkAREt37sdJyIEmIj\nxu6LRal1LyfDnB3+jhYj7r3rSKUBWnQg7vVY9AStArVQibaaAoSAoI9+aUZl\n2JLZ7S26thWo+EmwFMxo85oyKHjAwqNQtFZnRJ36NKlmPAPZHk//4cfjv4om\njL3acOfizcVRx760+DunVAzNhYX0DXnug3vwHeMiMyKY33XceIPUpMKHDrXE\nJN7ooyuGb1DY9MN9kPdmQsBGsfverAOTdXuQoPSL7UfjMqUoEQyq0HanKygO\namUOTZIqgRZfbTeryfUUR4WVoR70qNBi0KjZMB56khw1QvtaRGhaISuxmo6K\nrN7xSH7EgFe9N0NzwsdNDdGwuOQjs7zaTngg2nIKx8rDMY93Av//yXItp9+1\nnKm8\r\n=TXpa\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCfNP6PD1eSc8hsxZfPVPeh9P/O31a1Jz1rHhj9MmQcvwIgO2J5L1j6CXEw6JnixTvW+wY1KJIuBGoCK0jF5EgfUQ4="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.1_1537324347626_0.4563546698954766"},"_hasShrinkwrap":false},"5.4.2":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@babel/plugin-syntax-flow":"^7.0.0","@babel/plugin-transform-flow-strip-types":"^7.0.0","@babel/polyfill":"^7.0.0","@babel/preset-env":"^7.0.0","@babel/preset-flow":"^7.0.0","@babel/preset-react":"^7.0.0","@babel/register":"^7.0.0","ava":"^1.0.0-beta.8","babel-eslint":"^9.0.0","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.5.2","cli-table2":"^0.2.0","eslint":"^5.6.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.81.0","fs-extra":"^7.0.0","html-webpack-plugin":"^3.2.0","husky":"^0.14.3","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^12.0.0","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^4.0.0","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^13.0.1","optimize-js-plugin":"^0.0.4","ora":"^3.0.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.25.0","react":"^16.5.2","react-dom":"^16.5.2","rimraf":"^2.6.2","rollup":"^0.66.0","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-uglify":"^6.0.0","sinon":"^6.3.4","underscore":"^1.9.1","webpack":"^4.19.1","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.8"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.2","gitHead":"a2f55b93500434f15da5d244fcdf150d669d6757","_id":"moize@5.4.2","_nodeVersion":"10.15.0","_npmVersion":"6.7.0","dist":{"integrity":"sha512-yyNOfgHY2/N+BKDLIHCH9H/Z1kxd9QjYigEX2GNTLRCosMUVk6iWRk2vipGLM8zJufHyk2PoUFgyRteY+WTHRQ==","shasum":"cf6b17aea2b9e1483c99baca448d8563d78079d6","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.2.tgz","fileCount":44,"unpackedSize":355974,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcaaUBCRA9TVsSAnZWagAApAcP/3SK6539RUr3gRo2HrX2\nMh+5U4zrlA/XTCBfT0CS/6QCfXCU8Z2swaEdV2488WUytZv9MRN84d8xn68Y\n+DrHFhM/H8EJTt8lO6rbIW6L1/yTMp66V9DEDqMFNxSKqP0q4K7BqU4wgDW6\ng0uRjTF5bjwKb7qUCSa6TEX0QfPWg2Emr1yk0AMfnPG0mv7KVn7Ti41OZipg\nlSsFz6eNfFD0SSVSE7rd3Ux8//WQS5Y6F7pJnfQA77t9HJTqItT3z6afDgQs\nKBuJUuaegAv3RbmMgN9W4F9TqyceM4n5qE5vyFlZvWfbrz/YQ2Hk1Zp+Fjys\nioms9sXKRyRabQeoy3/K9qVFbIufS1pK/KNyeNhQxWF/rffHYZVfU7/OFhPq\nAnbc4Fh3aDOzHM3MlIDHafc+vHn2oxIWIOuOTGpMHhfiG1KdUG900g0nsQjI\n6FSumAaDaVfX3soCDx39Fa4O/J1fjhveAp5RO63l5fsVBIKyLKw8eZFS9exl\nq5gWtXGHWovrNoa5XHVhonh9FCAMmZUgr8QOtPRlLg6Onmp16YEXE+2Leu7f\nKd7dchcMski25RbtJFURZFtc/B97+h8oz7g75Vjc6ZzEI5uny9jaAnanMLpw\ndEKMV811ElOe764jhj067Avld/JsbWd1eFSAB3aKVwoeaAWrnBNL/EPuLFA7\nk1Lo\r\n=YS7T\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBZUe+sv+JKE4Qf2EyOsDN7NOPqwX6t4tLG2PdU3RAl8AiEAyJ/5VQPeI7gaYuC7RVjUhqjo1BHsGni1gvyu4PJ3goU="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.2_1550427392557_0.41631284272390023"},"_hasShrinkwrap":false},"5.4.3":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.0.0","@babel/core":"^7.0.0","@babel/plugin-syntax-flow":"^7.0.0","@babel/plugin-transform-flow-strip-types":"^7.0.0","@babel/polyfill":"^7.0.0","@babel/preset-env":"^7.0.0","@babel/preset-flow":"^7.0.0","@babel/preset-react":"^7.0.0","@babel/register":"^7.0.0","ava":"^1.0.0-beta.8","babel-eslint":"^10.0.1","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.5.2","cli-table2":"^0.2.0","eslint":"^5.6.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.95.1","fs-extra":"^7.0.0","html-webpack-plugin":"^3.2.0","husky":"^1.3.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^14.0.0","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^4.0.0","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^13.0.1","optimize-js-plugin":"^0.0.4","ora":"^3.0.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.26.1","react":"^16.5.2","react-dom":"^16.5.2","rimraf":"^2.6.2","rollup":"^1.7.3","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^4.0.1","rollup-plugin-uglify":"^6.0.0","sinon":"^7.3.0","underscore":"^1.9.1","webpack":"^4.19.1","webpack-cli":"^3.1.0","webpack-dev-server":"^3.1.8"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.3","gitHead":"e4db5a27a607aecb218f88cee925e42c14156642","_id":"moize@5.4.3","_nodeVersion":"10.15.3","_npmVersion":"6.9.0","dist":{"integrity":"sha512-wnzAMKP4ZfG0++OSfeSnIvBzGvvVqhi3K+hYRwX7O0GIKHdeuwjQU8XDaP9SxeERtcL14WmdXRyYCRTa3Gyz3Q==","shasum":"c06b4c4ff4b881a3bd64f0fd3cfafcdedfbc3f40","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.3.tgz","fileCount":44,"unpackedSize":356332,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcmtpuCRA9TVsSAnZWagAALkIP/28uowYdt+XoMl/k0ro8\nP9XvsFR1ScCaMLDAL/UYqcsY1VYKaBd1mt1fdAFv9TAyLcy3+JNoG+hVzExr\nRPeS85WvLeQr2vOS8I0bzdcqiiO1b4aZ40rn7CGqikCsznnwmzzyHPP2yXXl\nMNil6BsVLQ8cUHx1tGHnvNGWBHa8l8mDiDYEfTSetITcsSVX5VQrOqgY21N5\nCzJkPtYZ2A5wDj1od5b62CSsLC7fsuJzr30BD1JUy8JymfpIMCIOno3kbq7a\nX93PlE9DN5IUesJ0A7qCbGEfzDLbHd7G6pvzv9NwkckDUjZzRNcVR0Z4l/bM\naSS7LDMLMd/minRQ+tlPBT5oQfgmiD4s6uwjNN9f67kqfX+leNTEDMxUBoA3\nIPNah+vqlZYdRv5vHwpuSZB/P6R8DBrGa2TmOleG8xlo8SnFMrDohK7pLK4E\nRONgCTcIIjLut6B4piHFWGesHt7J4bK+sJaootDw/a9qVY57JSMCuqlKfQYL\n/J1GcpUyAgQKXB616j8Z08p/ilTO6E5B2WdCCGWb5/VfmixmqziiAOmm2iEq\nnBmOQToUXINhfH6aa9DMSPVkOxBfpkGSlxkF4cSocltziYNPu/WnsQtxCnhB\n5asr6w9JF4/Zu0i3133uy/Uyj7MLIPbfPPUI9+ovIfqtA+K+f6nDRssikElD\nJEPE\r\n=48ge\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGMzcgrJMboNS4etwtKVV/I4GBdu8VdifR/uUfNAFc4GAiAYwtXhoA+EWDXsylpJKPwMvMM3VwUhRykqPpEMUqC1Rw=="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.3_1553652333883_0.28775324380666967"},"_hasShrinkwrap":false},"5.4.4":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.4.3","@babel/core":"^7.4.3","@babel/plugin-syntax-flow":"^7.0.0","@babel/plugin-transform-flow-strip-types":"^7.0.0","@babel/polyfill":"^7.4.3","@babel/preset-env":"^7.4.3","@babel/preset-flow":"^7.0.0","@babel/preset-react":"^7.0.0","@babel/register":"^7.0.0","ava":"^1.4.1","babel-eslint":"^10.0.1","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.5.4","cli-table2":"^0.2.0","eslint":"^5.16.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^2.1.0","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.97.0","fs-extra":"^7.0.0","html-webpack-plugin":"^3.2.0","husky":"^1.3.1","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^14.0.0","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^4.3.0","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^13.0.1","optimize-js-plugin":"^0.0.4","ora":"^3.4.0","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.26.1","react":"^16.8.6","react-dom":"^16.8.6","rimraf":"^2.6.2","rollup":"^1.10.0","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^9.3.4","rollup-plugin-node-resolve":"^4.2.3","rollup-plugin-uglify":"^6.0.0","sinon":"^7.3.1","underscore":"^1.9.1","webpack":"^4.30.0","webpack-cli":"^3.1.0","webpack-dev-server":"^3.3.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","postpublish":"npm run docs && git add . && git commit -m \"Update docs\" && git push","prepublish":"if in-publish; then npm run prepublish:compile; fi","prepublish:compile":"npm run lint && npm run flow && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.4","gitHead":"d6d2561caaeab0a30fc4293293e73d11ea6f02cc","_id":"moize@5.4.4","_nodeVersion":"10.15.3","_npmVersion":"6.9.0","dist":{"integrity":"sha512-1gMxNMxZum3EAU4fbt86tR4MYe/lRAa9tt+oXDsjGUtyb0EpUtgoQRITwbY/MJv7rBo2yeRMZFENtj2P8xc1qg==","shasum":"6ae400cfd7ee29174428281b1a2ccfa89527f51c","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.4.tgz","fileCount":44,"unpackedSize":356440,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcshm2CRA9TVsSAnZWagAAFEQP/RA2Ivzyrp0jti854ty+\nzqfCwL2sLN/p2zwu+LoRQM7zgxjZ8kEUCBSiVDRJIl3bOQzZie8OU3kmi6JB\nBv96nG9dSLc6UW0yPfcAVNb7iPWUY8rq116i6bNzHqMbu3K3ccgUFuRk7pwJ\n45xDLlJmf0s3A6Vqy0BlaIweXaMrdQF8P8REgPURE2DlsihJFrocQ3pU6TGO\nDPBkJSTkPpfAQ9/x8sQfPiKFFqrbHmksillYrYA3QFmyphvxf3NNFLuUlsvM\nGBvY/e13ub9IwO1rVW2HMI7pW+BN3Q2oFULdmUlpKwEeNME4LM0i4VeJvgKO\nvDlrcqs1vTcP53cHR0Ajq/5NyHhDh5OLU7cId627BQS8TDj2k9EqMFRzniGn\nyf5nfIKizewQ8odw3P3ybKuM20bUBecJSoH7bRXTONMi5EsOglkF6AvQdQE8\n1KvBrEfBNeCsVk6G/f8VreyzSm4Tomx+QjV/yEonwZJglX9i15/jaI9+vsHD\nA3FG8Oz7kZx0lqMNszsrwfXgP5AnWkMzdhIj5k+DRaQD4gG4vC7XgZdD6bmI\nuRO7RJmqcQKHdlvL4LKQv/Ccmhs1soEzPcMbwa65XAQjgH11+3S6elqbnPWj\nrHkmgxbXmXRnhilo3zRDfh6AMRAyU/qVVFtXkTM/i/6set/byt0JtWQ9KC3W\nlYhI\r\n=Z7xt\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvE4m7zB4qH+Kqm/mnR+x9sBrykzUcMhVD1s1gnHxr+gIhAJcUCz33MaF35U1yCB3I/+J9k3Lsv/A9C0JmBy3sHx1C"}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.4_1555175861591_0.4304864018283032"},"_hasShrinkwrap":false},"5.4.5":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.7.7","@babel/core":"^7.7.7","@babel/plugin-syntax-flow":"^7.7.4","@babel/plugin-transform-flow-strip-types":"^7.7.4","@babel/polyfill":"^7.7.0","@babel/preset-env":"^7.7.7","@babel/preset-flow":"^7.7.4","@babel/preset-react":"^7.7.4","@babel/preset-typescript":"^7.7.7","@babel/register":"^7.7.7","ava":"^2.4.0","babel-eslint":"^10.0.3","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.7.2","cli-table2":"^0.2.0","eslint":"^6.8.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^3.0.3","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.114.0","fs-extra":"^8.1.0","html-webpack-plugin":"^3.2.0","husky":"^3.1.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^15.2.1","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^6.0.1","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^15.0.0","optimize-js-plugin":"^0.0.4","ora":"^4.0.3","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.26.1","react":"^16.12.0","react-dom":"^16.12.0","rimraf":"^3.0.0","rollup":"^1.27.14","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-uglify":"^6.0.4","sinon":"^8.0.2","underscore":"^1.9.1","webpack":"^4.41.5","webpack-cli":"^3.3.10","webpack-dev-server":"^3.10.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","copy:types":"cp src/index.d.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.5","gitHead":"a4882afb1b866e8b6accd25e2b76fa12b671bc4e","_id":"moize@5.4.5","_nodeVersion":"12.14.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-egVrEnY3/gI5KytczjGiXamFxZwy5xJcRFxON4TOsPQzux6JrpxE/KPkOVol1M2CyW+NXUFhTNI7T/R7TgzVpQ==","shasum":"cc9f4dc0033c41160c5bfb199951546f12f22956","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.5.tgz","fileCount":44,"unpackedSize":361027,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDF1/CRA9TVsSAnZWagAArikP/iphR1DxMGAoXB/QVEbQ\nGm+yV2v/aTcm3N0w1DQbbmB9Mex4xIIK26VYvj9qneHJiadExXeCsWtD7UF4\n2m4uaC750SuliZRMOoskrsMnqNXXJMoH0uXMvEKbovQxwPhZ8VLJKdRr+r2K\nti5UlDrd2GJo1MTQS2hEFRF6DqiKHdQvSABchUoedbE+Q0s/YB8YeNl47McJ\nYUpSZq5E2eA5Sg2W5ufF58ymBizW/kFy+h+5Aud0MHluEfPOOzoWxxV0dzur\nZ6oBZb0/BbyAEiNmxRRlMdZGjwE7/UH/0IEMa0E5Ghra9pt6W+SK+W/s8QNF\nirgdf3nNio116NDZwlMS+P+9SSfo0GQnp8mnsDfgYlXi7COTNNmhtM85M5ML\nPSnAgfaXcXWwB2tYfFFH0u0vFT/xX2TXEKJ7V9GQylBguZbZLZ3HbbxmpxWH\nWZbBGBgBeKlL+8aEjRtAXp30KHswwhoWsj0PqnFON0nTi9B4X7Cn+cbXqudW\nfZTIdU3EALRpm9u+DR2g7YNAT530RUqOzqilZh7H8GqLXbcGw8knAYr4meAn\n+VLwSTLRnHhggHb7N4F/q5qAWCQpNBc11GAA1iPSGrtEOrin2yF93yfxg6Gp\nRm9pX79MPgj6GnSAxr4ezYnYolxzUmJSXv4xsxy2KLLtdMCEFKbRTKyRRIQE\nI19R\r\n=4Cks\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHcOAkeHteKqw2ScWH43zwGwJxfVGjvvwmnyF4DyIeTQAiEAkqm5onVDAgbLtcQ9Kf9VttOoPzJYZvynlAM1/ntErgg="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.5_1577868671189_0.4335606898435207"},"_hasShrinkwrap":false},"5.4.6":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.7.7","@babel/core":"^7.7.7","@babel/plugin-syntax-flow":"^7.7.4","@babel/plugin-transform-flow-strip-types":"^7.7.4","@babel/polyfill":"^7.7.0","@babel/preset-env":"^7.7.7","@babel/preset-flow":"^7.7.4","@babel/preset-react":"^7.7.4","@babel/preset-typescript":"^7.7.7","@babel/register":"^7.7.7","ava":"^2.4.0","babel-eslint":"^10.0.3","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.7.2","cli-table2":"^0.2.0","eslint":"^6.8.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^3.0.3","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.114.0","fs-extra":"^8.1.0","html-webpack-plugin":"^3.2.0","husky":"^3.1.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^15.2.1","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^6.0.1","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^15.0.0","optimize-js-plugin":"^0.0.4","ora":"^4.0.3","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.26.1","react":"^16.12.0","react-dom":"^16.12.0","rimraf":"^3.0.0","rollup":"^1.27.14","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-uglify":"^6.0.4","sinon":"^8.0.2","underscore":"^1.9.1","webpack":"^4.41.5","webpack-cli":"^3.3.10","webpack-dev-server":"^3.10.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","copy:types":"cp src/index.d.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.6","gitHead":"731422cd4729923c946f37aa9c853738b5c326d3","_id":"moize@5.4.6","_nodeVersion":"12.16.3","_npmVersion":"6.14.4","dist":{"integrity":"sha512-gvMOccupuKKD9Yzgda474o/RIl0EIUnCPuNLn9GPo71HJZPhWdzu/RYZQjYRheDMcuJfXifB9ttzAYCrkGKM0A==","shasum":"9a7e402462151be3a077c03464b20dc67497e0d0","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.6.tgz","fileCount":44,"unpackedSize":365075,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJesughCRA9TVsSAnZWagAAKmIP/jL3+7e2Q3oU4VIdOAVW\nhU/nUFZBFHQrOfAJE5acjowY/6BOXetpNMDJypx4KWnua8ioEy3E+OBXDdFF\nWwZetHF+jnmk6Q0xLiIA1iKmJrn/YnymN92DJmG6G0U9+PWVdiv2XlY/Z364\ng6jGuIu1gQldLC0xmiaMLwhxjMaxks3/EJROmsA6BA1FIf+B47MhIDjO4DW5\n5hqMZpAczTz8M5RozjwioI7T63lYeH/5ThTF+3UfoTYLefBUrt/xAB+OXips\nj+rRGIBLvPSJiqNtaW3APtJ0/VFs74ARSC2Yj3KDD2bTUYRHZY5QGWoZdSjo\n60I0PK4DsAj73tDr/o7oCaX5UND0kuuqoRXkXnVLNeIXS0c1Azv9rlgP2aZK\nuaHXs1dNhhEGVT/ZEgYm/RCJlFRoYOhEPElIGzRHPrnSwqzcFDKsiBgIaQVX\nRhlGkkqNCFRGwuiH/3MX/i0KTPyvHezcBlZATyJH1jFMoxCN3kalQFqomEYz\nR1tq1EMs/KzfYxbKlrPHyEjiFyc9vS/h4dlwDaNDeqe/UFeRVUQmWTbyunNW\nstKptwqiJiFz5UoJfLYYIoJL3QmfYUkKH/V7vKuHh0urOT+ZsU+b48uBneec\nIn58+nHIhBgoWUHu07VFEqWC0OSJtdeRBDplucPObAFACCzKE4rVt/t+ZQef\nAJtc\r\n=eOF6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICT3deddHB5EeaM+HUswWv5GrVgYj+hBd7vitA/xKvaGAiEA29W8m7a3jrVObfC31lEXIQTETGXkY1F2QpyxPq9LDnY="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.6_1588783136726_0.3759571305053191"},"_hasShrinkwrap":false},"5.4.7":{"author":{"name":"planttheidea"},"ava":{"failFast":true,"files":["test/*.js","!plugins/*.js"],"require":["@babel/register","@babel/polyfill"],"sources":["src/*.js"],"verbose":true},"browser":"dist/moize.min.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^1.6.0","fast-stringify":"^1.1.0","micro-memoize":"^2.1.1"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.7.7","@babel/core":"^7.7.7","@babel/plugin-syntax-flow":"^7.7.4","@babel/plugin-transform-flow-strip-types":"^7.7.4","@babel/polyfill":"^7.7.0","@babel/preset-env":"^7.7.7","@babel/preset-flow":"^7.7.4","@babel/preset-react":"^7.7.4","@babel/preset-typescript":"^7.7.7","@babel/register":"^7.7.7","ava":"^2.4.0","babel-eslint":"^10.0.3","babel-loader":"^8.0.0","benchmark":"^2.1.4","bluebird":"^3.7.2","cli-table2":"^0.2.0","eslint":"^6.8.0","eslint-config-rapid7":"^3.1.0","eslint-friendly-formatter":"^4.0.1","eslint-loader":"^3.0.3","fast-memoize":"^2.5.1","flow-babel-webpack-plugin":"^1.1.1","flow-bin":"^0.114.0","fs-extra":"^8.1.0","html-webpack-plugin":"^3.2.0","husky":"^3.1.0","in-publish":"^2.0.0","ink-docstrap":"^1.3.2","jsdoc":"^3.5.5","jsdoc-babel":"^0.5.0","jsdom":"^15.2.1","jsdom-global":"^3.0.2","lodash":"^4.17.11","lru-memoize":"^1.0.2","mem":"^6.0.1","memoizee":"^0.4.14","memoizerific":"^1.11.3","nyc":"^15.0.0","optimize-js-plugin":"^0.0.4","ora":"^4.0.3","prop-types":"^15.6.2","q":"^1.5.1","ramda":"^0.26.1","react":"^16.12.0","react-dom":"^16.12.0","rimraf":"^3.0.0","rollup":"^1.27.14","rollup-plugin-babel":"^4.0.1","rollup-plugin-commonjs":"^10.1.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-uglify":"^6.0.4","sinon":"^8.0.2","underscore":"^1.9.1","webpack":"^4.41.5","webpack-cli":"^3.3.10","webpack-dev-server":"^3.10.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"lib/index.js","module":"es/index.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run transpile:lib -- --no-comments && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && ALTERNATIVE=true node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean":"npm run clean:lib && npm run clean:es && npm run clean:dist && npm run clean:mjs && npm run clean:docs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:es":"rimraf es","clean:lib":"rimraf lib","clean:mjs":"rimraf mjs","copy:types":"cp src/index.d.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && jsdoc -c ./jsdoc.config.json && cp img/*.png docs/img && git add --all","flow":"flow check src","lint":"NODE_ENV=test eslint src","lint:fix":"NODE_ENV=test eslint src --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run flow && npm run copy:types && npm run test:coverage && npm run transpile:lib && npm run transpile:es && npm run transpile:mjs && npm run rename:mjs && npm run dist","rename:mjs":"node ./js-to-mjs.js","start":"npm run dev","test":"NODE_PATH=. NODE_ENV=production BABEL_ENV=test ava","test:coverage":"nyc npm test","test:watch":"NODE_PATH=. NODE_ENV=test ava --watch","transpile:es":"npm run clean:es && BABEL_ENV=es babel src --out-dir es","transpile:lib":"npm run clean:lib && BABEL_ENV=lib babel src --out-dir lib","transpile:mjs":"npm run clean:mjs && BABEL_ENV=mjs babel src --out-dir mjs"},"sideEffects":false,"types":"./index.d.ts","version":"5.4.7","gitHead":"a14d1e6cfd67e161f8e34e5efe77c565230dea55","_id":"moize@5.4.7","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-7PZH8QFJ51cIVtDv7wfUREBd3gL59JB0v/ARA3RI9zkSRa9LyGjS1Bdldii2J1/NQXRQ/3OOVOSdnZrCcVaZlw==","shasum":"bffa28806441d9f5cf1c4158b67a29413c438e83","tarball":"https://registry.npmjs.org/moize/-/moize-5.4.7.tgz","fileCount":44,"unpackedSize":365462,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe70gBCRA9TVsSAnZWagAAxxcP+gKFm2OkU01eDMPzgUi5\n7SrBUd667Cn5oh55Bf6duSoe+rlMkixlk97xqYHW3/pYfm8OTbkUlNzEPhiq\nC5vkFmyJsxz7nUM1GvZbZvzi2VNAj3YdnDNE8FjdlibKJFA5xwfF6JuptyIy\nvij1x7gl4ima1RYZ28Q+98gPcKJ1Zfw9+lQVSjhFbg26hEDVmbEcODqzPaSp\n/k8WL5RB9be0TXwrxmWTAoCKgUXSruMQgkYSFl+L5Xj9dAxFcop7sXafLKBG\nDT9uBxxf0PMBErWvXHvbq1GNgFtEOLNBudTytS2eC5AvCNx5ulSrKJyDtgQX\nEia0DtEREa5Y1gFdXByIat6kr50z/xxZmQ0Qnuib1OYg1ArvCqtDwgIbgV9L\nl1OkzKIu1JMgApvEgszPnS1EYclgE9u0GeVa37Hxk+KqNvemINuJzLTKYPDC\nQ+boRdiciDGDpZCk3KMzgJqBMHY6MSMLoFeHY3wdJyixNFmhbQV1DkHiFxnZ\nobm1BBZXip3vRPHKM24LAchjAKFAHN63/V5rF8Muu/dGihKArt7qaPvdi6jt\nby8XaKpLWfcOdenBYuSON120C8piqGQucqgZbBuyexHyYSViIVkcYj5/xpZy\nQcmCulcyFlicaswuVM0Zn3DbXw0381aprjF4yadH2SwPxgLjkVPYo8IfleHr\nd6tZ\r\n=Gl4O\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCZWpn3QbsSRm3QBVs3tekmt9Lb72YnL9NVcjQZ2r8bswIhAM2+3PtlPzuk4slHHtPxMEqKqjp5xMrAX3IN/+56kEUX"}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_5.4.7_1592739840513_0.9368582812496644"},"_hasShrinkwrap":false},"6.0.0-beta.0":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.10.3","@babel/core":"7.10.3","@babel/plugin-proposal-class-properties":"7.10.1","@babel/preset-env":"7.10.3","@babel/preset-react":"7.10.1","@babel/preset-typescript":"7.10.1","@rollup/plugin-babel":"5.0.3","@rollup/plugin-commonjs":"13.0.0","@rollup/plugin-node-resolve":"8.0.1","@types/bluebird":"3.5.32","@types/jest":"26.0.0","@types/lodash":"4.14.155","@types/memoizee":"0.4.4","@types/react":"16.9.38","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"3.3.0","@typescript-eslint/parser":"3.3.0","babel-eslint":"10.1.0","babel-jest":"26.0.1","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.3.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.20.0","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.3.0","husky":"4.2.5","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.0.1","jsdoc":"3.6.4","jsdoc-babel":"0.5.0","jsdom":"16.2.2","jsdom-global":"3.0.2","lodash":"4.17.15","lru-memoize":"1.1.0","mem":"6.1.0","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"4.0.4","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.0","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.5","rimraf":"3.0.2","rollup":"2.17.1","rollup-plugin-terser":"6.1.0","tslib":"2.0.0","typedoc":"0.17.7","typescript":"3.9.5","underscore":"1.10.2","webpack":"4.43.0","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.0","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n-   [Importing](#importing)\n    -   [ESM in browsers](#esm-in-browsers)\n    -   [ESM in NodeJS](#esm-in-nodejs)\n    -   [CommonJS](#commonjs)\n-   [Usage](#usage)\n-   [Configuration options](#configuration-options)\n    -   [isDeepEqual](#isdeepequal)\n    -   [isPromise](#ispromise)\n    -   [isReact](#isreact)\n    -   [isSerialized](#isserialized)\n    -   [isShallowEqual](#isshallowequal)\n    -   [matchesArg](#matchesarg)\n    -   [matchesKey](#matcheskey)\n    -   [maxAge](#maxage)\n    -   [maxArgs](#maxargs)\n    -   [maxSize](#maxsize)\n    -   [onCacheAdd](#oncacheadd)\n    -   [onCacheChange](#oncachechange)\n    -   [onCacheHit](#oncachehit)\n    -   [onExpire](#onexpire)\n    -   [profileName](#profilename)\n    -   [serializer](#serializer)\n    -   [transformArgs](#transformargs)\n    -   [updateExpire](#updateexpire)\n-   [Usage with shortcut methods](#usage-with-shortcut-methods)\n    -   [moize.deep](#moizedeep)\n    -   [moize.infinite](#moizeinfinite)\n    -   [moize.matchesArg](#moizematchesarg)\n    -   [moize.matchesKey](#moizematcheskey)\n    -   [moize.maxAge](#moizemaxage)\n    -   [moize.maxArgs](#moizemaxargs)\n    -   [moize.maxSize](#moizemaxsize)\n    -   [moize.promise](#moizepromise)\n    -   [moize.react](#moizereact)\n    -   [moize.serialize](#moizeserialize)\n    -   [moize.serializeWith](#moizeserializewith)\n-   [useMoize hook](#usemoize-hook)\n-   [Composition](#composition)\n-   [Collecting statistics](#collecting-statistics)\n    -   [Stats methods](#stats-methods)\n        -   [clearStats](#clearstats)\n        -   [collectStats](#collectstats)\n        -   [getStats([profileName])](#getstatsprofilename)\n-   [Introspection](#introspection)\n    -   [isCollectingStats](#iscollectingstats)\n    -   [isMoized](#ismoized)\n-   [Direct cache manipulation](#direct-cache-manipulation)\n    -   [cache](#cache)\n    -   [cacheSnapshot](#cachesnapshot)\n    -   [add(key, value)](#addkey-value)\n    -   [clear()](#clear)\n    -   [get(key)](#getkey)\n    -   [getStats()](#getstats)\n    -   [has(key)](#haskey)\n    -   [keys()](#keys)\n    -   [remove(key)](#removekey)\n    -   [update(key, value)](#updatekey-value)\n    -   [values()](#values)\n-   [Benchmarks](#benchmarks)\n-   [Filesize](#filesize)\n-   [Browser support](#browser-support)\n-   [Development](#development)\n\n```\n$ npm i moize --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to Infinity_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformArgs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use `moize.serialize`:\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 4.5KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"9b6a44df8d93b3f9997e627abc93aec89faafcb9","_id":"moize@6.0.0-beta.0","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-9A46Vpm18pCFOpYpOF7lb6v/XzKPfudXKRgSDOdO8Z26xZbv4HhYWxYUSm3f9d73KHPPcNs/DnAsIL/HSD4ncQ==","shasum":"410177a1206aff404d17e9ce07a4f784262c4213","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.0.tgz","fileCount":56,"unpackedSize":703540,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe71i1CRA9TVsSAnZWagAA5dkP/04E28CLULEbzLNw84PR\nusb+zeD0vHhUHH7SJZumkNmb+lmq2Fqj7OXl4XQL8OqsLts0iXxKheESl7co\n5Nvs4DZ0TF1iUcAZdPi4c2sqoXzcVwY+3qQnBjUUx9yXUUPOxVQDdfwkjnyX\nyL5fFzHdcaj/xob+hyudoCMZm5TieE0Oda7TFP+J6QNZ8cQl5vSye6OBjMKJ\nbi7gqxnQ8wQYCDPvNyxuomPTetGKF1eI9wHhuxd5s7J9WdQ3AOv3BshmK9cy\niS4nx7ZAxBcLTr7H3jhE9iP0BlDJ+XpSAHapKcuMFM/fv3/I3avj2W9vRC5z\ncnSu4au00Snc+8itcFN9oeA6yXmkQkDQxVcHpO2LxcSRFawaIC1Aw/+fR5Rj\nKLamrEJxEdx8+JVJ78pTA/6ERiVvVeLR54xQv12n0di/zMas1EduwSgHGN1x\nfXRCpZemcn/AS/Z5CAu4UE0V/0w6OfSuXvAJtoQec2MN7NtEnj37j4UF6H9l\ngj4LYqADW1jNVqzbVKFUWeMuBpI8+b6Tg1vy59/rNm8rjaM3+tGe2R6fOLPV\nU02jztaKbfG9D4V0RwNHXm5dotl87L72cS5Xlx5kDkSGQB9QPyfDOiqp6MnT\ni5V92+iJD+bOEtW2Akf6UCl36To4RF0PdqojprHpQhr25ql5JJvSFlhwArXJ\nE14W\r\n=tvPO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAIXrfPV3QwlqsjxLbpBxw5wjBQGziEC86RT2fU4cJZ5AiEAiECnDmIddoYjTK2gCzRoip8lS7hoXqOe/dFhn15XHQE="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.0_1592744117225_0.2215604424233646"},"_hasShrinkwrap":false},"6.0.0-beta.1":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.10.3","@babel/core":"7.10.3","@babel/plugin-proposal-class-properties":"7.10.1","@babel/preset-env":"7.10.3","@babel/preset-react":"7.10.1","@babel/preset-typescript":"7.10.1","@rollup/plugin-babel":"5.0.3","@rollup/plugin-commonjs":"13.0.0","@rollup/plugin-node-resolve":"8.0.1","@types/bluebird":"3.5.32","@types/jest":"26.0.0","@types/lodash":"4.14.155","@types/memoizee":"0.4.4","@types/react":"16.9.38","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"3.3.0","@typescript-eslint/parser":"3.3.0","babel-eslint":"10.1.0","babel-jest":"26.0.1","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.3.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.20.0","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.3.0","husky":"4.2.5","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.0.1","jsdoc":"3.6.4","jsdoc-babel":"0.5.0","jsdom":"16.2.2","jsdom-global":"3.0.2","lodash":"4.17.15","lru-memoize":"1.1.0","mem":"6.1.0","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"4.0.4","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.0","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.5","rimraf":"3.0.2","rollup":"2.17.1","rollup-plugin-terser":"6.1.0","tslib":"2.0.0","typedoc":"0.17.7","typescript":"3.9.5","underscore":"1.10.2","webpack":"4.43.0","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.1","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n**NOTE**: This documentation is for the next major version of `moize`, please go to the [`v5` branch](https://github.com/planttheidea/moize/tree/v5) to see documentation on the current major version. To learn about changes that may impact your code when migrating to v6, please see the [changelog](CHANGELOG.md#600).\n\n-   [Importing](#importing)\n    -   [ESM in browsers](#esm-in-browsers)\n    -   [ESM in NodeJS](#esm-in-nodejs)\n    -   [CommonJS](#commonjs)\n-   [Usage](#usage)\n-   [Configuration options](#configuration-options)\n    -   [isDeepEqual](#isdeepequal)\n    -   [isPromise](#ispromise)\n    -   [isReact](#isreact)\n    -   [isSerialized](#isserialized)\n    -   [isShallowEqual](#isshallowequal)\n    -   [matchesArg](#matchesarg)\n    -   [matchesKey](#matcheskey)\n    -   [maxAge](#maxage)\n    -   [maxArgs](#maxargs)\n    -   [maxSize](#maxsize)\n    -   [onCacheAdd](#oncacheadd)\n    -   [onCacheChange](#oncachechange)\n    -   [onCacheHit](#oncachehit)\n    -   [onExpire](#onexpire)\n    -   [profileName](#profilename)\n    -   [serializer](#serializer)\n    -   [transformArgs](#transformargs)\n    -   [updateExpire](#updateexpire)\n-   [Usage with shortcut methods](#usage-with-shortcut-methods)\n    -   [moize.deep](#moizedeep)\n    -   [moize.infinite](#moizeinfinite)\n    -   [moize.matchesArg](#moizematchesarg)\n    -   [moize.matchesKey](#moizematcheskey)\n    -   [moize.maxAge](#moizemaxage)\n    -   [moize.maxArgs](#moizemaxargs)\n    -   [moize.maxSize](#moizemaxsize)\n    -   [moize.promise](#moizepromise)\n    -   [moize.react](#moizereact)\n    -   [moize.serialize](#moizeserialize)\n    -   [moize.serializeWith](#moizeserializewith)\n    -   [moize.shallow](#moizeshallow)\n-   [useMoize hook](#usemoize-hook)\n-   [Composition](#composition)\n-   [Collecting statistics](#collecting-statistics)\n    -   [Stats methods](#stats-methods)\n        -   [clearStats](#clearstats)\n        -   [collectStats](#collectstats)\n        -   [getStats([profileName])](#getstatsprofilename)\n-   [Introspection](#introspection)\n    -   [isCollectingStats](#iscollectingstats)\n    -   [isMoized](#ismoized)\n-   [Direct cache manipulation](#direct-cache-manipulation)\n    -   [cache](#cache)\n    -   [cacheSnapshot](#cachesnapshot)\n    -   [add(key, value)](#addkey-value)\n    -   [clear()](#clear)\n    -   [get(key)](#getkey)\n    -   [getStats()](#getstats)\n    -   [has(key)](#haskey)\n    -   [keys()](#keys)\n    -   [remove(key)](#removekey)\n    -   [update(key, value)](#updatekey-value)\n    -   [values()](#values)\n-   [Benchmarks](#benchmarks)\n-   [Filesize](#filesize)\n-   [Browser support](#browser-support)\n-   [Development](#development)\n\n```\n$ npm i moize@next --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to Infinity_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformArgs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 4.5KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"a6fadbf3c00c29732fb8e6e50e394f68f9f79f82","_id":"moize@6.0.0-beta.1","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-FBbG7QGQcAZ9plPOvEZ+8U/Ar3eF9aFc0rIBCEFpW9Qj05L3GYkNBQWSfcA6Sf4xSQBnXoZwd29sfRwL61EhHA==","shasum":"8cb297c10b27845b8a036d8b9215a2a6df7848a5","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.1.tgz","fileCount":56,"unpackedSize":716331,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe79rmCRA9TVsSAnZWagAAsxAP/RaYVGXs0d9rqQYCqxsd\n43Uq4ug1qafYTyqV+cyPDj84RZjDypK4k9M8R8uQV+XVUy0DtZFoWc2iv1CN\nb/rIehRddpM7/Ep7udjDDYgNlNwC1r2vZAklFSqlVCVNE7NOWCvTJfa3TNmm\nqCTJ8n2sQrj/9CoFF6592vASOCEH17OQ5+F6cKAEMeGjbXrOKa1qxnEcIlAs\nOWpYpDVmHGQxDc247g4KNY8iqeQBI/vmQSMDD64khvKJlMVka4UJSGqKUG1A\npoUhB/Jg67mrS9aiD/8r1Saucy3k28CF/mEr+oQysxYOMaI3QHTMIqNZ05Jp\nZXWyBf6oOelB0MGgx6dx8Kx1sk5sJh5bvc+2REA7PoNQJKIZt2os7SvMuS1E\ny/++vir0D8dpMpaic9bteuQEfWOcXZujSdHqTsxwD40jpCaOyHJNlti7wqbG\n2/c8Zf3CKRH+eEHtMPNHG9NUfncFnNZLaOUCvKlznnRLEBwz/nvrC3fvzuk9\n5zkj3C2RrCw3xT3My4X1uLTzVERJmer9zPYjOfBr2yVe96Xn26OT8vsx9JYt\nXkSKdov5sS+y5ZYc8xVY9y5As1eYDKq5J+mMYjPA/ukn9ELf/c1Me68ya993\nSXDkFAY4nty4v8DCGseWOCz5M1mUTPwn9vqJ6+61sabeqeRq/nvj9c8NVkfm\nM3NX\r\n=bqN7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAgSFKOsNDWITQRGGVqWQAUGNuk9AocE9JSstHniXxPIAiEAuJXZdDSkgXwkDRBfkOAtAqUJrbUzxVRlzJ2uIwtl6I8="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.1_1592777445603_0.2686575983916213"},"_hasShrinkwrap":false},"6.0.0-beta.2":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.10.3","@babel/core":"7.10.3","@babel/plugin-proposal-class-properties":"7.10.1","@babel/preset-env":"7.10.3","@babel/preset-react":"7.10.1","@babel/preset-typescript":"7.10.1","@rollup/plugin-babel":"5.0.3","@rollup/plugin-commonjs":"13.0.0","@rollup/plugin-node-resolve":"8.0.1","@types/bluebird":"3.5.32","@types/jest":"26.0.0","@types/lodash":"4.14.155","@types/memoizee":"0.4.4","@types/react":"16.9.38","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"3.3.0","@typescript-eslint/parser":"3.3.0","babel-eslint":"10.1.0","babel-jest":"26.0.1","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.3.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.20.0","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.3.0","husky":"4.2.5","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.0.1","jsdoc":"3.6.4","jsdoc-babel":"0.5.0","jsdom":"16.2.2","jsdom-global":"3.0.2","lodash":"4.17.15","lru-memoize":"1.1.0","mem":"6.1.0","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"4.0.4","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.0","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.5","rimraf":"3.0.2","rollup":"2.17.1","rollup-plugin-terser":"6.1.0","tslib":"2.0.0","typedoc":"0.17.7","typescript":"3.9.5","underscore":"1.10.2","webpack":"4.43.0","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.2","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n**NOTE**: This documentation is for the next major version of `moize`, please go to the [`v5` branch](https://github.com/planttheidea/moize/tree/v5) to see documentation on the current major version. To learn about changes that may impact your code when migrating to v6, please see the [changelog](CHANGELOG.md#600).\n\n-   [Importing](#importing)\n    -   [ESM in browsers](#esm-in-browsers)\n    -   [ESM in NodeJS](#esm-in-nodejs)\n    -   [CommonJS](#commonjs)\n-   [Usage](#usage)\n-   [Configuration options](#configuration-options)\n    -   [isDeepEqual](#isdeepequal)\n    -   [isPromise](#ispromise)\n    -   [isReact](#isreact)\n    -   [isSerialized](#isserialized)\n    -   [isShallowEqual](#isshallowequal)\n    -   [matchesArg](#matchesarg)\n    -   [matchesKey](#matcheskey)\n    -   [maxAge](#maxage)\n    -   [maxArgs](#maxargs)\n    -   [maxSize](#maxsize)\n    -   [onCacheAdd](#oncacheadd)\n    -   [onCacheChange](#oncachechange)\n    -   [onCacheHit](#oncachehit)\n    -   [onExpire](#onexpire)\n    -   [profileName](#profilename)\n    -   [serializer](#serializer)\n    -   [transformArgs](#transformargs)\n    -   [updateExpire](#updateexpire)\n-   [Usage with shortcut methods](#usage-with-shortcut-methods)\n    -   [moize.deep](#moizedeep)\n    -   [moize.infinite](#moizeinfinite)\n    -   [moize.matchesArg](#moizematchesarg)\n    -   [moize.matchesKey](#moizematcheskey)\n    -   [moize.maxAge](#moizemaxage)\n    -   [moize.maxArgs](#moizemaxargs)\n    -   [moize.maxSize](#moizemaxsize)\n    -   [moize.promise](#moizepromise)\n    -   [moize.react](#moizereact)\n    -   [moize.serialize](#moizeserialize)\n    -   [moize.serializeWith](#moizeserializewith)\n    -   [moize.shallow](#moizeshallow)\n-   [useMoize hook](#usemoize-hook)\n-   [Composition](#composition)\n-   [Collecting statistics](#collecting-statistics)\n    -   [Stats methods](#stats-methods)\n        -   [clearStats](#clearstats)\n        -   [collectStats](#collectstats)\n        -   [getStats([profileName])](#getstatsprofilename)\n-   [Introspection](#introspection)\n    -   [isCollectingStats](#iscollectingstats)\n    -   [isMoized](#ismoized)\n-   [Direct cache manipulation](#direct-cache-manipulation)\n    -   [cache](#cache)\n    -   [cacheSnapshot](#cachesnapshot)\n    -   [add(key, value)](#addkey-value)\n    -   [clear()](#clear)\n    -   [get(key)](#getkey)\n    -   [getStats()](#getstats)\n    -   [has(key)](#haskey)\n    -   [keys()](#keys)\n    -   [remove(key)](#removekey)\n    -   [update(key, value)](#updatekey-value)\n    -   [values()](#values)\n-   [Benchmarks](#benchmarks)\n-   [Filesize](#filesize)\n-   [Browser support](#browser-support)\n-   [Development](#development)\n\n```\n$ npm i moize@next --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to Infinity_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformArgs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 4.5KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"7ab2f6e6cf114043496aa3791b7f58f4cc5195b3","_id":"moize@6.0.0-beta.2","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-r7gXj1AoEukilWaMJbSI+m9ABtiAf4WDJkhZR8k4Y+pUVEbPd/E1q2oqVOXZUjnrEznXun72zzWORg7ZBMlxnQ==","shasum":"f5a3628eeaaa8eaf3ee50bdfb6c3729629d67aba","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.2.tgz","fileCount":57,"unpackedSize":738540,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe+JSkCRA9TVsSAnZWagAAZZAP/RX4+Sz0kqZzYT4Qfmtj\nZcXYVvosr56iomHgegwwVTk7zp1MTdvABbHL6KJm35NLTi+qfqaABClL3xch\nbyLjU68CpD/wE7y7Apw2wm1xYyF4/WZlCoxWY41j2oFWKQSuAktkliiCt5+/\n31+ArZ8jfhhQWadWC392A9r176Z8OcG2H6zzQADV84ZAUS/1SEPByJK7DHIj\nbPHJ7D5bKxApWSkY+HbZSGskpkvuUr6xXT2GnTzhrETXOxt19qsBzjhz7Ofw\nn+4ZRRtQqPNplmG8hNuw+h7bJK7TUgDsz+IZMNTtEFT9ZUdIZhtlxMjfXSIU\n+fzQeKL2SfiUSrZLk8C6kF0Ppj5mMLr7LXCgC1w6dzPvRajk8wek2dyBg77w\nr98/o/L0KsvIDgLUpthPljIHJxkzoROQQBKUx6B4nS6RCOKPVX1QMX4AYPRH\nfHIjfRsUXAPU8j0wlUNjkS/91VE20Cg3hL7jBcbojPID+x3I0+LagXbM7hRQ\nPwlHfSiw7egKXY/OVhmRIyLV8DKtTnxZxN2eqpmFQ9v8RUBmzKYHe/vIT6PM\nTP6rslFrtqE4qKBiL30fhr22+7jBXaPdP+xCT6M2R0sb7zO4ZbyXvYGSKDVb\nCaWqVguIAxT2FX77joQIA0AV790uVexRa/ipNvAiMKPJPK0OJg98AwhwONgm\naWDO\r\n=3H+P\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBqLbWcRiKQcENKU3vNw4I4FoAeJiQMZwSgjOU1D7U8+AiEA5YKHlMuz9IlQhscaWgGamr2elNKKGKmYJdZ1w/yBw38="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.2_1593349283619_0.3500604197513195"},"_hasShrinkwrap":false},"6.0.0-beta.3":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.10.3","@babel/core":"7.10.3","@babel/plugin-proposal-class-properties":"7.10.1","@babel/preset-env":"7.10.3","@babel/preset-react":"7.10.1","@babel/preset-typescript":"7.10.1","@rollup/plugin-babel":"5.0.4","@rollup/plugin-commonjs":"13.0.0","@rollup/plugin-node-resolve":"8.1.0","@types/bluebird":"3.5.32","@types/jest":"26.0.3","@types/lodash":"4.14.157","@types/memoizee":"0.4.4","@types/react":"16.9.41","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"3.4.0","@typescript-eslint/parser":"3.4.0","babel-eslint":"10.1.0","babel-jest":"26.1.0","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.3.1","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.20.1","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.3.0","husky":"4.2.5","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.1.0","jsdoc":"3.6.4","jsdoc-babel":"0.5.0","jsdom":"16.2.2","jsdom-global":"3.0.2","lodash":"4.17.15","lru-memoize":"1.1.0","mem":"6.1.0","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"4.0.4","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.0","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.5","rimraf":"3.0.2","rollup":"2.18.1","rollup-plugin-terser":"6.1.0","tslib":"2.0.0","typedoc":"0.17.8","typescript":"3.9.5","underscore":"1.10.2","webpack":"4.43.0","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.3","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n**NOTE**: This documentation is for the next major version of `moize`, please go to the [`v5` branch](https://github.com/planttheidea/moize/tree/v5) to see documentation on the current major version. To learn about changes that may impact your code when migrating to v6, please see the [changelog](CHANGELOG.md#600).\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize@next --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to Infinity_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 3.7KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"9decabc0dd8c76211135960d6eda30ff5c1942be","_id":"moize@6.0.0-beta.3","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-PnIK+WgmmlkGQbo8uOp1KqbwtWdzRDi67gg08n7vujxQvGvM7bSB9JSsVT0HuXo+kh7qHmHb1IgETgsyd2K7+Q==","shasum":"24c73598eb9f7ba09f0b6e7a0ceb7c309ba33383","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.3.tgz","fileCount":58,"unpackedSize":783823,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe+epFCRA9TVsSAnZWagAAnusP/igs849lkY98JybRQ0Bn\nikE4Si9U36TkW7tuZMYgf58uOxEePoKo1g74YfpdJ3pAnv9Tj83n4iUkQ+U5\nhFZLewI0kzKSioTKmKPrENOkyExn6bLCVqD0LLQwm3Zh1JPEmA9D9ZQuCYRB\njW4bWXuEHksayYYwe2xKQ7b/sdobEzAyjzSMRSuidYl5wThyeWPlpDrlcEI8\n7oJOttYFr+iR8SA/Xz3k5NbSzuAkTnpYRq6VCweCUS3KoLHLy1MP/x5p0s5m\noL7y+6NyjMS1ml+8P876CTOHWVeQCOxgu5oDRVlq7MKKgcdeXqwOBkymZOqz\nHYvQU3snV6GpbdCLxdz/hmc/RUYgSp0Sc+lcCRVUp9mrIkRBuM38IuH3qjJ/\n1oGsffkYy1cvmljWb8H9PdfJvrCxlPW73JDFPw0lDjfvt6ZhYpeVahSrSE9+\nmjbqUGCtfG84AASuIakJMWAMSMaj3NzvfgIrT5n0xJtxMwkwCTjFQdsCniP6\nO16qwj60kZmiPdSBy8dZlZ1b/4yoxdFFDOkd5qJt78eMVcmXS0ivV4Tc8x/Z\nqIfEuSYvgOCwvz8PTUyDyVI9livBTU/qyUTe5wQ4u8lOMX4K85DN4RQgLn9o\nYtTpDga9DkKfKk3dIWZ5O6bctKgMPAzPsW38YYvizaTVSsbrjIxS3C81N6nn\nJU65\r\n=LQBs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDOBtTyk+biHdVHkW0miJlCyyyhA+DVTqX5p3jwx50miwIgY8qnUec0nnTBECOBt8cBIJTNjtqsNZAuQYmUesW308Q="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.3_1593436741302_0.5863327086052983"},"_hasShrinkwrap":false},"6.0.0-beta.4":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.10.3","@babel/core":"7.10.3","@babel/plugin-proposal-class-properties":"7.10.1","@babel/preset-env":"7.10.3","@babel/preset-react":"7.10.1","@babel/preset-typescript":"7.10.1","@rollup/plugin-babel":"5.0.4","@rollup/plugin-commonjs":"13.0.0","@rollup/plugin-node-resolve":"8.1.0","@types/bluebird":"3.5.32","@types/jest":"26.0.3","@types/lodash":"4.14.157","@types/memoizee":"0.4.4","@types/react":"16.9.41","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"3.4.0","@typescript-eslint/parser":"3.4.0","babel-eslint":"10.1.0","babel-jest":"26.1.0","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.3.1","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.20.1","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.3.0","husky":"4.2.5","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.1.0","jsdoc":"3.6.4","jsdoc-babel":"0.5.0","jsdom":"16.2.2","jsdom-global":"3.0.2","lodash":"4.17.15","lru-memoize":"1.1.0","mem":"6.1.0","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"4.0.4","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.0","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.5","rimraf":"3.0.2","rollup":"2.18.1","rollup-plugin-terser":"6.1.0","tslib":"2.0.0","typedoc":"0.17.8","typescript":"3.9.5","underscore":"1.10.2","webpack":"4.43.0","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.4","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n**NOTE**: This documentation is for the next major version of `moize`, please go to the [`v5` branch](https://github.com/planttheidea/moize/tree/v5) to see documentation on the current major version. To learn about changes that may impact your code when migrating to v6, please see the [changelog](CHANGELOG.md#600).\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize@next --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to Infinity_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 3.7KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"a4abaa5d1bda77ee48f4b2b4d84d9be71190fb61","_id":"moize@6.0.0-beta.4","_nodeVersion":"12.18.1","_npmVersion":"6.14.5","dist":{"integrity":"sha512-XNbK6xfLoT/yD0LuVFLKttN8LADtydgK3d4Olr8YRHmBd+yKmbR3CRPenYqP/ljegj0CNocM7CslzU0Tj+X4qA==","shasum":"5818f38f56a673504b0bd9e816183f1686c25921","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.4.tgz","fileCount":58,"unpackedSize":784290,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe+fKnCRA9TVsSAnZWagAAHOsP/1E0mv/LCf/utHkxc/Xs\nXc3NpbT2XoWqVra1M2j1dalSUryPgScRQXCcWcJBc1VM7jcQ0g3sBLtC5aAl\nv5i3fies3DN9U/C7VEn94iyMdaUq8nm0wYQzQc06wDTrNa0AxALXmv55cfXF\n1RWHoXWjogQ3TGQPZBkGqkJxWnVNiSP14IIGZCc7PI03f0HaVrYpi/55+qmz\n6Tlrm9qK7HEaaBWhC6arazPcASpvSspa/Rcy7yDGKTZdtEN6jperKu6RobkM\nd3VDIrkRlBZQ2/6hVuyDc5tn9yPZJVnbohxy70yBI2UD66BtcxGQQP12T2fN\nWN7Zp+9KV+ZsiHySSJXhjHKavjv3L2bt+0xmdnwnKRuYUcBMIYe3jWlK136s\nOkJA3PXXBgsTwZ85QV5IuFzTOdWjji0qlX8+vt83Wqh4CTHJKMk8y13iYFQ1\nd7AjGkgCcCjTgEx4ETYK+s2iAaPD+fbXOlJ53FdWeJqJh1DWVWk2OC9TZWvy\ns/dPxk+FYOJLSbnVPByqNDkxO+J1QFtJU3bbWvsa4i3t+XxBbVAM7O2gV1Q5\nZq7ki5r3BUYQlrJYJNLPoIAHTfF8AFsU33t2ZucPNzMg4io+X3OVY+IXw0tP\njLvGD465Ia8L37uucFYe1P2TJs/9LcdY4HQuNuB2I3wE5D0cfSJxLbb+oH1g\nMD3A\r\n=reHy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICWYacTgaUHliGRz4YZQq9JWbskN9arGm0RE6CY4mYf1AiEAohct1gb97YeDuKifuUJw+Y6o+RoyAjsfL3Qnwh++VWo="}]},"maintainers":[{"email":"tony.quetano@planttheidea.com","name":"planttheidea"},{"email":"tony_quetano@rapid7.com","name":"tquetano-r7"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.4_1593438886607_0.9162656099536548"},"_hasShrinkwrap":false},"6.0.0-beta.5":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.11.6","@babel/core":"7.11.6","@babel/plugin-proposal-class-properties":"7.10.4","@babel/preset-env":"7.11.5","@babel/preset-react":"7.10.4","@babel/preset-typescript":"7.10.4","@rollup/plugin-babel":"5.2.1","@rollup/plugin-commonjs":"15.1.0","@rollup/plugin-node-resolve":"9.0.0","@types/bluebird":"3.5.32","@types/jest":"26.0.14","@types/lodash":"4.14.161","@types/memoizee":"0.4.4","@types/react":"16.9.50","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"4.3.0","@typescript-eslint/parser":"4.3.0","babel-eslint":"10.1.0","babel-jest":"26.3.0","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.10.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.21.3","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.5.0","husky":"4.3.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.4.2","jsdoc":"3.6.6","jsdoc-babel":"0.5.0","jsdom":"16.4.0","jsdom-global":"3.0.2","lodash":"4.17.20","lru-memoize":"1.1.0","mem":"7.0.0-1","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"5.1.0","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.7","rimraf":"3.0.2","rollup":"2.28.2","rollup-plugin-terser":"7.0.2","tslib":"2.0.1","typedoc":"0.19.2","typescript":"4.0.3","underscore":"1.11.0","webpack":"4.44.2","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0-beta.5","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n**NOTE**: This documentation is for the next major version of `moize`, please go to the [`v5` branch](https://github.com/planttheidea/moize/tree/v5) to see documentation on the current major version. To learn about changes that may impact your code when migrating to v6, please see the [changelog](CHANGELOG.md#600).\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize@next --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize').default;\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\nAll default values can be found [here](src/constants.ts).\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isShallowEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to 1_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name and file/line location_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to take effect.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array    | single object   | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | --------------- | --------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **91,802,487**    | **122,870,101**  | **60,734,874**     | **139,060,583**  | **115,051,924** | **114,497,797** | **63,517,382**     | **57,770,352** | **60,916,888**  |\n| mem          | 79,716,851        | 79,834,031       | 79,599,672         | 128,222,483      | 56,245,856      | 55,033,755      | 129,202,586        | 54,522,582     | 55,073,849      |\n| lru-memoize  | 56,821,369        | 70,091,175       | 43,551,563         | 77,843,255       | 65,753,790      | 66,676,480      | 41,949,360         | 42,772,024     | 45,933,307      |\n| fast-memoize | 33,055,406        | 64,774,644       | 1,336,169          | 190,041,355      | 2,316,045       | 1,966,532       | 1,775,305          | 1,246,369      | 986,835         |\n| lodash       | 28,468,492        | 55,472,191       | 1,464,793          | 66,618,867       | 50,846,997      | 48,950,709      | 1,942,482          | 1,408,940      | 1,042,957       |\n| memoizee     | 23,694,567        | 29,635,411       | 17,753,722         | 28,972,019       | 30,544,377      | 29,389,838      | 17,213,582         | 17,816,727     | 18,230,859      |\n| ramda        | 19,084,317        | 36,523,277       | 1,645,357          | 103,180,140      | 1,898,359       | 4,491,334       | 2,171,391          | 1,619,360      | 1,145,320       |\n| underscore   | 8,068,290         | 14,476,359       | 1,660,221          | 26,864,965       | 4,356,018       | 12,208,096      | 2,192,586          | 1,633,516      | 1,154,562       |\n| memoizerific | 7,267,897         | 8,101,327        | 6,434,466          | 8,311,252        | 8,084,237       | 7,908,494       | 6,276,233          | 6,661,302      | 6,365,865       |\n| addy-osmani  | 5,060,196         | 6,565,536        | 3,554,857          | 12,898,869       | 3,922,517       | 2,875,224       | 6,972,596          | 2,069,750      | 1,622,225       |\n\n# Filesize\n\n`moize` is fairly small (about 3.7KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint``, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"18a28615b69a99d0c5f398de48f2a60874606748","_id":"moize@6.0.0-beta.5","_nodeVersion":"14.12.0","_npmVersion":"6.14.7","dist":{"integrity":"sha512-ySXhQP8VTcZDIo0wyDGJokm47vdVbz6LXddaG2ZH6fGNYuwQl8ROA6OJnLKwBip33+i3FiHZmt8hL56fTLvigA==","shasum":"5d379e50fdb6ec247a85fc960da0e4f9373da5b4","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0-beta.5.tgz","fileCount":39,"unpackedSize":712781,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfedKiCRA9TVsSAnZWagAAiYoP/1YdwOcLq1n+5E9aLmVt\n0lnxjHqza1Re++fdB8mnZdDtijCks5BSo+OluLxHoxG5Q8vJHi7S7i7Y5GeZ\nbrK2a7uY7adKXdx8bHHbC0VLMhMvW+XOXnkc23cuI0CbrCxu3OqWHMxFf2I0\ncUOgAQmG2M4g2s0EQJv7dOlbkDOZF9n2HMVfTejELkJRUcaTZPqmZcgm7+ud\n7EwfSBghULNN48dDjshB8MsBQwaenweTWYOfq14hNy8mKo13fvtHABFxPk2v\niHZW5nzFfdb8Y3UxZdxX2iWdijQBRve20F94d1HTEg9UpsS4IUczorIyZR/0\nYPK/FPA7YbIc+Xu2PVLoiaZlmUw0/UZ909t2/24YRGWu3UzTEzBzXqsAzXtM\nPyEVxusiHR+dmK3J9Q5IBDjPND7GEcMS6trknOisCpRg769hriLK4M8vhroH\nSkBcW6QyuQOmpUjxAFFjdd9KOgmw3xChoQLIkjRBCsRUT3dT6sHnLVmTrAix\n1HLimLeD/Ml8R0O67gZ6eVCUpoa+JylvwujhrNWpu/jmsuzVKmKXAARjLe0j\nalrKc5w0inNG2G7f/qW/D4aGc7z6yaQ0q2C7IVVt71E8F7BmiBtWCpis8zGP\nCcxdWPxY+1eJFIHh6iGc/HfJoNxaOxlWf0t/XCoDFgZxVjCornMfXyosSkBe\nRH3C\r\n=PMEs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCWVwD1oApm/vdY49UVXt28QQsf719qPHxm9N3yiDkw8wIhAK0cz25vv5Jaf00d/bVX80NEAF3mfn4rMmSj1d7/H0h0"}]},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0-beta.5_1601819297845_0.23784775094299704"},"_hasShrinkwrap":false},"6.0.0":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.11.6","@babel/core":"7.11.6","@babel/plugin-proposal-class-properties":"7.10.4","@babel/preset-env":"7.11.5","@babel/preset-react":"7.10.4","@babel/preset-typescript":"7.10.4","@rollup/plugin-babel":"5.2.1","@rollup/plugin-commonjs":"15.1.0","@rollup/plugin-node-resolve":"9.0.0","@types/bluebird":"3.5.32","@types/jest":"26.0.14","@types/lodash":"4.14.161","@types/memoizee":"0.4.4","@types/react":"16.9.50","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"4.3.0","@typescript-eslint/parser":"4.3.0","babel-eslint":"10.1.0","babel-jest":"26.3.0","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.10.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.21.3","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.5.0","husky":"4.3.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.4.2","jsdoc":"3.6.6","jsdoc-babel":"0.5.0","jsdom":"16.4.0","jsdom-global":"3.0.2","lodash":"4.17.20","lru-memoize":"1.1.0","mem":"7.0.0-1","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"5.1.0","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.7","rimraf":"3.0.2","rollup":"2.28.2","rollup-plugin-terser":"7.0.2","tslib":"2.0.1","typedoc":"0.19.2","typescript":"4.0.3","underscore":"1.11.0","webpack":"4.44.2","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.0","gitHead":"151a7f15daa2cf87de56e9537ceea0237cf57734","_id":"moize@6.0.0","_nodeVersion":"12.19.1","_npmVersion":"6.14.8","dist":{"integrity":"sha512-/GXPWgxfgQAeM2S7IPh29MDbhK9ZF1YjzP6QRcJ1QcYrqehe6eFpAQZ88Xk/s4dy/wYhMY5axT1vaaWC+lllZA==","shasum":"b34a9a86a8794a9ef0aef4b1ac574faec48afd81","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.0.tgz","fileCount":39,"unpackedSize":712774,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgDzNfCRA9TVsSAnZWagAAc/QP/RK3ApH8050hGCjtOKf5\nhL3pMjqG+Yo/8rWVoh+fILtqLhTOQGS0MSeLxmMQyiJDgss8Hd0ns/SQuttQ\nDAF6r2ZTvKCL7+Cs+El2tnqxnGoWWWBF4FTmAZ67D/h9OM5ReRHGzzE7a3A/\nPeSP6MXZ7EdeQGbhSlAvEpXtmM4lXU5l0h56WP6c2n/D3iOgg7YdrPjZzNTT\nTGwW29Rl8HB0aQNksGLEjMUT3VOP5awYV36fiNDtRK4U+r/m+6DasWH0KBGP\nn2siDsuHW9UaKWcD90cY9v95zej3YbqM4QIGsOrGamyLUescxj10z3/58yIq\nQiZZMngUKpI4QdELQkIrX20nd9xZRuoiAW39co6IKS38RrkwNdcO4G/VmSrn\nnz0yh4wOQ3+4oeF0zt2GvwJMMK1+GqFh7i4g9eGs8ZR9fc/VYY7LWDQWXmQR\nNBguKh5kko+Ty9hBEemcCqI3L4lH0XZR1o7ucqN8pvx34rBdm4tT2BEYeqdT\nu1pW57luxUr4jdNrAvyZO/LJEnIZDpsrVc1dARj3azt8e84EIF+bCKWbuTvn\norWta2Nc9cfkQpcmbQIafrEmk0TykalIG8xJnjsJaiXcTgBgtQQtqeoSHHOW\nL1qhakLUmIQKNHBjUAsBQKFQBD9aXJjTv4OKFBA6qtNH7TU7QcugqTxzUBRl\nXbmp\r\n=Qx4n\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDe2Cx/kRJzAm5ROzjjAKDIuzaG1K0WpafEuklKrvmbaAIhAMgpwxXchU4vMazhYjFj3nnnkhGQxkL6LxyZP1wKeoOc"}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.0_1611608927246_0.7075884711630696"},"_hasShrinkwrap":false},"6.0.1":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"2.0.0","micro-memoize":"4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.11.6","@babel/core":"7.11.6","@babel/plugin-proposal-class-properties":"7.10.4","@babel/preset-env":"7.11.5","@babel/preset-react":"7.10.4","@babel/preset-typescript":"7.10.4","@rollup/plugin-babel":"5.2.1","@rollup/plugin-commonjs":"15.1.0","@rollup/plugin-node-resolve":"9.0.0","@types/bluebird":"3.5.32","@types/jest":"26.0.14","@types/lodash":"4.14.161","@types/memoizee":"0.4.4","@types/react":"16.9.50","@types/react-dom":"16.9.8","@typescript-eslint/eslint-plugin":"4.3.0","@typescript-eslint/parser":"4.3.0","babel-eslint":"10.1.0","babel-jest":"26.3.0","babel-loader":"8.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.6.5","eslint":"7.10.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.21.3","fast-memoize":"2.5.2","fs-extra":"9.0.1","html-webpack-plugin":"4.5.0","husky":"4.3.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.4.2","jsdoc":"3.6.6","jsdoc-babel":"0.5.0","jsdom":"16.4.0","jsdom-global":"3.0.2","lodash":"4.17.20","lru-memoize":"1.1.0","mem":"7.0.0-1","memoizee":"0.4.14","memoizerific":"1.11.3","ora":"5.1.0","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"16.13.1","react-dom":"16.13.1","regenerator-runtime":"0.13.7","rimraf":"3.0.2","rollup":"2.28.2","rollup-plugin-terser":"7.0.2","tslib":"2.0.1","typedoc":"0.19.2","typescript":"4.0.3","underscore":"1.11.0","webpack":"4.44.2","webpack-cli":"3.3.12","webpack-dev-server":"3.11.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","nyc":{"exclude":["**/plugins/*.js","**/test/*.js"]},"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack-dev-server --colors --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.1","gitHead":"355e956920be28bd1943bb744af1927b522b780e","_id":"moize@6.0.1","_nodeVersion":"12.19.1","_npmVersion":"6.14.11","dist":{"integrity":"sha512-Bl91P98A6Xba35mn9XoAW9DuGoQb3HyoY888TxrvQbMr9+1v3dzBzi9n4Guh5Lne8ENdqbXjQ0a8mf7UUvZ9wg==","shasum":"5e1cd820fb156e90b83e411e0e22b3bbbccea474","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.1.tgz","fileCount":39,"unpackedSize":713598,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgVYaJCRA9TVsSAnZWagAA11wP/1qw/c0TN3+GJKx6cZav\nYyS6UCALS8xg0SOefHGXvu+MNPBzl5KgwjE1cJ21O3ipzmMSLB2HkaqdNrhN\n/sbUJxs8vrJpdRohGiY3u4wrbT83muatIT0IJjB8X1u6yS7kNT0JxE0BN3nr\n9snOZXEPaMHiRDc8QyflkI0/qmI7V+GwM5rlZ6Rv+LhclB+6nVAILZdCc8zL\noBs3MZF5b90z6Iu9tNgVXGUFirgs18dQS26OZKIgWtjvrFpeB7T/izrAPawL\ngOndfiOkPdxSoZs/j9PwRZ+8nSyv/snWZ9qZ9obC3bCa0e3dkDcPSMrYiGzQ\ndZpefqZdB4rch/7GTCpjDnTej5riSjmZQP1G+LDxo+xyappCkU7gjzFB1CLk\nKAkcjbdFxfPHhrwPCOVtAbM51fT0nCWhlysRQSwkrszmvmNkNUICaJcpo1Sr\nOwlSUrNTYK4M6DHNDZQ7N2zkS9nOd7pSLJc58XAGXO2/hoKEUOI3kLU9yEFI\noYf2S1NRYlWJdDkyzsNyvKD85casPmhGLKrmjwEsW1S+OSkKysU1FixAcBp2\n6XUMuOWHR7m4i2qmBArT9Jv7uKFzoQ+Ekb0npiTgZaKHAEWkyrhWJkj/1U+x\nodBZHYTNmFd3EPvFhcInHpX3mmZe3amYt50irzje0UVz2sTkmedIKWmCyglq\ncwgx\r\n=yLrD\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCPpne2kne1yqp5XETg7nRZRpPsp4yyiSZPYcTog4WOfQIgQuYwF4PiBcmA0okuEMHxWEwvc2zTxDCSfgPmkT68a5M="}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.1_1616217736496_0.4376190865800915"},"_hasShrinkwrap":false},"6.0.2":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^2.0.1","micro-memoize":"^4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.13.16","@babel/core":"7.13.16","@babel/plugin-proposal-class-properties":"7.13.0","@babel/preset-env":"7.13.15","@babel/preset-react":"7.13.13","@babel/preset-typescript":"7.13.0","@rollup/plugin-babel":"5.3.0","@rollup/plugin-commonjs":"18.0.0","@rollup/plugin-node-resolve":"11.2.1","@types/bluebird":"3.5.33","@types/jest":"26.0.22","@types/lodash":"4.14.168","@types/memoizee":"0.4.5","@types/react":"17.0.3","@types/react-dom":"17.0.3","@typescript-eslint/eslint-plugin":"4.22.0","@typescript-eslint/parser":"4.22.0","babel-eslint":"10.1.0","babel-jest":"26.6.3","babel-loader":"8.2.2","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.11.0","eslint":"7.25.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.23.2","fast-memoize":"2.5.2","fs-extra":"9.1.0","html-webpack-plugin":"5.3.1","husky":"6.0.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.6.3","jsdoc":"3.6.6","jsdoc-babel":"0.5.0","jsdom":"16.5.3","jsdom-global":"3.0.2","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"8.1.1","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"5.4.0","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"17.0.2","react-dom":"17.0.2","regenerator-runtime":"0.13.7","rimraf":"3.0.2","rollup":"2.45.2","rollup-plugin-terser":"7.0.2","tslib":"2.2.0","typedoc":"0.20.36","typescript":"4.2.4","underscore":"1.13.1","webpack":"5.35.1","webpack-cli":"4.6.0","webpack-dev-server":"3.11.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.2","gitHead":"a753a7efac4469a3520f5d4c64e9eb7488b3b09f","_id":"moize@6.0.2","_nodeVersion":"12.19.1","_npmVersion":"6.14.11","dist":{"integrity":"sha512-94jF5aP4ul90e24fFe+covFPp4u5bGzlcGUsn0u6fZgKcnQpJ9e1nX75vxqtlyOUr92ww3DPMF+ziE4OQOkkkA==","shasum":"af481addc674b48e4a1ea92b474b96be827b6192","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.2.tgz","fileCount":39,"unpackedSize":719209,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJghKQmCRA9TVsSAnZWagAA8HwQAIWPL3BmQxdoDDLOxftf\nlBKDoK1gj+cqLwRcNkAgtyQC87mbB69i/0HBW73xET2TYZmhVXIOXUZKXacR\nOUUS2c6rOYR3Ivo4ZsPMY+cYpsTGe0zhzsaf/DM10TeKle2jOZpVtw7fQoyy\nHnoSQXxkMoeVih090oK3CxagfbAzwqh2VWZO46JBH31JmegLEMGixHcZaL73\nIZouegkRZb4sbUl6EjhOFY3snhcBYT8gw2FoV4IfmzpmLzADwQgA7b42Yc1c\n/BxmcVxEcdGZgAHY+/M4FRLbVp9wumbTT3MSAgURDc2z99d4vJ7hCTQWNUmi\nmuD2f5uB1mU1UmChIT8mGsLqt+Q/RtlmR0AY65ZRKmzsE2ujc849BRgq7By7\ngm6ECoUTd1acNuwWpuWFry0jsd3UhX86p/4JF8MTnyyY6Un+pDfd5UXC8HnC\ngUEGNgHnkCOS3tcQkl0giu7bfbaykFHePyMDPpJf6/rTG1Fc20Vp8AS7vdNz\n4o53iSVadfhPa2KnxXw1SNovC06MR0Xq9IxMb3HDfkEIZD6RFxfldAnrer9T\nL1xhgcLlYiFUHgclr3Mn2yMo6Yb2+pmAmDl5n/4AGItK4IkFOpGCc/9t8VLv\nuLIbhvEvl5DTEEiBf8fUMStdheXCOW4fspWD7dAL/TF3qIq35m8LOlQIiWf3\nnfKf\r\n=f3Jr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDoLxCka6SyjKFY6bVoIL6MUlia6zqDxJVrUIvg+hQ5sAiBDrz4LgysfQe5AA/ryfcnZdTTkW4YFz3BN4LofXykYsg=="}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.2_1619305509796_0.33902221298501267"},"_hasShrinkwrap":false},"6.0.3":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^2.0.1","micro-memoize":"^4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.13.16","@babel/core":"7.13.16","@babel/plugin-proposal-class-properties":"7.13.0","@babel/preset-env":"7.13.15","@babel/preset-react":"7.13.13","@babel/preset-typescript":"7.13.0","@rollup/plugin-babel":"5.3.0","@rollup/plugin-commonjs":"18.0.0","@rollup/plugin-node-resolve":"11.2.1","@types/bluebird":"3.5.33","@types/jest":"26.0.22","@types/lodash":"4.14.168","@types/memoizee":"0.4.5","@types/react":"17.0.3","@types/react-dom":"17.0.3","@typescript-eslint/eslint-plugin":"4.22.0","@typescript-eslint/parser":"4.22.0","babel-eslint":"10.1.0","babel-jest":"26.6.3","babel-loader":"8.2.2","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.11.0","eslint":"7.25.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.23.2","fast-memoize":"2.5.2","fs-extra":"9.1.0","html-webpack-plugin":"5.3.1","husky":"6.0.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"26.6.3","jsdoc":"3.6.6","jsdoc-babel":"0.5.0","jsdom":"16.5.3","jsdom-global":"3.0.2","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"8.1.1","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"5.4.0","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"17.0.2","react-dom":"17.0.2","regenerator-runtime":"0.13.7","rimraf":"3.0.2","rollup":"2.45.2","rollup-plugin-terser":"7.0.2","tslib":"2.2.0","typedoc":"0.20.36","typescript":"4.2.4","underscore":"1.13.1","webpack":"5.35.1","webpack-cli":"4.6.0","webpack-dev-server":"3.11.2"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.0.3","gitHead":"ff8e5f7fd3a9677d75b5c8ce01384e6873ea47ff","_id":"moize@6.0.3","_nodeVersion":"12.19.1","_npmVersion":"6.14.11","dist":{"integrity":"sha512-7Jz9TSiqW9G2u8HwUWnaBQMFMPLblrWKEiWN4BA/GPOfQlsnfQqq0yRnTGHckGPlKApA9Eu1HPb/eTqvK9EtKg==","shasum":"20881786b68678bc75215ac15ac48a010592b221","tarball":"https://registry.npmjs.org/moize/-/moize-6.0.3.tgz","fileCount":39,"unpackedSize":723833,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgjAE8CRA9TVsSAnZWagAAFIYQAJWgoSSuGKmmWVP6IxGz\nYaCU/g2uu6g5It0dHkiXZqywwTMMtcyuCv2SamD0Yv2zRAbMQCKhDUTznPYk\nI7eySCUXkvjmaK6uJ/uJ/6VBbOGKUo2yd4+k7vtTf2levVMR0pJOXyagdGfB\nJDkT9xEm6L+YOwqFSkA6qYaFlvYaGQNGda9fSWKNYdTyQ4d8pUkOnqtp5Lja\nVXROuOka3ww+pF5eZX5GXw8SNgeQLoRXnISpPR9qy8ziN4hMQl/w7qfIu7OM\ng1REflszdiT8PGTDwuGOBYG2PCiszKwSWa2mUKp98/k2sany94o6GFDCgitL\np6AJNBomZm5SNHmsaOwT8Xc+FXzTR9BiuBHFshD7/I2NmvCqAzariTegQsZb\nwOP6skXbE4H2UUh/Pm9IGr6I4x69pm0T00VG/hyEAR6+DK7QSFmdhkT/oSzq\nKwv5Ge7RwehbnF5MZt112Nzja866TrvmzwpNL7loQw2lbNXlTepfEtbUSyqd\nQqDdwTcKdqjASuWYSU6HyNTQSrp8CD6EmqoV53INFr5ulxCAvt0+Betm56lH\nT6N3+Njo90+R93iqRjFLIEZprKZmE4tZ0s9Fnsk9/E205JntwzNWltQXk3vn\n9hWTVIOBCZ5DUVEwszDlx1OmGxvxPxqQQtyZoFBxxb4etfGcYm+ZCGFTeLGD\nL8Ep\r\n=adcm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHdaAmYncD7Uf/BKeWZAlgsGvgaJUsjf3gc+tTC7uF2cAiEAiXfNhQH+JfcdBk09iD2z6fwNTSsqBrAVk1J3ujpgRQ8="}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.0.3_1619788092130_0.46478069784304266"},"_hasShrinkwrap":false},"6.1.0":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^2.0.1","micro-memoize":"^4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.14.8","@babel/core":"7.15.0","@babel/plugin-proposal-class-properties":"7.14.5","@babel/preset-env":"7.15.0","@babel/preset-react":"7.14.5","@babel/preset-typescript":"7.15.0","@rollup/plugin-babel":"5.3.0","@rollup/plugin-commonjs":"20.0.0","@rollup/plugin-node-resolve":"13.0.4","@types/bluebird":"3.5.36","@types/jest":"27.0.1","@types/lodash":"4.14.172","@types/memoizee":"0.4.6","@types/react":"17.0.19","@types/react-dom":"17.0.9","@typescript-eslint/eslint-plugin":"4.29.3","@typescript-eslint/parser":"4.29.3","babel-eslint":"10.1.0","babel-jest":"27.1.0","babel-loader":"8.2.2","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.16.4","eslint":"7.32.0","eslint-friendly-formatter":"4.0.1","eslint-loader":"4.0.2","eslint-plugin-react":"7.25.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.3.2","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"27.1.0","jsdoc":"3.6.7","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"8.1.1","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"5.4.1","prop-types":"15.7.2","q":"1.5.1","ramda":"0.27.1","react":"17.0.2","react-dom":"17.0.2","regenerator-runtime":"0.13.9","rimraf":"3.0.2","rollup":"2.56.3","rollup-plugin-terser":"7.0.2","tslib":"2.3.1","typedoc":"0.21.8","typescript":"4.3.5","underscore":"1.13.1","webpack":"5.51.1","webpack-cli":"4.8.0","webpack-dev-server":"4.0.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.0","gitHead":"860dc6fb52f5d5dd30619f6c69f72c4cde59035b","_id":"moize@6.1.0","_nodeVersion":"12.19.1","_npmVersion":"7.20.6","dist":{"integrity":"sha512-WrMcM+C2Jy+qyOC/UMhA3BCHGowxV34dhDZnDNfxsREW/8N+33SFjmc23Q61Xv1WUthUA1vYopTitP1sZ5jkeg==","shasum":"736e505d30d0ff7751005ed2c66c74cf52941b87","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.0.tgz","fileCount":39,"unpackedSize":733585,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhK6KdCRA9TVsSAnZWagAAeOAP+wUCloVqIvnc4c3cbiUn\nQ93Xtw52J2VGA2yABUq7jti07bUcLC/HptWir2pHBFJdjzUnp2rF85PLvMSk\ndJoGWDnZmsbFgzyKoVqzFhBf6XTYpZfB4dvs/TuykdrQoFudHoE84stUG6e/\n1h3A5JTWebdmj1kAynd9PDkGgmBVtPIpfgEP4Lcaskx19FjipgSXftrJra7t\n1TXEWsYI+VQ1iOhZxVB+tN3r7leLavCuCqZGZIRoRTenh2gh4gragEZDql+C\nICPKhRL8kbevvXJTESsL1KhtVdXMzkgzP4sUOr7AlBMKtFsjRadzbKJlVb6m\njbH1mtciIJ5pp9Vm9dt4BZMYwmWTUIeoCAGA4YiBv7ySPemZyrJxjy3FPXD0\n0HY4xiPJH/Ad3y4btvA6pTeFKNszjDkUMt5YPRIgU82wnfwTm9Ek2VlFfctv\nB9c+85Q9W6E59vrshwY7muaJ5pStYeXTl4Azh2F5eb57DYmgEMK+D9okoiA0\nz9bUX2XBchnCtAb1NOblL7EEgIX4QtdIfrWPVAsR29j4zs9JMjGCQD3uRBLc\nyTv+sKnfhG/WqShRZ3zie57hHAtkXIWzFHjFQLTymGSGlJs9IQ4du5gCsvSu\nXKqDTvEh69yVlI8B55mUPI/uQ25uJ6FtUYrhsg3ElLeXch3DmqNZnC0aAKj+\nkK8C\r\n=ZG98\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGzYz5BmQBBbide4tDHe3TX/wepZQiyYQPOAL+h+6qRKAiEAqVs+XmqxvWfKXiZq5L8ZLbCiQOv6wskIJrQVnR1Z8B8="}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.0_1630249628838_0.09666237286026647"},"_hasShrinkwrap":false},"6.1.1":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.9"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.17.6","@babel/core":"7.17.9","@babel/plugin-proposal-class-properties":"7.16.7","@babel/preset-env":"7.16.11","@babel/preset-react":"7.16.7","@babel/preset-typescript":"7.16.7","@rollup/plugin-babel":"5.3.1","@rollup/plugin-commonjs":"21.1.0","@rollup/plugin-node-resolve":"13.2.1","@types/bluebird":"3.5.36","@types/eslint":"^8.4.1","@types/jest":"27.4.1","@types/lodash":"4.14.182","@types/memoizee":"0.4.7","@types/react":"18.0.6","@types/react-dom":"18.0.2","@typescript-eslint/eslint-plugin":"5.20.0","@typescript-eslint/parser":"5.20.0","babel-jest":"27.5.1","babel-loader":"8.2.5","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.22.2","eslint":"8.14.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.29.4","eslint-webpack-plugin":"^3.1.1","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"27.5.1","jsdoc":"3.6.10","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.0","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.0.0","react-dom":"18.0.0","regenerator-runtime":"0.13.9","release-it":"^14.14.2","rimraf":"3.0.2","rollup":"2.70.2","rollup-plugin-terser":"7.0.2","tslib":"2.4.0","typedoc":"0.22.15","typescript":"4.6.3","underscore":"1.13.3","webpack":"5.72.0","webpack-cli":"4.9.2","webpack-dev-server":"4.8.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.1","gitHead":"d8c4e8b414552ce262a41554539c629d76a44f55","_id":"moize@6.1.1","_nodeVersion":"16.14.2","_npmVersion":"8.5.0","dist":{"integrity":"sha512-6bryLehIBVByDdAkXhoaPP1fknkoq1hNPmVCDYIb/w5zwfidT02zLSto1uGbmnv1GKu02ysgAEaJ5Ic7QQaGQA==","shasum":"e75f18734fcb22aec30205681eb97cd7eb3ffa51","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.1.tgz","fileCount":39,"unpackedSize":754256,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICZPVsp9xoxJGjhEX4cUJiLX6SCoGwl/ipbtouLpVkZkAiEAw3dmbdjK6o0Lch4O+/f1nWqE/ZgX74g1T6KZY3jp2fs="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZIrAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqp4w/9Hii/f2xbgbSQw4gsuap9dM10IsmbKX2UNYjoBv2xsZDV/gWl\r\nXQg6SXXAINffZKeFGh35QdkQx0ew7qUEQrbnqYMf18ZmGF0hHQuNBlNeEFc8\r\nTnFCRyERJi3Il9YMQYmrFvIjvoZM/zkxg4LELKYTLFOcrUgwg+YmiiNCfFUB\r\nVk9/tI4uOUc111Jh8g03MuexQaBjzuimjzJxf1GhShOIX6OeHRe0xdani/U6\r\n0lDxqI3aW57l60KQ/Ee+sAdKXVZMjVrih+1N0IwO5wPJgJpAZaE7A6044x0j\r\nraJjgIdoaPM/r7iPTdNQ5hD4T+LjyesaC9wn500W/pX3SdmxBiv6xvAnVvGC\r\ny/59aj7KXjE2Ruxy0cn95+J/RPVQ9UYiCbwzHT8SFsJmePQ2O9DxlPOofbNF\r\nevtabWJGiIkRqzCTetA0oJeuL87EWTZoPuIWiPIK0QagS6H4+0lGPmbSLByE\r\nqlqeHFQ77rjty5JsHk5SSVmS76f3i/ppQYH60hcgBF4solNIwbl+3yjHUwKV\r\na5CaEhzrlyCqpmYxjbdpJEOzABTh4addwW/T1dxDYKPA8EDFdIBsLatfIF0q\r\nO294VQ0bXUc8LO8B4DETGjYYjQPjTcvY9n2sGgg85hpAt0K+bcxRcd4DUSnE\r\nblX5/i+THqjsaux7b1EORZaek+6zfwUo9a8=\r\n=ydCo\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.1_1650756288297_0.1706187004030506"},"_hasShrinkwrap":false},"6.1.2":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.18.10","@babel/core":"7.18.10","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.18.10","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"5.3.1","@rollup/plugin-commonjs":"22.0.2","@rollup/plugin-node-resolve":"13.3.0","@types/bluebird":"3.5.36","@types/eslint":"^8.4.6","@types/jest":"28.1.7","@types/lodash":"4.14.184","@types/memoizee":"0.4.8","@types/react":"18.0.17","@types/react-dom":"18.0.6","@typescript-eslint/eslint-plugin":"5.33.1","@typescript-eslint/parser":"5.33.1","babel-jest":"28.1.3","babel-loader":"8.2.5","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.24.1","eslint":"8.22.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.30.1","eslint-webpack-plugin":"^3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"28.1.3","jest-environment-jsdom":"^28.1.3","jsdoc":"3.6.11","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.9","release-it":"^15.3.0","rimraf":"3.0.2","rollup":"2.78.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.0","typedoc":"0.23.10","typescript":"4.7.4","underscore":"1.13.4","webpack":"5.74.0","webpack-cli":"4.10.0","webpack-dev-server":"4.10.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.2","gitHead":"b2741318c43af398de92d717e9a8132c3746e54f","_id":"moize@6.1.2","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-ITAy0ynIrWR9PVHIu9GqRcGSqia+lDsE+mxVkvBbl/O2J1O6JAaV2YYDtd82AUv2RXK/7GQRjUA/c0y6D/1b1A==","shasum":"fb6f48d4487de13021b9ff11c569a577f82cba88","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.2.tgz","fileCount":39,"unpackedSize":742167,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHB0dFjJD9j55K3MQE5L3kYQQE7t/L/BNyj4kWp+hAmwAiEA+Tec2dL650Oy68sPLuhPSSGOwKsw5L9IWCqDMkxal2c="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjBj+oACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr5qQ/9F2gEVhecDNZyQjnNOt4KHqLjvV3Xcw3YYyEK7r81ZwZlDjr6\r\nAyUi70d9Vj8J/vMoFiSW/M1LXvOHETx4Itb1S2rM/HMfNn39YVJp82oQ92ay\r\nHhUU7hfKCIWPKhG0SCHBdOWEiIonl3OWOyb6ozSU6ApSOuBI7+HzvU2Slow4\r\nrfHU780CLpPT6DHYUc+DYDbk48Iv7zgUR1lkGaq1A9wZwbfhRuON5l60Vgw7\r\nKDVjaEk0/QWpJ5YxK3uzfM3zDRoAIeF1O6MCMHof2tgtxYkhsGxwBak28DmM\r\nQxWfwzYMZ89uBi0lIJ5o/MnCFou09o9weO3XZXHttwLxnmyAevszTSW4AbDg\r\nw/i1RX6IlCgMO9wvS1ew1wecsBEGg43LBLaj6YXE++ojw6e08dfq217VV7gW\r\n8XhhTWzoDSINiRcIBn6NgXkEevTbjYDtoacHSdFPXvLhk7pSHp7jUQTPsqcX\r\neefd2+0btvBj2UsZgNgIJAwNToeSKS9Br/wxnQRdyTC3FBQYkaOlrJ2fN+Hw\r\nEEZHaJ7EKDx6gqYV9nlglU4B/EsNqCVP3JWn4pQAD4Fg5+5odag3qpKDjQNF\r\n083GWSpDk5S0hgpKYP1mYutoLKiBkpVAUJtpMgxtg/JWLJfWWF8SMKdk1fjD\r\nR97YFANx9m18SiBep0eXMQ2rmysg2FhmvXw=\r\n=bEhf\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.2_1661353896283_0.9194292354330709"},"_hasShrinkwrap":false},"6.1.3":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.18.10","@babel/core":"7.18.10","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.18.10","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"5.3.1","@rollup/plugin-commonjs":"22.0.2","@rollup/plugin-node-resolve":"13.3.0","@types/bluebird":"3.5.36","@types/eslint":"^8.4.6","@types/jest":"28.1.7","@types/lodash":"4.14.184","@types/memoizee":"0.4.8","@types/react":"18.0.17","@types/react-dom":"18.0.6","@typescript-eslint/eslint-plugin":"5.33.1","@typescript-eslint/parser":"5.33.1","babel-jest":"28.1.3","babel-loader":"8.2.5","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.24.1","eslint":"8.22.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.30.1","eslint-webpack-plugin":"^3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"28.1.3","jest-environment-jsdom":"^28.1.3","jsdoc":"3.6.11","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.9","release-it":"^15.3.0","rimraf":"3.0.2","rollup":"2.78.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.0","typedoc":"0.23.10","typescript":"4.7.4","underscore":"1.13.4","webpack":"5.74.0","webpack-cli":"4.10.0","webpack-dev-server":"4.10.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.3","gitHead":"5dfdc3262179af8110ca9a5726cca84b505e1f2a","_id":"moize@6.1.3","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-Cn+1T5Ypieeo46fn8X98V2gHj2VSRohVPjvT8BRvNANJJC3UOeege/G84xA/3S9c5qA4p9jOdSB1jfhumwe8qw==","shasum":"2e188a5ee02e4e3c06beaab39a4a3c92f92dd9aa","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.3.tgz","fileCount":50,"unpackedSize":793364,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCVQTKMYEIraHMQLnXCZdBqc8XuV1BfVxS3pH2DXRrEzgIhANxTHXCmv8+Abd2mHrXlhC+RBPhFAcq8X6sbnOLe6mua"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjFyLeACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp7Hg//ZpGElPKvcVvC3iSpul3FJX8mLYiCNBjKGnKzPlGhVMMIcWiW\r\n3rgHRmGobdlnj6eBnUJ4CYTy//uLrDi7AgtJiWZN+IjcslGXbW+jl5ccepfc\r\nc1m5L2e7pWod8bokKVYpPz9hnJ2aOoRb4hhSz+4BbJ5tRZ4QfhSo9OpWVqmo\r\nt4uBvhifRciSR16lDdKKX/351pN8CH3yt/AJlv1jx0YXzO0emTwlcytv2ccj\r\nIEy8UNR4kDPuh0eB3Oz8+Qdh9U70ZamdzZM4eWFHwk+otUwX3MHiCT6AqisI\r\nQcfuykuhyKuIqPz1Dxldd4VbDPrA3UdRWrttkVQ7t5cq1w9LPGLwbTHSsJeV\r\nn81uqF1GOWTwlGySQliTs7L1zOMduO55AmCW8I6I7zThoU++jf5Kcjw3TXPp\r\nMjMHKATmgAATvfDgbHHkapw6LqNxcwn4PkQ87k+ZSebVrYdgaRNaBVODLKQi\r\nlP2v69dRjL9Nejt4sfu53P4QFuB3w6az5deY2rGh0OXb16Anr5h+Ch+HR5FW\r\nn2n5xvfzjaLKQK/JujGBbYncTU7xc5zU0MGmgBZJ5PTX/lrrBjhWcka5LBR/\r\nquZgUis92WbHkSJkIFUkRMIsAUw7Y9pWirhsL7tsnuXJ7xeACpGz9Lkc5DJ8\r\nZ4NSPhVlh4+E4UhZq0teW6Sm0QHduyg4ZKI=\r\n=ShTU\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.3_1662460638345_0.22896579893536018"},"_hasShrinkwrap":false},"6.1.4":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.19.3","@babel/core":"7.20.5","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.20.2","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"6.0.3","@rollup/plugin-commonjs":"23.0.4","@rollup/plugin-node-resolve":"15.0.1","@types/bluebird":"3.5.38","@types/eslint":"^8.4.6","@types/jest":"29.2.4","@types/lodash":"4.14.191","@types/memoizee":"0.4.8","@types/react":"18.0.26","@types/react-dom":"18.0.9","@typescript-eslint/eslint-plugin":"5.46.0","@typescript-eslint/parser":"5.46.0","babel-jest":"29.3.1","babel-loader":"9.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.26.1","eslint":"8.29.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.31.11","eslint-webpack-plugin":"^3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"29.3.1","jest-environment-jsdom":"^29.3.1","jsdoc":"4.0.0","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.11","release-it":"^15.3.0","rimraf":"3.0.2","rollup":"3.7.0","rollup-plugin-terser":"7.0.2","tslib":"2.4.1","typedoc":"0.23.21","typescript":"4.9.4","underscore":"1.13.6","webpack":"5.75.0","webpack-cli":"5.0.1","webpack-dev-server":"4.11.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.4","gitHead":"e47ca9d5ed182e4c0b7b4ce9b8a5e7b0fc6a67fa","_id":"moize@6.1.4","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-Ga8V0iu7XHDz6GR50pAaGjc3hJ5CVmWUgQRyWFAn4pYrBzITx9dMlXOGhURP2qmO3WTeOC9Yu17MlFV6PY2m/g==","shasum":"8e79b62a4a0519229b013522ae27d1b00c0b0c2d","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.4.tgz","fileCount":50,"unpackedSize":800787,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC11fGK5WLwr0R8OrmK5oD0GCcEuKb7bZw9PwcbR/YJFAIgFMM9rhDYwbaeuRzhjeeMiB5Zch7CKK5zVI3jd3fwPAU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjk7Q6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpi4Q//UevglglC1WdBBxtRQGGcsGP5noyEIhEYEfoVWNq91GHFAYx6\r\nI9hOudMHE4ErGpOQJ5bpf4rNR/Ru/jtRnH2ukt0X/F/mEXVaFcViQD2kt6vp\r\n6/05pkOI457zNaIszD9mQNNq6nR6u3wNJz1ATQ6XBt/lZ87tIwqPZnKLo6NP\r\n8CvhYvMh4F80NStFn+vQ2UZCjiUTO0qiqhpUxfH2rMawfpLKbr0zFSr0F0rr\r\nNC0WSEEGiFHl7qnSm+uUztqtYepra+WPtrPQ/+kVyhCZPZd9kYyWW5BH4lsM\r\nf+BJFU+CqMDbiqjKX0LqiYRxn/xR/P+WTG+fd7XG8bADuIO8XGU1d3QfDgwZ\r\nAIFvHkVRdijYtNZXVytrLyRq81Ul0ABGZjQ7iKfjOgCxKHaOQMu9HUPlSFSE\r\nHXbs0ZveV+DjvQpKrCMeKtmL1Le2p9VCiDnKRoggqRNz6M+mK92icn27j3+l\r\ngbhy153LMf8uWeU7/He+J1NaqAyamhxSJSgjZcYXsjc/+Y4B9STZKCtAXo4Q\r\nGCSOM3bcTUFuu5jipUcqDtQBkT9H7s1EoLyB9zKHyKxS/tcAI5hygDiUbot3\r\nHQqZhiExbFPrHqY7LeNDA6m0o+FWGwI0XQxb6sL0dCHN3iOsJjfVgM8geZ0M\r\nV9GoNUz/O4BJUJtbqa2yqlfmMdhOnkKOeR4=\r\n=GK1W\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.4_1670624314331_0.8060511440568043"},"_hasShrinkwrap":false},"6.1.5-beta.0":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"@types/react":"*","fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.20.7","@babel/core":"7.20.7","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.20.2","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"6.0.3","@rollup/plugin-commonjs":"24.0.0","@rollup/plugin-node-resolve":"15.0.1","@types/bluebird":"3.5.38","@types/eslint":"8.4.10","@types/jest":"29.2.5","@types/lodash":"4.14.191","@types/memoizee":"0.4.8","@types/react-dom":"18.0.10","@typescript-eslint/eslint-plugin":"5.48.0","@typescript-eslint/parser":"5.48.0","babel-jest":"29.3.1","babel-loader":"9.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.27.1","eslint":"8.31.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.31.11","eslint-webpack-plugin":"3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"29.3.1","jest-environment-jsdom":"29.3.1","jsdoc":"4.0.0","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.11","release-it":"15.6.0","rimraf":"3.0.2","rollup":"3.9.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.1","typedoc":"0.23.23","typescript":"4.9.4","underscore":"1.13.6","webpack":"5.75.0","webpack-cli":"5.0.1","webpack-dev-server":"4.11.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.5-beta.0","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.profile](#moizeprofile)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize');\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\nAll default values can be found [here](src/constants.ts).\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isShallowEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to 1_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name when it exists, or `Anonymous {count}` otherwise_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.profile\n\nPre-applies the [`profileName`](#profilename) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.profile('my fancy identity')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n**NOTE**: If collecting statistics, it is recommended to provide a custom [`profileName`](#profilename) or use [`moize.profile()`](#moizeprofile) for all memoized functions. This allows easier mapping of resulting statistics to their origin function when it has a common name or is anonymous.\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array   | single object  | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | -------------- | -------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **71,177,801**    | **98,393,482**   | **43,962,121**     | **139,808,786**  | **97,571,202** | **57,800,460** | **44,509,528**     | **44,526,039** | **42,850,796**  |\n| lru-memoize  | 48,391,839        | 64,270,849       | 32,512,830         | 77,863,436       | 59,876,764     | 55,072,348     | 29,917,027         | 33,308,028     | 34,313,435      |\n| mem          | 42,348,320        | 83,158,473       | 1,538,166          | 128,731,510      | 73,473,478     | 47,270,433     | 2,012,120          | 1,565,253      | 1,037,126       |\n| fast-memoize | 33,145,713        | 64,942,152       | 1,349,274          | 190,677,799      | 2,149,467      | 1,999,192      | 1,718,229          | 1,297,911      | 1,031,683       |\n| lodash       | 25,700,293        | 49,941,573       | 1,459,013          | 67,513,655       | 48,874,559     | 33,436,506     | 1,861,982          | 1,402,532      | 1,112,527       |\n| memoizee     | 21,546,499        | 27,447,855       | 15,645,143         | 29,701,124       | 27,294,197     | 25,348,244     | 15,359,792         | 15,855,421     | 15,720,217      |\n| ramda        | 18,804,380        | 35,919,033       | 1,689,727          | 101,557,928      | 1,895,956      | 4,303,215      | 2,305,025          | 1,597,131      | 1,167,025       |\n| memoizerific | 6,745,058         | 7,382,030        | 6,108,086          | 8,488,885        | 6,427,832      | 7,229,375      | 5,772,461          | 6,278,344      | 6,273,453       |\n| underscore   | 6,701,695         | 11,698,265       | 1,705,126          | 18,249,423       | 4,695,658      | 12,149,714     | 2,310,412          | 1,630,769      | 1,174,197       |\n| addy-osmani  | 4,926,732         | 6,370,152        | 3,483,311          | 12,506,809       | 3,568,399      | 3,035,249      | 6,898,542          | 2,009,089      | 1,542,304       |\n\n# Filesize\n\n`moize` is fairly small (~3.86KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint`, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"33470a6cef6eeed14718082dd77bc50d26430ee2","_id":"moize@6.1.5-beta.0","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-hld1ztKErebgjG4Rxppn8rKLyHwB5ajz2Arx3c56B251zNs6JyQsfEWX0AEtzO1yqcotBji0e3GgRig4CDJjhw==","shasum":"ba1fd3695bc5aca246e269f79b434180d53bbd4f","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.5-beta.0.tgz","fileCount":50,"unpackedSize":800786,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCzSmReziNl8xO8FCXsPo1l0p7ooWEDOZOGfjB+r4PoHgIhAO0QNfxZJ8Wzo6WFqhsaqSMIXj42u4dFIhqJ5iEGN2T8"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjtHnhACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp5jw//ZfWKYut7BtcOUwdvC/nCJNg4RdLYI3twJDs6uq4VpGilbfVG\r\nxto6cQ5w/+CV/uZTivEHsXVU6jWD8CMaDaKV22d9UFiibiUT0mzlm9/i76gt\r\ncJK29GNGhbzvhLBYefcdQdA1GnZjSoyWFOvk2EPBSw1zxM5x33r89QqkPUGV\r\n6BYMs+NTHxacyfaHkJynJWZ9XX4x0KjusCLUla6uSgL7vrccJH9RpPLUuaNO\r\nuJtSUhzz182jq9vB0krn/PRis0YarIBFHAZLH5778k2W9r/CilXL3FGbkmT+\r\n6bUMrVgZVIDibyLsO7zqar0Xhj9ddEDMXTb9Hd9IhnDqsd7L3cN8/9WWOi3Z\r\ny05WuRMd5P9/PN5UyDMMgmIojVqWEVrmxboyKOCbmCnx8VG0h/qNUHRPrN5Q\r\noJVtEBSHdwOHw3wudDzOli/T7D1rdHhsnF+jqjv+0aZ3CHs33ZW2sgWAWp7a\r\n0hAvXdGwEwOwsEfVyjEHoedtwB56fHfQuReHmHprx8YsJDmLP8XyjYqOQAEz\r\nJ67Dji2HagtY55lKTb/mz08tuzpm2JDf4tSjzMN+85/5kasMDiijpCuhoNLs\r\nxCj/l2huMjqLND6wLGwFpygE2PDU9YEH1KEv8ix/d8VnrQ29TwaURTb3uwti\r\nms7agemuIJogiwymnXjKResLjrDPWaUtyrI=\r\n=mK96\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.5-beta.0_1672772065184_0.7799819676905675"},"_hasShrinkwrap":false},"6.1.5-beta.1":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.20.7","@babel/core":"7.20.7","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.20.2","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"6.0.3","@rollup/plugin-commonjs":"24.0.0","@rollup/plugin-node-resolve":"15.0.1","@types/bluebird":"3.5.38","@types/eslint":"8.4.10","@types/jest":"29.2.5","@types/lodash":"4.14.191","@types/memoizee":"0.4.8","@types/react":"18.0.26","@types/react-dom":"18.0.10","@typescript-eslint/eslint-plugin":"5.48.0","@typescript-eslint/parser":"5.48.0","babel-jest":"29.3.1","babel-loader":"9.1.0","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.27.1","eslint":"8.31.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.31.11","eslint-webpack-plugin":"3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"29.3.1","jest-environment-jsdom":"29.3.1","jsdoc":"4.0.0","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.11","release-it":"15.6.0","rimraf":"3.0.2","rollup":"3.9.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.1","typedoc":"0.23.23","typescript":"4.9.4","underscore":"1.13.6","webpack":"5.75.0","webpack-cli":"5.0.1","webpack-dev-server":"4.11.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.5-beta.1","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.profile](#moizeprofile)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize');\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\nAll default values can be found [here](src/constants.ts).\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isShallowEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to 1_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name when it exists, or `Anonymous {count}` otherwise_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.profile\n\nPre-applies the [`profileName`](#profilename) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.profile('my fancy identity')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n**NOTE**: If collecting statistics, it is recommended to provide a custom [`profileName`](#profilename) or use [`moize.profile()`](#moizeprofile) for all memoized functions. This allows easier mapping of resulting statistics to their origin function when it has a common name or is anonymous.\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support mulitple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array   | single object  | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | -------------- | -------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **71,177,801**    | **98,393,482**   | **43,962,121**     | **139,808,786**  | **97,571,202** | **57,800,460** | **44,509,528**     | **44,526,039** | **42,850,796**  |\n| lru-memoize  | 48,391,839        | 64,270,849       | 32,512,830         | 77,863,436       | 59,876,764     | 55,072,348     | 29,917,027         | 33,308,028     | 34,313,435      |\n| mem          | 42,348,320        | 83,158,473       | 1,538,166          | 128,731,510      | 73,473,478     | 47,270,433     | 2,012,120          | 1,565,253      | 1,037,126       |\n| fast-memoize | 33,145,713        | 64,942,152       | 1,349,274          | 190,677,799      | 2,149,467      | 1,999,192      | 1,718,229          | 1,297,911      | 1,031,683       |\n| lodash       | 25,700,293        | 49,941,573       | 1,459,013          | 67,513,655       | 48,874,559     | 33,436,506     | 1,861,982          | 1,402,532      | 1,112,527       |\n| memoizee     | 21,546,499        | 27,447,855       | 15,645,143         | 29,701,124       | 27,294,197     | 25,348,244     | 15,359,792         | 15,855,421     | 15,720,217      |\n| ramda        | 18,804,380        | 35,919,033       | 1,689,727          | 101,557,928      | 1,895,956      | 4,303,215      | 2,305,025          | 1,597,131      | 1,167,025       |\n| memoizerific | 6,745,058         | 7,382,030        | 6,108,086          | 8,488,885        | 6,427,832      | 7,229,375      | 5,772,461          | 6,278,344      | 6,273,453       |\n| underscore   | 6,701,695         | 11,698,265       | 1,705,126          | 18,249,423       | 4,695,658      | 12,149,714     | 2,310,412          | 1,630,769      | 1,174,197       |\n| addy-osmani  | 4,926,732         | 6,370,152        | 3,483,311          | 12,506,809       | 3,568,399      | 3,035,249      | 6,898,542          | 2,009,089      | 1,542,304       |\n\n# Filesize\n\n`moize` is fairly small (~3.86KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint`, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"5338379e3d5f3bd2abdeb3ae5e65f5a623117172","_id":"moize@6.1.5-beta.1","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-SQlW5BhcwEgRLfgkcyhFuHFeshPZlcYJQDY6u73jWJnCl3SWGt8g7u2AH2eXvKDNm/AXHi+kaiNCDvr4Sj34vg==","shasum":"0175b51a689a85d22b96fa598b4f82003bf9d5a3","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.5-beta.1.tgz","fileCount":50,"unpackedSize":801219,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE4etuxevJFc9j/sOFIN0NR0xMS2sXIQFK0LtoG3m8B4AiEA2beisW7RkBelZCh6JpkXqDSAYtCZGwlvMAABAT7rlBA="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjtqbVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqxwxAAkl/QFWOHv6Tu5BLzb9A4khdtMlqb21aFex++h22+up2wt0r3\r\ncytIQIa27SjSfGHqte2M+QJPXL9pIqQdsry/LtVRovWcFn43GgkE2tqIGIXj\r\nmtt8mmq8dPizV77ctUD+e9uAbbpyZfC5D0dJwP8I6nvkOzuw7CvRw/jmqo6w\r\nP/inAD2wBir3d1XlY4/CHGo5vg28SdLxMqmwAD5Q0vErRhXyA5rrjFPdkiXk\r\nvri7YCfOOkHBHCgrwDzHy/4IrfDCFGqRh8teeOwkY3qis6CgJhgoT/flNLB9\r\nTY60EPCYmozpl03Bfk8VVUFLwk0lvK6nebG/a3LsJ+78bKLQ9Mj1l416C9ft\r\nmDtEOjf9uLSijMoFIAP5lq/ZzulAjG0pEnHMKPudg/Y/5kN/mPQKAKnjtmqy\r\nqRvCqG/XjXl+8ahhcSKVbNSRHj2cxvOtlyIPOgGa2jseCocDK9WaOYlkPa3u\r\nnAaXQaMGs5mmmkF8At52AqBgwXSS2xycY4i44XDka9LMSvY8klULDCKkM3dQ\r\n3qdeeJ+SKkvaP87tbCFPTVwraMUeOXxic5OL6hKo0v6C559JNk0AMo3s1YlD\r\nPQqcm/DAg9Iu+86X21jdscpao3Ee8J4oJw9nrQkrBr0Zdw/czV7hp4vsTq4y\r\nvnOevkj6VKY1mIvFQ9TMhTlAJWnRQQJ7WaM=\r\n=vvO0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.5-beta.1_1672914644917_0.27611174743374045"},"_hasShrinkwrap":false},"6.1.5":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.0.11"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.20.7","@babel/core":"7.20.12","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.20.2","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"6.0.3","@rollup/plugin-commonjs":"24.0.0","@rollup/plugin-node-resolve":"15.0.1","@types/bluebird":"3.5.38","@types/eslint":"8.4.10","@types/jest":"29.2.5","@types/lodash":"4.14.191","@types/memoizee":"0.4.8","@types/react":"18.0.26","@types/react-dom":"18.0.10","@typescript-eslint/eslint-plugin":"5.48.0","@typescript-eslint/parser":"5.48.0","babel-jest":"29.3.1","babel-loader":"9.1.2","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.27.1","eslint":"8.31.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.31.11","eslint-webpack-plugin":"3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"29.3.1","jest-environment-jsdom":"29.3.1","jsdoc":"4.0.0","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.11","release-it":"15.6.0","rimraf":"3.0.2","rollup":"3.9.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.1","typedoc":"0.23.23","typescript":"4.9.4","underscore":"1.13.6","webpack":"5.75.0","webpack-cli":"5.0.1","webpack-dev-server":"4.11.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.5","gitHead":"07588e982958d0946047226bac608a6f470c4338","_id":"moize@6.1.5","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-Fu46qKV9F8DOi2vXimR3yRw/JAJfFRQEFZeclvOFnG92AEFERqwFtu4PIxETYFtCghHGlU1itKcvvNioKgWGIw==","shasum":"e9a589685a3de4266eeb5f2bbfdfe1a173265f1a","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.5.tgz","fileCount":50,"unpackedSize":800740,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDv/MZCYImvh2cGFNjtTa0HlLLEVTQyQMDigUqGFX76EgIhAJ70ORRR5OnJb71OR472b5eciOZWWzeV68mcmQARFIaA"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjtzhiACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo7jRAAltmn7WbtrbYuR7QJzg3uKeogESEbSg6w7I33bxl/FSibWQI9\r\nQHSc55a/l8ob7rV+yyOgbtwuQpYzSxbK/G4yDN+JLmBZf/pTsuKg4149fKrn\r\neXOhuiGX3O6wUoVh9FtWFHLLT/rjfk+uqPK7jevXJFLl/3t7sHcWs49L0apW\r\neWED2bFgihJguPn7mSu0D0ROtf7cCYJawZ4SVIB3t7fK4neY33vd8lY03lGX\r\n5XZhCsM3hQhoKolnuyBXdKSvw53MdDrW2SuVG809NsEiNS/qEujaUignvwsL\r\ncGePcTqlTltgqifmUAVOe92w6SesJLUo0EhKPnTLpO6ebtJDsKV+ox2twNj/\r\nYC4EtCxXgf5HSHcg74pHnpzHegnYhWGtGX9+PQESywfwtsapD/IsxujL0M7w\r\nob/ycrEMj6jjiTcmp6LXTWOosUPMJ8VXpkKnHxiKP6CcSiWd36ch9F52sfiT\r\nMWY4cxL2OIOf3SHot6PQNqsc1RBvP4cYG0Xr2pFSKCtGlOPtMducr9SJ13K4\r\nrKaUtvsW9w9wTGPMxknoadB8EKYDzg61823bZSrrhfHCa1Y9jwkhNmEnwxXp\r\nRsNwyqtLT+eCK7yM4u0M5uCiM+4MGP3TnEfBxjN6hiNHqTGjZn3ydqCb1kOI\r\njnELkOeFgdP/dkHWjTFPH0HHV4B81X4mgMA=\r\n=2oTD\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.5_1672951905964_0.3613850505596172"},"_hasShrinkwrap":false},"6.1.6-beta.0":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.1.2"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"7.20.7","@babel/core":"7.20.12","@babel/plugin-proposal-class-properties":"7.18.6","@babel/preset-env":"7.20.2","@babel/preset-react":"7.18.6","@babel/preset-typescript":"7.18.6","@rollup/plugin-babel":"6.0.3","@rollup/plugin-commonjs":"24.0.0","@rollup/plugin-node-resolve":"15.0.1","@types/bluebird":"3.5.38","@types/eslint":"8.4.10","@types/jest":"29.2.5","@types/lodash":"4.14.191","@types/memoizee":"0.4.8","@types/react":"18.0.26","@types/react-dom":"18.0.10","@typescript-eslint/eslint-plugin":"5.48.0","@typescript-eslint/parser":"5.48.0","babel-jest":"29.3.1","babel-loader":"9.1.2","benchmark":"2.1.4","bluebird":"3.7.2","cli-table2":"0.2.0","core-js":"3.27.1","eslint":"8.31.0","eslint-friendly-formatter":"4.0.1","eslint-plugin-react":"7.31.11","eslint-webpack-plugin":"3.2.0","fast-memoize":"2.5.2","html-webpack-plugin":"5.5.0","in-publish":"2.0.1","ink-docstrap":"1.3.2","jest":"29.3.1","jest-environment-jsdom":"29.3.1","jsdoc":"4.0.0","jsdoc-babel":"0.5.0","lodash":"4.17.21","lru-memoize":"1.1.0","mem":"9.0.2","memoizee":"0.4.15","memoizerific":"1.11.3","ora":"6.1.2","prop-types":"15.8.1","q":"1.5.1","ramda":"0.28.0","react":"18.2.0","react-dom":"18.2.0","regenerator-runtime":"0.13.11","release-it":"15.6.0","rimraf":"3.0.2","rollup":"3.9.1","rollup-plugin-terser":"7.0.2","tslib":"2.4.1","typedoc":"0.23.23","typescript":"4.9.4","underscore":"1.13.6","webpack":"5.76.0","webpack-cli":"5.0.1","webpack-dev-server":"4.11.1"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.6-beta.0","readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.profile](#moizeprofile)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize');\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\nAll default values can be found [here](src/constants.ts).\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isShallowEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to 1_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name when it exists, or `Anonymous {count}` otherwise_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.profile\n\nPre-applies the [`profileName`](#profilename) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.profile('my fancy identity')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n**NOTE**: If collecting statistics, it is recommended to provide a custom [`profileName`](#profilename) or use [`moize.profile()`](#moizeprofile) for all memoized functions. This allows easier mapping of resulting statistics to their origin function when it has a common name or is anonymous.\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support multiple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array   | single object  | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | -------------- | -------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **71,177,801**    | **98,393,482**   | **43,962,121**     | **139,808,786**  | **97,571,202** | **57,800,460** | **44,509,528**     | **44,526,039** | **42,850,796**  |\n| lru-memoize  | 48,391,839        | 64,270,849       | 32,512,830         | 77,863,436       | 59,876,764     | 55,072,348     | 29,917,027         | 33,308,028     | 34,313,435      |\n| mem          | 42,348,320        | 83,158,473       | 1,538,166          | 128,731,510      | 73,473,478     | 47,270,433     | 2,012,120          | 1,565,253      | 1,037,126       |\n| fast-memoize | 33,145,713        | 64,942,152       | 1,349,274          | 190,677,799      | 2,149,467      | 1,999,192      | 1,718,229          | 1,297,911      | 1,031,683       |\n| lodash       | 25,700,293        | 49,941,573       | 1,459,013          | 67,513,655       | 48,874,559     | 33,436,506     | 1,861,982          | 1,402,532      | 1,112,527       |\n| memoizee     | 21,546,499        | 27,447,855       | 15,645,143         | 29,701,124       | 27,294,197     | 25,348,244     | 15,359,792         | 15,855,421     | 15,720,217      |\n| ramda        | 18,804,380        | 35,919,033       | 1,689,727          | 101,557,928      | 1,895,956      | 4,303,215      | 2,305,025          | 1,597,131      | 1,167,025       |\n| memoizerific | 6,745,058         | 7,382,030        | 6,108,086          | 8,488,885        | 6,427,832      | 7,229,375      | 5,772,461          | 6,278,344      | 6,273,453       |\n| underscore   | 6,701,695         | 11,698,265       | 1,705,126          | 18,249,423       | 4,695,658      | 12,149,714     | 2,310,412          | 1,630,769      | 1,174,197       |\n| addy-osmani  | 4,926,732         | 6,370,152        | 3,483,311          | 12,506,809       | 3,568,399      | 3,035,249      | 6,898,542          | 2,009,089      | 1,542,304       |\n\n# Filesize\n\n`moize` is fairly small (~3.86KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint`, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","readmeFilename":"README.md","gitHead":"39b151ce9e97755c9e7d36b8d8d2b927daadbf05","_id":"moize@6.1.6-beta.0","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-RNzRBFv2j3gFuQyvBD8wA8BqxM1Q8BfE5UC3yL/81ApDkYV8DlnEmgmp2JBz+2Kix1jpRc5MkrIrX2meHSVYCw==","shasum":"0f1b158d4fff44e7d580753e579445205e6f442b","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.6-beta.0.tgz","fileCount":51,"unpackedSize":810138,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDaqDmXRFlGrdog271QzS0K4ZUW4MDbwNerpuveOHBLJAiEA626YuFnVP/hkBLIvv6FsLp5lB9gnmN1iOqZuw8qTNPQ="}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.6-beta.0_1683540064376_0.29775525838021033"},"_hasShrinkwrap":false},"6.1.6":{"author":{"name":"planttheidea"},"browser":"dist/moize.js","browserslist":["defaults","Explorer >= 9","Safari >= 6","Opera >= 15","iOS >= 8","Android >= 4"],"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"dependencies":{"fast-equals":"^3.0.1","micro-memoize":"^4.1.2"},"description":"Blazing fast memoization based on all parameters passed","devDependencies":{"@babel/cli":"^7.21.5","@babel/core":"^7.21.8","@babel/plugin-proposal-class-properties":"^7.18.6","@babel/preset-env":"^7.21.5","@babel/preset-react":"^7.18.6","@babel/preset-typescript":"^7.21.5","@rollup/plugin-babel":"^6.0.3","@rollup/plugin-commonjs":"^24.1.0","@rollup/plugin-node-resolve":"^15.0.2","@rollup/plugin-terser":"^0.4.1","@types/bluebird":"^3.5.38","@types/eslint":"^8.37.0","@types/jest":"^29.5.1","@types/lodash":"^4.14.194","@types/memoizee":"^0.4.8","@types/react":"^18.2.6","@types/react-dom":"^18.2.4","@typescript-eslint/eslint-plugin":"^5.59.2","@typescript-eslint/parser":"^5.59.2","babel-jest":"^29.5.0","babel-loader":"^9.1.2","benchmark":"^2.1.4","bluebird":"^3.7.2","cli-table2":"^0.2.0","core-js":"^3.30.2","eslint":"^8.40.0","eslint-friendly-formatter":"^4.0.1","eslint-plugin-react":"^7.32.2","eslint-webpack-plugin":"^4.0.1","fast-memoize":"^2.5.2","html-webpack-plugin":"^5.5.1","in-publish":"^2.0.1","ink-docstrap":"^1.3.2","jest":"^29.5.0","jest-environment-jsdom":"^29.5.0","jsdoc":"^4.0.2","jsdoc-babel":"^0.5.0","lodash":"^4.17.21","lru-memoize":"^1.1.0","mem":"^8.1.1","memoizee":"^0.4.15","memoizerific":"^1.11.3","ora":"^5.4.1","prop-types":"^15.8.1","q":"^1.5.1","ramda":"^0.29.0","react":"^18.2.0","react-dom":"^18.2.0","regenerator-runtime":"^0.13.11","release-it":"^15.10.3","rimraf":"^5.0.0","rollup":"^3.21.5","tslib":"^2.5.0","typedoc":"^0.24.7","typescript":"^5.0.4","underscore":"^1.13.6","webpack":"^5.82.0","webpack-cli":"^5.1.0","webpack-dev-server":"^4.15.0"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"license":"MIT","main":"dist/moize.cjs.js","module":"dist/moize.esm.js","name":"moize","repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"scripts":{"benchmark":"npm run dist && node benchmark/index.js","benchmark:alternative":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=alternative node benchmark/index.js","benchmark:array":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=array node benchmark/index.js","benchmark:object":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=object node benchmark/index.js","benchmark:primitive":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=primitive node benchmark/index.js","benchmark:react":"npm run transpile:lib -- --no-comments && BENCHMARK_SUITE=react node benchmark/index.js","build":"NODE_ENV=production rollup -c --bundleConfigAsCjs","clean:dist":"rimraf dist","clean:docs":"rimraf docs","clean:mjs":"rimraf mjs","copy:mjs":"npm run clean:mjs && node ./es-to-mjs.js","copy:types":"cp src/types.ts index.d.ts","dev":"NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js","dist":"npm run clean:dist && npm run build","docs":"npm run clean:docs && typedoc","lint":"NODE_ENV=test eslint src/*.ts","lint:fix":"npm run lint -- --fix","release":"release-it","release:beta":"release-it --config=.release-it.beta.json","release:scripts":"npm run lint && npm run typecheck && npm run test:coverage && npm run dist && npm run copy:mjs","start":"npm run dev","test":"NODE_ENV=test NODE_PATH=. jest","test:coverage":"npm test -- --coverage","test:watch":"npm test -- --watch","typecheck":"tsc --noEmit"},"sideEffects":false,"types":"./index.d.ts","version":"6.1.6","gitHead":"eb9a2a3bda19bf30cbe5fdf3107e6ceee642a049","_id":"moize@6.1.6","_nodeVersion":"16.14.2","_npmVersion":"8.7.0","dist":{"integrity":"sha512-vSKdIUO61iCmTqhdoIDrqyrtp87nWZUmBPniNjO0fX49wEYmyDO4lvlnFXiGcaH1JLE/s/9HbiK4LSHsbiUY6Q==","shasum":"ac2e723e74b951875fe2c0c3433405c2b098c3e6","tarball":"https://registry.npmjs.org/moize/-/moize-6.1.6.tgz","fileCount":51,"unpackedSize":811511,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDK1rSSj998tZ9JaNrC3aSFYsqWtejiFtIA1krwGJ7JSAIhALi1RaLbv2eAAiYmbiQjNgiEwimFiAggmISdj0YgxSi5"}]},"_npmUser":{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},"directories":{},"maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/moize_6.1.6_1683542084701_0.39505183483969364"},"_hasShrinkwrap":false}},"readme":"> moize\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\n`moize` is a [consistently blazing fast](#benchmarks) memoization library for JavaScript. It handles multiple parameters (including default values) without any additional configuration, and offers a large number of options to satisfy any number of potential use-cases.\n\n- [Importing](#importing)\n  - [ESM in browsers](#esm-in-browsers)\n  - [ESM in NodeJS](#esm-in-nodejs)\n  - [CommonJS](#commonjs)\n- [Usage](#usage)\n- [Configuration options](#configuration-options)\n  - [isDeepEqual](#isdeepequal)\n  - [isPromise](#ispromise)\n  - [isReact](#isreact)\n  - [isSerialized](#isserialized)\n  - [isShallowEqual](#isshallowequal)\n  - [matchesArg](#matchesarg)\n  - [matchesKey](#matcheskey)\n  - [maxAge](#maxage)\n  - [maxArgs](#maxargs)\n  - [maxSize](#maxsize)\n  - [onCacheAdd](#oncacheadd)\n  - [onCacheChange](#oncachechange)\n  - [onCacheHit](#oncachehit)\n  - [onExpire](#onexpire)\n  - [profileName](#profilename)\n  - [serializer](#serializer)\n  - [transformArgs](#transformargs)\n  - [updateCacheForKey](#updatecacheforkey)\n  - [updateExpire](#updateexpire)\n- [Usage with shortcut methods](#usage-with-shortcut-methods)\n  - [moize.deep](#moizedeep)\n  - [moize.infinite](#moizeinfinite)\n  - [moize.matchesArg](#moizematchesarg)\n  - [moize.matchesKey](#moizematcheskey)\n  - [moize.maxAge](#moizemaxage)\n  - [moize.maxArgs](#moizemaxargs)\n  - [moize.maxSize](#moizemaxsize)\n  - [moize.profile](#moizeprofile)\n  - [moize.promise](#moizepromise)\n  - [moize.react](#moizereact)\n  - [moize.serialize](#moizeserialize)\n  - [moize.serializeWith](#moizeserializewith)\n  - [moize.shallow](#moizeshallow)\n  - [moize.transformArgs](#moizetransformargs)\n  - [moize.updateCacheForKey](#moizeupdatecacheforkey)\n- [useMoize hook](#usemoize-hook)\n- [Composition](#composition)\n- [Collecting statistics](#collecting-statistics)\n  - [Stats methods](#stats-methods)\n  - [clearStats](#clearstats)\n  - [collectStats](#collectstats)\n  - [getStats([profileName])](#getstatsprofilename)\n- [Introspection](#introspection)\n  - [isCollectingStats](#iscollectingstats)\n  - [isMoized](#ismoized)\n- [Direct cache manipulation](#direct-cache-manipulation)\n  - [cache](#cache)\n  - [cacheSnapshot](#cachesnapshot)\n  - [add(key, value)](#addkey-value)\n  - [clear()](#clear)\n  - [get(key)](#getkey)\n  - [getStats()](#getstats)\n  - [has(key)](#haskey)\n  - [keys()](#keys)\n  - [remove(key)](#removekey)\n  - [update(key, value)](#updatekey-value)\n  - [values()](#values)\n- [Benchmarks](#benchmarks)\n- [Filesize](#filesize)\n- [Browser support](#browser-support)\n- [Development](#development)\n\n```\n$ npm i moize --save\n```\n\n# Importing\n\n## ESM in browsers\n\n```ts\nimport moize from 'moize';\n```\n\n## ESM in NodeJS\n\n```ts\nimport moize from 'moize/mjs/index.mjs';\n```\n\n## CommonJS\n\n```ts\nconst moize = require('moize');\n```\n\n# Usage\n\n```ts\nimport moize from 'moize';\n\nconst method = (a: number, b: number) => a + b;\n\nconst memoized = moize(method);\n\nmemoized(2, 4); // 6\nmemoized(2, 4); // 6, pulled from cache\n```\n\nAll parameter types are supported, including circular objects, functions, etc. There are also a number of [shortcut methods](#usage-with-shortcut-methods) to memoize for unique use-cases.\n\n# Configuration options\n\n`moize` optionally accepts an object of options as either the second parameter or as the first step in a curried function:\n\n```ts\n// inline\nmoize(fn, options);\n\n// curried\nmoize(options)(fn);\n```\n\nThe full shape of these options:\n\n```ts\ntype Options = {\n    // is the cache based on deep equality of each key argument\n    isDeepEqual: boolean;\n    // is the result a promise\n    isPromise: boolean;\n    // is the result a React component\n    isReact: boolean;\n    // should the parameters be serialized instead of directly referenced\n    isSerialized: boolean;\n    // is the cache based on shallow equality of each key argument\n    isShallowEqual: boolean;\n    // custom method to compare equality between two key arguments\n    matchesArg: (cachedKeyArg: any, keyArg: any) => boolean;\n    // custom method to compare equality across all key arguments\n    matchesKey: (cachedKey: any[], key: any[]) => boolean;\n    // amount of time in milliseconds before the cache will expire\n    maxAge: number;\n    // maximum number of arguments passed to use as key for caching\n    maxArgs: number;\n    // maximum size of cache for this method\n    maxSize: number;\n    // method fired when a new entry is added to cache\n    onCacheAdd: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fire when either a new entry is added to cache or the LRU ordering of the cache has changed\n    onCacheChange: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method fired when an existing entry in cache is used\n    onCacheHit: (\n        cache: moize.Cache,\n        options: moize.Options,\n        moized: (...args: any[]) => any\n    ) => void;\n    // method to fire when a cache entry expires (in combination with maxAge)\n    onExpire: (key: any[]) => void;\n    // the unique identifier to give the memoized method when collecting statistics\n    profileName: string;\n    // method to serialize the arguments to build a unique cache key\n    serializer: (key: any[]) => string;\n    // method to transform the args into a custom format for key storage in cache\n    transformArgs: (key: any[]) => any[];\n    // should the cache entry be refreshed by calling the underlying function with the same parameters and\n    // updating the value stored in cache to be the new result\n    updateCacheForKey: (key: any[]) => boolean;\n    // should the cache entry's expiration be refreshed when the cache entry is hit (in combination with maxAge)\n    updateExpire: boolean;\n};\n```\n\nAll default values can be found [here](src/constants.ts).\n\n## isDeepEqual\n\n_defaults to false_\n\nShould deep equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: {\n        nested: string;\n    };\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isDeepEqual: true });\n\nmemoized({ one: { nested: 'one' }, two: 'two' });\nmemoized({ one: { nested: 'one' }, two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.deep`](#moizedeep)\n\n```ts\nconst memoized = moize.deep(fn);\n```\n\n## isPromise\n\n_defaults to false_\n\nIs the computed value in the function a `Promise`.\n\n```ts\nconst fn = async (item: Promise<string>) => await item;\n\nconst memoized = moize(fn, { isPromise: true });\n```\n\nThis is also available via the shortcut method of [`moize.promise`](#moizepromise).\n\n```ts\nconst memoized = -moize.promise(fn);\n```\n\nThe `Promise` itself will be stored in cache, so that cached returns will always maintain the `Promise` contract. For common usage reasons, if the `Promise` is rejected, the cache entry will be deleted.\n\n## isReact\n\n_defaults to false_\n\nIs the function passed a stateless functional `React` component.\n\n```tsx\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one}: {two}\n    </div>\n);\n\nconst MemoizedFoo = moize(Component, { isReact: true });\n```\n\nThis is also available via the shortcut method of [`moize.react`](#moizereact).\n\n```ts\nconst MemoizedFoo = moize.react(Component);\n```\n\nThe method will do a shallow equal comparison of both `props` and legacy `context` of the component based on strict equality. If you want to do a deep equals comparison, set [`isDeepEqual`](#isdeepequal) to true.\n\n**NOTE**: This will memoize on each instance of the component passed, which is equivalent to `PureComponent` or `React.memo`. If you want to\nmemoize on _all_ instances (which is how this option worked prior to version 6), use the following options:\n\n```ts\nconst memoized = moize(Component, { isShallowEqual: true, maxArgs: 2 });\n```\n\n## isSerialized\n\n_defaults to false_\n\nSerializes the parameters passed into a string and uses this as the key for cache comparison.\n\n```ts\nconst fn = (mutableObject: { one: Record<string, any> }) =>\n    mutableObject.property;\n\nconst memoized = moize(fn, { isSerialized: true });\n```\n\nThis is also available via the shortcut method of [`moize.serialize`](#moizeserialize).\n\n```ts\nconst memoized = moize.serialize(fn);\n```\n\nIf `serialize` is combined with either `maxArgs` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer`\n\n**NOTE**: This is much slower than the default key storage, and usually the same requirements can be meet with `isDeepEqual`, so use at your discretion.\n\n## isShallowEqual\n\n_defaults to false_\n\nShould shallow equality be used to compare cache each key argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst memoized = moize(fn, { isShallowEqual: true });\n\nmemoized({ one: 'one', two: 'two' });\nmemoized({ one: 'one', two: 'two' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.shallow`](#moizeshallow)\n\n```ts\nconst memoized = moize.shallow(fn);\n```\n\n## matchesArg\n\n_defaults to [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) equality_\n\nCustom method used to compare equality of keys for cache purposes by comparing each argument.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst hasOneProperty = (cacheKeyArg: Arg, keyArg: Arg) =>\n    Object.keys(cacheKeyArg).length === 1 && Object.keys(keyArg).length === 1;\n\nconst memoized = moize(fn, { matchesArg: hasOneProperty });\n\nmemoized({ one: 'two' };\nmemoized({ two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesArg`](#moizematchesarg)\n\n```ts\nconst memoized = moize.matchesArg(hasOneProperty)(fn);\n```\n\n**NOTE**: This comparison is used iteratively on each argument, rather than comparing the two keys as a whole. If you want to compare the key as a whole, you should use [`matchesKey`](#matcheskey).\n\n## matchesKey\n\nCustom method used to compare equality of keys for cache purposes by comparing the entire key.\n\n```ts\ntype Arg = {\n    one: string;\n    two: string;\n};\n\nconst fn = ({ one, two }: Arg) => [one, two];\n\nconst isFooEqualAndHasBar = (cacheKey: [Arg], key: [Arg]) =>\n    cacheKey[0].one === key[0].one &&\n    cacheKey[1].hasOwnProperty('two') &&\n    key[1].hasOwnProperty('two');\n\nconst memoized = moize(fn, { matchesKey: isFooEqualAndHasBar });\n\nmemoized({ one: 'two' }, { two: null });\nmemoized({ one: 'two' }, { two: 'three' }); // pulls from cache\n```\n\nThis is also available via the shortcut method of [`moize.matchesKey`](#moizematcheskey)\n\n```ts\nconst memoized = moize.matchesKey(isFooEqualAndHasBar)(fn);\n```\n\n**NOTE**: This comparison uses the two keys as a whole, which is usually less performant than the `matchArg` comparison used iteratively on each argument. Generally speaking you should use the [`matchArg`](#matchesarg) option for equality comparison.\n\n## maxAge\n\nThe maximum amount of time in milliseconds that you want a computed value to be stored in cache for this method.\n\n```ts\nconst fn = (item: Record<string, any>) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes;\n\nconst memoized = moize(fn, { maxAge: MAX_AGE });\n```\n\nThis is also available via the shortcut method of [`moize.maxAge`](#moizemaxage).\n\n```ts\nconst memoized = moize.maxAge(MAX_AGE)(fn);\n```\n\n**TIP**: A common usage of this is in tandom with `isPromise` for AJAX calls, and in that scenario the expected behavior is usually to have the `maxAge` countdown begin upon resolution of the promise. If this is your intended use case, you should also apply the `updateExpire` option.\n\n## maxArgs\n\nThe maximum number of arguments (starting from the first) used in creating the key for the cache.\n\n```ts\nconst fn = (item1: string, item2: string, item3: string) =>\n    item1 + item2 + item3;\n\nconst memoized = moize(fn, { maxArgs: 2 });\n\nmemoize('one', 'two', 'three');\nmemoize('one', 'two', 'four'); // pulls from cache, as the first two args are the same\n```\n\nThis is also available via the shortcut method of [`moize.maxArgs`](#moizemaxargs).\n\n```ts\nconst memoized = moize.maxArgs(2)(fn);\n```\n\nIf `maxArgs` is combined with either `serialize` or `transformArgs`, the following order is used:\n\n1.  limit by `maxArgs`\n1.  transform by `transformArgs` (if applicable)\n1.  serialize by `serializer` (if applicable)\n\n## maxSize\n\n_defaults to 1_\n\nThe maximum number of values you want stored in cache for this method. Clearance of the cache once the `maxSize` is reached is on a [Least Recently Used](https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29) basis.\n\n```ts\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { maxSize: 5 });\n```\n\nThis is also available via the shortcut method of [`moize.maxSize`](#moizemaxsize).\n\n```ts\nconst memoized = moize.maxSize(5)(fn);\n```\n\n## onCacheAdd\n\nMethod to fire when an item has been added to cache. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheAdd: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two');\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onCacheChange\n\nMethod to fire when an item has been either added to cache, or existing cache was reordered based on a cache hit. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheChange: logCacheKeys });\n\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('one', 'two');\nmoized('two', 'one'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\nmoized('one', 'two'); // [[\"one\",\"two\"], [\"two\",\"one\"]]\n```\n\n**NOTE**: When combined with `onCacheAdd` or `onCacheHit`, this method will always fire last.\n\n## onCacheHit\n\nMethod to fire when an existing cache item is found. Receives the cache, options, and memoized function as a parameters.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst logCacheKeys = (\n    cache: Cache,\n    options: Options,\n    moized: Moized<typeof fn>\n) => console.log(cache.keys);\n\nconst moized = moize(fn, { maxSize: 2, onCacheHit: logCacheKeys });\n\nmoized('one', 'two');\nmoized('one', 'two'); // [[\"one\",\"two\"]]\nmoized('two', 'one');\nmoized('one', 'two'); // [[\"two\",\"one\"], [\"one\",\"two\"]]\n```\n\n**NOTE**: When combined with `onCacheChange`, this method will always fire first.\n\n## onExpire\n\nA callback that is called when the cached entry expires.\n\n```ts\nconst fn = (item: string) => item;\n\nconst logKey = (key: Key<string>) => console.log(key);\n\nconst memoized = moize(fn, { maxAge: 10000, onExpire: logKey });\n```\n\nIf you return `false` from this method, it will prevent the key's removal and refresh the expiration in the same vein as `updateExpire` based on `maxAge`:\n\n```ts\nconst fn = (item: string) => item;\n\nlet expirationAttempts = 0;\n\nconst limitExpirationAttempts = (key: Key<string>) => {\n    expirationAttempts += 1;\n\n    return expirationAttempts < 2;\n};\n\nconst memoized = moize(fn, {\n    maxAge: 10000,\n    onExpire: limitExpirationAttempts,\n});\n\nmemoized('one'); // will expire key after 30 seconds, or 3 expiration attempts\n```\n\n**NOTE**: You must set a [`maxAge`](#maxage) for this option to take effect.\n\n## profileName\n\n_defaults to function name when it exists, or `Anonymous {count}` otherwise_\n\nName to use as unique identifier for the function when collecting statistics.\n\n```ts\nmoize.collectStats();\n\nconst fn = (item: string) => item;\n\nconst memoized = moize(fn, { profileName: 'my fancy identity' });\n```\n\nThis is also available via the shortcut method of [`moize.profile`](#moizeprofile).\n\n```ts\nconst memoized = moize.profile('profile-name')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## serializer\n\n_defaults to serializeArguments in utils.js_\n\nMethod used in place of the internal serializer when serializing the parameters for cache key comparison. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string, two: string) => [one, two];\n\nconst customSerializer = (args: string[]) => [JSON.stringify(args[0])];\n\nconst memoized = moize(fn, {\n    isSerialized: true,\n    serializer,\n});\n```\n\nThis is also available via the shortcut method of [`moize.serializeWith`](#moizeserializewith).\n\n```ts\nconst memoized = moize.serializeWith(customSerializer)(fn);\n```\n\n**NOTE**: You must set [`isSerialized`](#isserialized) for this option to take effect.\n\n## transformArgs\n\nTransform the arguments passed before it is used as a key. The function accepts a single argument, the `Array` of `args`, and must also return an `Array`.\n\n```ts\nconst fn = (one: string | null, two: string | null, three: string | null) => [\n    two,\n    three,\n];\n\nconst ignoreFirstArg = (args: (string | null)[]) => args.slice(1);\n\nconst moized = moize(fn, { transformArgs: ignoreFirstArg });\n\nmoize('one', 'two', 'three');\nmoize(null, 'two', 'three'); // pulled from cache\n```\n\nThis is also available via the shortcut method of [`moize.transformArgs`](#moizetransformargs).\n\n```ts\nconst memoized = moize.transformArgs(argTransformer)(fn);\n```\n\nIf `transformArgs` is combined with either `maxArgs` or `serialize`, the following order is used:\n\n1.  limit by `maxArgs` (if applicable)\n1.  transform by `transformArgs`\n1.  serialize by `serializer` (if applicable)\n\n## updateCacheForKey\n\nIf you want to update the cache for a given key instead of leverage the value currently stored in cache.\n\n```ts\nconst fn = (item: string) => item;\n\nlet lastUpdate = Date.now();\n\nconst memoized = moize(fn, {\n    updateCacheForKey([item]: [string]) {\n        const now = Date.now();\n        const last = lastUpdated;\n\n        lastUpdate = now;\n\n        // its been more than 5 minutes since last update\n        return last + 300000 < now;\n    },\n});\n\nmemoized('one');\nmemoized('one'); // pulled from cache\n\n// 5 minutes later\n\nmemoized('one'); // re-calls method and updates cache\n```\n\nThis is also available via the shortcut method of [`moize.updateCacheForKey`](#moizeupdatecacheforkey).\n\n```ts\nconst memoized = moize.updateCacheForKey(shouldCacheUpdate)(fn);\n```\n\n## updateExpire\n\nWhen a `maxAge` is set, clear the scheduled expiration of the key when that key is retrieved, setting a new expiration based on the most recent retrieval from cache.\n\n```ts\nconst fn = (item: string) => item;\n\nconst MAX_AGE = 1000 * 60 * 5; // five minutes\n\nconst memoized = moize(fn, { maxAge: MAX_AGE, updateExpire: true });\n\nmemoized('one');\n\nsetTimeout(() => {\n    /**\n     * hits cache, which updates the expire to be 5 minutes\n     * from this run instead of the first\n     */\n    memoized('one');\n}, 1000 * 60);\n```\n\n# Usage with shortcut methods\n\n## moize.deep\n\nPre-applies the [`isDeepEqual`](#isdeepequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.deep(fn);\n```\n\n## moize.infinite\n\nPre-applies the [`maxSize`](#maxsize) option with `Infinity`.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.infinite(fn);\n```\n\n**NOTE**: This mimics default behavior of `moize` prior to version 6.\n\n## moize.matchesArg\n\nPre-applies the [`matchesArg`](#matchesarg) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst isEqualOrFoo = (cacheKeyArg: string, keyArg: string) =>\n    cacheKeyArg === keyArg || keyArg === 'one';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.matchesArg(isEqualOrFoo)(fn);\n```\n\n## moize.matchesKey\n\nPre-applies the [`matchesKey`](#matcheskey) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nconst isEqualOrHasFoo = (cacheKey: Key<string>, key: Key<string>) =>\n    key.every((keyArg, index) => keyArg === cacheKey[index]) ||\n    key.some((keyArg) => keyArg === 'one');\n\nexport default moize.matchesKey(isEqualOrHasFoo)(fn);\n```\n\n## moize.maxAge\n\nPre-applies the [`maxAge`](#maxage) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxAge(5000)(fn);\n```\n\n## moize.maxArgs\n\nPre-applies the [`maxArgs`](#maxargs) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxArgs(1)(fn);\n```\n\n## moize.maxSize\n\nPre-applies the [`maxSize`](#maxsize) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.maxSize(5)(fn);\n```\n\n## moize.profile\n\nPre-applies the [`profileName`](#profilename) option as a curriable method.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.profile('my fancy identity')(fn);\n```\n\n**NOTE**: You must be collecting statistics for this option to provide value, as it is the identifier used for statistics collection.\n\n## moize.promise\n\nPre-applies the [`isPromise`](#ispromise) and [`updateExpire`](#updateexpire) options. The `updateExpire` option does nothing if [`maxAge`](#maxage) is not also applied, but ensures that the expiration begins at the resolution of the promise rather than the instantiation of it.\n\n```ts\nimport moize from 'moize';\n\nconst fn = async (one: string, two: Record<string, any>) =>\n    await someApiCall(one, two);\n\nexport default moize.promise(fn);\n```\n\n**NOTE**: If you do not want the promise to update its expiration when the cache is hit, then you should use the `isPromise` option directly instead.\n\n## moize.react\n\nPre-applies the [`isReact`](#isreact)) option for memoizing functional components in [React](https://github.com/facebook/react). `Key` comparisons are based on a shallow equal comparison of both props and legacy context.\n\n```tsx\nimport moize from 'moize';\n\ntype Props = {\n    one: string;\n    two: number;\n};\n\nconst Component = ({ one, two }: Props) => (\n    <div>\n        {one} {two}\n    </div>\n);\n\nexport default moize.react(Component);\n```\n\n**NOTE**: This method will not operate with components made via the `class` instantiation, as they do not offer the same [referential transparency](https://en.wikipedia.org/wiki/Referential_transparency).\n\n## moize.serialize\n\nPre-applies the [`isSerialized`](#isSerialized) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serialize(fn);\n```\n\n**NOTE**: If you want to provide a custom [`serializer`](#serializer), you should use [`moize.serializeWith`](#moizeserializewith):\n\n```ts\nmoize.serializeWith(customSerializer)(fn);\n```\n\n## moize.serializeWith\n\nPre-applies the [`isSerialized`](#isSerialized) and [`serializer`](#serializer) options.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: Record<string, any>, two: Record<string, any>) => ({\n    one,\n    two,\n});\n\nexport default moize.serializeWith(JSON.stringify)(fn);\n```\n\n**NOTE**: If you want to use the default [`serializer`](#serializer), you should use [`moize.serialize`](#moizeserialize):\n\n```ts\nmoize.serialize(customSerializer)(fn);\n```\n\n## moize.shallow\n\nPre-applies the [`isShallowEqual`](#isshallowequal) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = (one: string, two: string) => `${one} ${two}`;\n\nexport default moize.shallow(fn);\n```\n\n## moize.transformArgs\n\nPre-applies the [`transformArgs`](#transformargs) option.\n\n```ts\nimport moize from 'moize';\n\nconst fn = ([one, two]: string[]) => [`${one} ${two}`];\n\nexport default moize.transformArgs(fn);\n```\n\n## moize.updateCacheForKey\n\nPre-applies the [`updateCacheForKey`](#updatecacheforkey) option.\n\n```ts\nimport moize from 'moize';\n\nlet lastUpdated = Date.now();\n\nconst fn = () => {\n    const now = Date.now();\n    const last = lastUpdated;\n\n    lastUpdate = now;\n\n    // its been more than 5 minutes since last update\n    return last + 300000 < now;\n};\n\nexport default moize.updateCacheForKey(fn);\n```\n\n# useMoize hook\n\nIf you are using React 16.8+ and are using hooks, you can easily create a custom `useMoize` hook for your project:\n\n```ts\nimport { useRef } from 'react';\n\nexport function useMoize(fn, args, options) {\n    const moizedFnRef = useRef(moize(fn, options));\n\n    return moizedFnRef.current(...args);\n}\n```\n\nWhich can then be used as such:\n\n```tsx\nimport React from 'react';\n\nimport { useMoize } from './moize-hooks';\n\nfunction MyComponent({ first, second, object }) {\n    // standard usage\n    const sum = useMoize((a, b) => a + b, [first, second]);\n    // with options\n    const deepSum = useMoize((obj) => obj.a + obj.b, [object], {\n        isDeepEqual: true,\n    });\n\n    return (\n        <div>\n            Sum of {first} and {second} is {sum}. Sum of {object.a} and{' '}\n            {object.b} is {deepSum}.\n        </div>\n    );\n}\n```\n\nNaturally you can tweak as needed for your project (default options, option-specific hooks, etc).\n\n**NOTE**: This is very similar to [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) built-in hook, with two main differences:\n\n-   There is a third parameter passed (the [`options`](#configuration-options) passed to `moize`)\n-   The second argument array is the list of arguments passed to the memoized function\n\nIn both `useCallback` and `useMemo`, the array is a list of _dependencies_ which determine whether the funciton is called. These can be different than the arguments, although in general practice they are equivalent. The decision to use them directly was both for this common use-case reasons, but also because the implementation complexity would have increased substantially if not.\n\n# Composition\n\nStarting with version `2.3.0`, you can compose `moize` methods. This will create a new memoized method with the original function that shallowly merges the options of the two setups. Example:\n\n```tsx\nimport moize from 'moize';\n\nconst Component = (props: Record<string, any>) => <div {...props} />;\n\n// memoizing with react, as since 2.0.0\nconst MemoizedFoo = moize.react(Component);\n\n// creating a separately-memoized method that has maxSize of 5\nconst LastFiveFoo = moize.maxSize(5)(MemoizedFoo);\n```\n\nYou can also create an options-first curriable version of `moize` if you only pass the options:\n\n```ts\nimport moize from 'moize';\n\n// creates a function that will memoize what is passed\nconst limitedSerializedMoize = moize({ maxSize: 5, serialize: true });\n\nconst getWord = (bird) => `${bird} is the word`;\n\nconst moizedGetWord = limitedSerializedMoize(getWord);\n```\n\nYou can also combine all of these options with `moize.compose` to create `moize` wrappers with pre-defined options.\n\n```ts\nimport moize from 'moize';\n\n// creates a moizer that will have the options of\n// {isReact: true, maxAge: 5000, maxSize: 5}\nconst superLimitedReactMoize = moize.compose(\n    moize.react,\n    moize.maxSize(5),\n    moize.maxAge(5000)\n);\n```\n\n# Collecting statistics\n\nAs-of version 5, you can collect statistics of moize to determine if your cached methods are effective.\n\n```ts\nimport moize from 'moize';\n\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: It is recommended not to activate this in production, as it will have a performance decrease.\n\n## Stats methods\n\n## clearStats\n\nCear statistics on `moize`d functions.\n\n```ts\nmoize.clearStats(); // clears all stats\nmoize.clearStats('profile-name'); // clears stats only for 'profile-name'\n```\n\n## collectStats\n\nSet whether collecting statistics on `moize`d functions.\n\n```ts\nmoize.collectStats(true); // start collecting stats\nmoize.collectStats(); // same as passing true\nmoize.collectStats(false); // stop collecting stats\n```\n\n**NOTE**: If collecting statistics, it is recommended to provide a custom [`profileName`](#profilename) or use [`moize.profile()`](#moizeprofile) for all memoized functions. This allows easier mapping of resulting statistics to their origin function when it has a common name or is anonymous.\n\n## getStats([profileName])\n\nGet the statistics for a specific function, or globally.\n\n```ts\nmoize.collectStats();\n\nconst fn = (one: string, two: string) => [one, two];\n\nconst moized = moize(fn);\n\nconst otherFn = (one: string[]) => one.slice(0, 1);\n\nconst otherMoized = moize(otherFn, { profileName: 'otherMoized' });\n\nmoized('one', 'two');\nmoized('one', 'two');\n\nmoized.getStats(); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n\notherMoized(['three']);\n\nmoize.getStats('otherMoized'); // {\"calls\": 1, \"hits\": 0, \"usage\": \"0%\"}\n\nmoize.getStats();\n/*\n {\n   \"calls\": 3,\n   \"hits\": 1,\n   \"profiles\": {\n     \"fn at Object..src/utils.js (http://localhost:3000/app.js:153:68)\": {\n       \"calls\": 2,\n       \"hits\": 1,\n       \"usage\": \"50%\"\n     },\n     \"otherMoized\": {\n       \"calls\": 1,\n       \"hits\": 0,\n       \"usage\": \"0%\"\n     }\n   },\n   \"usage\": \"33.3333%\"\n }\n */\n```\n\n# Introspection\n\n## isCollectingStats\n\nAre statistics being collected on memoization usage.\n\n```ts\nmoize.collectStats(true);\nmoize.isCollectingStats(); // true\nmoize.collectStats(false);\nmoize.isCollectingStats(); // false\n```\n\n## isMoized\n\nIs the function passed a moized function.\n\n```ts\nconst fn = () => {};\nconst moizedFn = moize(fn);\n\nmoize.isMoized(fn); // false\nmoize.isMoized(moizedFn); // true\n```\n\n# Direct cache manipulation\n\nThe cache is available on the `moize`d function as a property, and while it is not recommended to modify it directly, that option is available for edge cases.\n\n## cache\n\nThe shape of the `cache` is as follows:\n\n```ts\ntype Cache = {\n    keys: any[][];\n    size: number;\n    values: any[];\n};\n```\n\nRegardless of how the key is transformed, it is always stored as an array (if the value returned is not an array, it is coalesced to one).\n\n**NOTE**: The order of `keys` and `values` should always align, so be aware when manually manipulating the cache that you need to manually keep in sync any changes to those arrays.\n\n## cacheSnapshot\n\nThe `cache` is mutated internally for performance reasons, so logging out the cache at a specific step in the workflow may not give you the information you need. As such, to help with debugging you can request the `cacheSnapshot`, which has the same shape as the `cache` but is a shallow clone of each property for persistence.\n\nThere are also convenience methods provided on the `moize`d function which allow for programmatic manipulation of the cache.\n\n## add(key, value)\n\nThis will manually add the _value_ at _key_ in cache if _key_ does not already exist. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item: string);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only add `key`s that do not exist in the cache, and will do nothing if the `key` already exists. If you want to update keys that already exist, use [`update`](#updatekey-value).\n\n## clear()\n\nThis will clear all values in the cache, resetting it to an empty state.\n\n```ts\nconst memoized = moize((item: string) => item);\n\nmemoized.clear();\n```\n\n## get(key)\n\nReturns the value in cache if the key matches, else returns `undefined`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.get(['one', 'two'])); // [\"one\",\"two\"]\nconsole.log(memoized.get(['two', 'three'])); // undefined\n```\n\n## getStats()\n\nReturns the statistics for the function.\n\n```ts\nmoize.collectStats();\n\nconst memoized = moize((one: string, two: string) => [one, two);\n\nmemoized('one', 'two');\nmemoized('one', 'two');\n\nconsole.log(memoized.getStats()); // {\"calls\": 2, \"hits\": 1, \"usage\": \"50%\"}\n```\n\n**NOTE**: You must be collecting statistics for this to be populated.\n\n## has(key)\n\nThis will return `true` if a cache entry exists for the _key_ passed, else will return `false`. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((one: string, two: string) => [one, two]);\n\nmemoized('one', 'two');\n\nconsole.log(memoized.has(['one', 'two'])); // true\nconsole.log(memoized.has(['two', 'three'])); // false\n```\n\n## keys()\n\nThis will return a list of the current keys in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: any) => item);\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst keys = memoized.keys(); // [['one'], [{two: 'three'}]]\n```\n\n## remove(key)\n\nThis will remove the provided _key_ from cache. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\nconst memoized = moize((item: { one: string }) => item);\n\nconst arg = { one: 'one' };\n\nmemoized(arg);\n\nmemoized.remove([arg]);\n\n// will re-execute, as it is no longer in cache\nmemoized(arg);\n```\n\n**NOTE**: This will only remove `key`s that exist in the cache, and will do nothing if the `key` does not exist.\n\n## update(key, value)\n\nThis will manually update the _value_ at _key_ in cache if _key_ exists. _key_ should be an `Array` of values, meant to reflect the arguments passed to the method.\n\n```ts\n// single parameter is straightforward\nconst memoized = moize((item: string) => item);\n\nmemoized.add(['one'], 'two');\n\n// pulls from cache\nmemoized('one');\n```\n\n**NOTE**: This will only update `key`s that exist in the cache, and will do nothing if the `key` does not exist. If you want to add keys that do not already exist, use [`add`](#addkey-value).\n\n## values()\n\nThis will return a list of the current values in `cache`.\n\n```ts\nconst memoized = moize.maxSize(2)((item: string | { two: string }) => ({\n    item,\n}));\n\nmemoized('one');\nmemoized({ two: 'three' });\n\nconst values = memoized.values(); // [{item: 'one'}, {item: {two: 'three'}}]\n```\n\n# Benchmarks\n\nAll values provided are the number of operations per second calculated by the [Benchmark suite](https://benchmarkjs.com/), where a higher value is better. Each benchmark was performed using the default configuration of the library, with a fibonacci calculation based on a starting parameter of `35`, using single and multiple parameters with different object types. The results were averaged to determine overall speed across possible usage.\n\n**NOTE**: `lodash`, `ramda`, and `underscore` do not support multiple-parameter memoization without use of a `resolver` function. For consistency in comparison, each use the same `resolver` that returns the result of `JSON.stringify` on the arguments.\n\n| Name         | Overall (average) | Single (average) | Multiple (average) | single primitive | single array   | single object  | multiple primitive | multiple array | multiple object |\n| ------------ | ----------------- | ---------------- | ------------------ | ---------------- | -------------- | -------------- | ------------------ | -------------- | --------------- |\n| **moize**    | **71,177,801**    | **98,393,482**   | **43,962,121**     | **139,808,786**  | **97,571,202** | **57,800,460** | **44,509,528**     | **44,526,039** | **42,850,796**  |\n| lru-memoize  | 48,391,839        | 64,270,849       | 32,512,830         | 77,863,436       | 59,876,764     | 55,072,348     | 29,917,027         | 33,308,028     | 34,313,435      |\n| mem          | 42,348,320        | 83,158,473       | 1,538,166          | 128,731,510      | 73,473,478     | 47,270,433     | 2,012,120          | 1,565,253      | 1,037,126       |\n| fast-memoize | 33,145,713        | 64,942,152       | 1,349,274          | 190,677,799      | 2,149,467      | 1,999,192      | 1,718,229          | 1,297,911      | 1,031,683       |\n| lodash       | 25,700,293        | 49,941,573       | 1,459,013          | 67,513,655       | 48,874,559     | 33,436,506     | 1,861,982          | 1,402,532      | 1,112,527       |\n| memoizee     | 21,546,499        | 27,447,855       | 15,645,143         | 29,701,124       | 27,294,197     | 25,348,244     | 15,359,792         | 15,855,421     | 15,720,217      |\n| ramda        | 18,804,380        | 35,919,033       | 1,689,727          | 101,557,928      | 1,895,956      | 4,303,215      | 2,305,025          | 1,597,131      | 1,167,025       |\n| memoizerific | 6,745,058         | 7,382,030        | 6,108,086          | 8,488,885        | 6,427,832      | 7,229,375      | 5,772,461          | 6,278,344      | 6,273,453       |\n| underscore   | 6,701,695         | 11,698,265       | 1,705,126          | 18,249,423       | 4,695,658      | 12,149,714     | 2,310,412          | 1,630,769      | 1,174,197       |\n| addy-osmani  | 4,926,732         | 6,370,152        | 3,483,311          | 12,506,809       | 3,568,399      | 3,035,249      | 6,898,542          | 2,009,089      | 1,542,304       |\n\n# Filesize\n\n`moize` is fairly small (~3.86KB when minified and gzipped), however it provides a large number of configuration options to satisfy a number of edge cases. If filesize is a concern, you may consider using [`micro-memoize`](https://github.com/planttheidea/micro-memoize). This is the memoization library that powers `moize` under-the-hood, and will handle most common use cases at 1/4 the size of `moize`.\n\n# Browser support\n\n-   Chrome (all versions)\n-   Firefox (all versions)\n-   Edge (all versions)\n-   Opera 15+\n-   IE 9+\n-   Safari 6+\n-   iOS 8+\n-   Android 4+\n\n# Development\n\nStandard stuff, clone the repo and `npm install` dependencies. The npm scripts available:\n\n-   `benchmark` => run the benchmark suite pitting `moize` against other libraries in common use-cases\n-   `benchmark:alternative` => run the benchmark suite for alternative forms of caching\n-   `benchmark:array` => run the benchmark suite for memoized methods using single and multiple `array` parameters\n-   `benchmark:object` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:primitive` => run the benchmark suite for memoized methods using single and multiple `object` parameters\n-   `benchmark:react` => run the benchmark suite for memoized React components\n-   `build` => run rollup to build the distributed files in `dist`\n-   `clean:dist` => run `rimraf` on the `dist` folder\n-   `clean:docs` => run `rimraf` on the `docs` folder\n-   `clean:mjs` => run `rimraf` on the `mjs` folder\n-   `copy:mjs` => run `clean:mjs` and the `es-to-mjs` script\n-   `copy:types` => copy internal types to be available for consumer\n-   `dev` => run webpack dev server to run example app (playground!)\n-   `dist` => runs `clean:dist` and `build`\n-   `docs` => runs `clean:docs` and builds the docs via `jsdoc`\n-   `flow` => runs `flow check` on the files in `src`\n-   `lint` => runs ESLint against all files in the `src` folder\n-   `lint:fix` => runs `lint`, fixing any errors if possible\n-   `test` => run `jest` test functions with `NODE_ENV=test`\n-   `test:coverage` => run `test` but with code coverage\n-   `test:watch` => run `test`, but with persistent watcher\n-   `typecheck` => run `tsc` against source code to validate TypeScript\n","maintainers":[{"name":"planttheidea","email":"tony.quetano@planttheidea.com"},{"name":"tquetano-r7","email":"tony_quetano@rapid7.com"}],"time":{"modified":"2023-05-08T10:34:45.020Z","created":"2016-12-11T22:54:16.671Z","1.0.0":"2016-12-11T22:54:16.671Z","1.0.1":"2016-12-11T22:59:11.897Z","1.0.2":"2016-12-11T23:03:48.118Z","1.0.3":"2016-12-11T23:11:27.409Z","1.1.0":"2016-12-12T04:02:51.612Z","1.1.1":"2016-12-12T11:51:18.702Z","1.1.2":"2016-12-13T12:34:21.947Z","1.2.0":"2016-12-14T03:48:37.074Z","1.3.0":"2016-12-15T03:49:34.091Z","1.3.1":"2016-12-15T03:52:28.302Z","1.3.2":"2016-12-16T23:31:31.795Z","1.3.3":"2017-01-01T14:44:30.336Z","1.4.0":"2017-01-19T03:29:00.759Z","1.4.1":"2017-01-19T03:36:09.381Z","1.4.2":"2017-01-20T02:49:13.864Z","1.4.3":"2017-01-25T02:54:43.227Z","1.4.4":"2017-01-26T02:25:21.921Z","1.4.5":"2017-01-29T01:29:18.921Z","1.5.0":"2017-01-29T05:13:12.187Z","2.0.0":"2017-01-30T11:36:32.083Z","2.0.1":"2017-01-31T00:54:55.079Z","2.0.2":"2017-01-31T03:07:22.553Z","2.0.3-0":"2017-01-31T10:59:51.992Z","2.0.3-1":"2017-01-31T11:02:50.690Z","2.0.3":"2017-02-02T02:33:27.517Z","2.1.0":"2017-02-02T11:57:28.438Z","2.1.1":"2017-02-03T04:28:36.451Z","2.1.2":"2017-02-03T11:40:36.355Z","2.1.3":"2017-02-05T02:37:56.617Z","2.1.4":"2017-02-05T12:05:01.561Z","2.1.5":"2017-02-06T12:19:57.594Z","2.1.6":"2017-02-07T12:24:30.684Z","2.2.0":"2017-02-11T20:50:04.036Z","2.2.1":"2017-02-13T12:12:27.419Z","2.2.2":"2017-02-26T04:11:53.118Z","2.2.3":"2017-03-08T10:19:24.149Z","2.3.0":"2017-04-09T22:10:25.915Z","2.3.1":"2017-04-10T10:44:04.567Z","2.3.2":"2017-05-18T11:01:25.500Z","2.3.3":"2017-05-20T19:28:47.879Z","2.4.0":"2017-06-27T01:30:47.698Z","2.4.1":"2017-06-29T10:40:50.630Z","2.5.0":"2017-07-04T21:15:06.343Z","2.5.1":"2017-07-09T22:03:45.382Z","3.0.0":"2017-07-18T08:31:37.476Z","3.0.1":"2017-07-18T08:37:45.969Z","3.0.2":"2017-07-18T16:55:11.259Z","3.1.0":"2017-07-19T20:30:45.805Z","3.1.1":"2017-07-20T05:42:49.838Z","3.1.2":"2017-07-20T05:45:22.066Z","3.2.0":"2017-07-20T07:20:34.327Z","3.2.1":"2017-07-20T08:03:59.320Z","3.2.2":"2017-07-20T21:30:00.991Z","3.3.0":"2017-07-23T16:32:12.331Z","3.3.1":"2017-08-06T00:56:59.481Z","3.4.0":"2017-08-06T13:18:13.926Z","3.4.1":"2017-09-03T09:35:01.751Z","3.4.2":"2017-09-03T16:08:20.555Z","3.5.0":"2017-09-09T22:03:13.926Z","4.0.0":"2017-09-10T01:19:30.935Z","4.0.1":"2017-10-20T16:23:19.810Z","4.0.2":"2017-11-02T02:31:59.417Z","4.0.3":"2017-11-18T21:57:08.835Z","4.0.4":"2017-12-12T12:13:25.439Z","5.0.0":"2018-03-11T21:21:28.715Z","5.0.1":"2018-03-12T00:28:19.994Z","5.1.0":"2018-03-14T19:13:34.061Z","5.1.1":"2018-03-15T01:09:21.001Z","5.1.2":"2018-03-15T01:37:10.570Z","5.2.0":"2018-03-16T15:16:55.923Z","5.2.1":"2018-03-16T15:41:24.609Z","5.2.2":"2018-04-22T22:19:56.236Z","5.2.3":"2018-04-24T02:44:41.799Z","5.3.0":"2018-06-06T02:28:02.188Z","5.3.1":"2018-06-07T09:00:20.927Z","5.3.2":"2018-08-07T01:01:17.656Z","5.4.0":"2018-08-12T23:50:09.924Z","5.4.1":"2018-09-19T02:32:27.795Z","5.4.2":"2019-02-17T18:16:32.702Z","5.4.3":"2019-03-27T02:05:34.059Z","5.4.4":"2019-04-13T17:17:41.713Z","5.4.5":"2020-01-01T08:51:11.294Z","5.4.6":"2020-05-06T16:38:56.836Z","5.4.7":"2020-06-21T11:44:00.629Z","6.0.0-beta.0":"2020-06-21T12:55:17.359Z","6.0.0-beta.1":"2020-06-21T22:10:45.762Z","6.0.0-beta.2":"2020-06-28T13:01:23.828Z","6.0.0-beta.3":"2020-06-29T13:19:01.410Z","6.0.0-beta.4":"2020-06-29T13:54:46.766Z","6.0.0-beta.5":"2020-10-04T13:48:17.991Z","6.0.0":"2021-01-25T21:08:47.505Z","6.0.1":"2021-03-20T05:22:16.710Z","6.0.2":"2021-04-24T23:05:09.946Z","6.0.3":"2021-04-30T13:08:12.270Z","6.1.0":"2021-08-29T15:07:09.100Z","6.1.1":"2022-04-23T23:24:48.582Z","6.1.2":"2022-08-24T15:11:36.487Z","6.1.3":"2022-09-06T10:37:18.555Z","6.1.4":"2022-12-09T22:18:34.579Z","6.1.5-beta.0":"2023-01-03T18:54:25.355Z","6.1.5-beta.1":"2023-01-05T10:30:45.100Z","6.1.5":"2023-01-05T20:51:46.143Z","6.1.6-beta.0":"2023-05-08T10:01:04.650Z","6.1.6":"2023-05-08T10:34:44.907Z"},"homepage":"https://github.com/planttheidea/moize#readme","keywords":["cache","expire","lru","memoize","memoization","optimize","performance","promise","ttl"],"repository":{"type":"git","url":"git+https://github.com/planttheidea/moize.git"},"author":{"name":"planttheidea"},"bugs":{"url":"https://github.com/planttheidea/moize/issues"},"license":"MIT","readmeFilename":"README.md","users":{"samobo":true,"tracker1":true}}