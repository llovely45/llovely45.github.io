{"_id":"compute-flatten","_rev":"4-819f75e0fed91014737c0bfed6b8a017","name":"compute-flatten","description":"Flattens an array.","dist-tags":{"latest":"1.0.0"},"versions":{"0.0.0":{"name":"compute-flatten","version":"0.0.0","description":"Flattens an array.","author":{"name":"Athan Reines","email":"kgryte@gmail.com"},"contributors":[{"name":"Athan Reines","email":"kgryte@gmail.com"}],"scripts":{"test":"mocha","test-cov":"istanbul cover ./node_modules/.bin/_mocha --dir ./reports/coverage -- -R spec","coveralls":"istanbul cover ./node_modules/.bin/_mocha --dir ./reports/coveralls/coverage --report lcovonly -- -R spec && cat ./reports/coveralls/coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./reports/coveralls"},"main":"./lib","repository":{"type":"git","url":"git://github.com/compute-io/flatten.git"},"keywords":["compute.io","compute","computation","utils","utilities","flatten","linearize","flat","array","vector","matrix","reshape","analysis","data","math","mathematics","strided"],"bugs":{"url":"https://github.com/compute-io/flatten/issues"},"dependencies":{"utils-copy":"^1.0.0","validate.io-array":"^1.0.3","validate.io-boolean-primitive":"^1.0.0","validate.io-nonnegative-integer":"^1.0.0","validate.io-object":"^1.0.3","validate.io-positive-integer-array":"^1.0.0"},"devDependencies":{"chai":"2.x.x","mocha":"2.x.x","coveralls":"^2.11.1","istanbul":"^0.3.0","jshint":"2.x.x","jshint-stylish":"^1.0.0"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"gitHead":"6a0d7c29409fc66b18206726e44049ed62ef860c","homepage":"https://github.com/compute-io/flatten#readme","_id":"compute-flatten@0.0.0","_shasum":"53d70a59a486e8932537aa611eaaeb97f8bef2c2","_from":".","_npmVersion":"2.8.3","_nodeVersion":"0.10.29","_npmUser":{"name":"kgryte","email":"kgryte@gmail.com"},"dist":{"shasum":"53d70a59a486e8932537aa611eaaeb97f8bef2c2","tarball":"https://registry.npmjs.org/compute-flatten/-/compute-flatten-0.0.0.tgz","integrity":"sha512-huS8s+lJCvkH4L9orWlJskL2A6+JnX6HtK0YlRiMlVXMGuc1YsJQHmf+d2GcWCx52IdLPdspaBCAD7IRg1ED+Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDHemmMyRjyp8tPDQgN3ymGFsUworWtXFj8NIvAn2M/6QIhAKbqDf5A8IaDi7R95AJUyVIznxNF0C1YsC4i5aRpjlgk"}]},"maintainers":[{"name":"kgryte","email":"kgryte@gmail.com"}]},"1.0.0":{"name":"compute-flatten","version":"1.0.0","description":"Flattens an array.","author":{"name":"Athan Reines","email":"kgryte@gmail.com"},"contributors":[{"name":"Athan Reines","email":"kgryte@gmail.com"}],"scripts":{"test":"mocha","test-cov":"istanbul cover ./node_modules/.bin/_mocha --dir ./reports/coverage -- -R spec","coveralls":"istanbul cover ./node_modules/.bin/_mocha --dir ./reports/coveralls/coverage --report lcovonly -- -R spec && cat ./reports/coveralls/coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./reports/coveralls"},"main":"./lib","repository":{"type":"git","url":"git://github.com/compute-io/flatten.git"},"keywords":["compute.io","compute","computation","utils","utilities","flatten","linearize","flat","array","vector","matrix","reshape","analysis","data","math","mathematics","strided"],"bugs":{"url":"https://github.com/compute-io/flatten/issues"},"dependencies":{"utils-copy":"^1.0.0","validate.io-array":"^1.0.3","validate.io-boolean-primitive":"^1.0.0","validate.io-nonnegative-integer":"^1.0.0","validate.io-object":"^1.0.3","validate.io-positive-integer-array":"^1.0.0"},"devDependencies":{"chai":"2.x.x","mocha":"2.x.x","coveralls":"^2.11.1","istanbul":"^0.3.0","jshint":"2.x.x","jshint-stylish":"^1.0.0"},"licenses":[{"type":"MIT","url":"http://www.opensource.org/licenses/MIT"}],"gitHead":"55de3aa41b6a2407d524ad7d99031e451a84e81d","homepage":"https://github.com/compute-io/flatten#readme","_id":"compute-flatten@1.0.0","_shasum":"1194e9bd080801332e7f5ad38d02d70dc9bc8709","_from":".","_npmVersion":"2.8.3","_nodeVersion":"0.10.29","_npmUser":{"name":"kgryte","email":"kgryte@gmail.com"},"dist":{"shasum":"1194e9bd080801332e7f5ad38d02d70dc9bc8709","tarball":"https://registry.npmjs.org/compute-flatten/-/compute-flatten-1.0.0.tgz","integrity":"sha512-jYI8iNWQjrgK28il1CPRps9JeFKW/Cbc1+jwFoxHMSzBUQiSxv53bPz25KHHO19v8hZ1Z8Ug8QTDt90of4aQ8Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAxctAUyTGXxQ8uMeIOSV5Mk/+6lFPzDRavpLGdcQNDRAiEAkvvgwUgYIuJMSmspv+d5FeQGwTSiingkIqkA+ObMyjM="}]},"maintainers":[{"name":"kgryte","email":"kgryte@gmail.com"}]}},"readme":"Flatten\n===\n[![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coverage Status][coveralls-image]][coveralls-url] [![Dependencies][dependencies-image]][dependencies-url]\n\n> Flattens an array.\n\n\n## Installation\n\n``` bash\n$ npm install compute-flatten\n```\n\nFor use in the browser, use [browserify](https://github.com/substack/node-browserify).\n\n\n## Usage\n\n``` javascript\nvar flatten = require( 'compute-flatten' );\n```\n\n#### flatten( arr[, options] )\n\nFlattens an `array`.\n\n``` javascript\nvar arr = [ 1, [2, [3, [4, [ 5 ], 6], 7], 8], 9 ];\n\nvar out = flatten( arr );\n// returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\nThe `function` accepts the following `options`:\n-\t__depth__: nonnegative `integer` specifying the depth to which the input `array` should be flattened. Default: `Number.POSITIVE_INFINITY`.\n-\t__matrix__: `boolean` indicating whether the function can assume that the input `array` is a matrix; i.e., an `array` (of `arrays`) having uniform dimensions. Default: `false`.\n-\t__copy__: `boolean` indicating whether `array` elements should be [deep copied](https://github.com/kgryte/utils-copy). Default: `false`.\n\nTo limit the depth to which the input `array` is flattened, set the `depth` option:\n\n``` javascript\nvar opts = {\n\t'depth': 2\t\n};\n\nvar out = flatten( arr, opts );\n// returns [ 1, 2, 3, [4, [ 5 ], 6], 7, 8, 9 ]\n```\n\nTo [deep copy](https://github.com/kgryte/utils-copy) `array` elements, set the `copy` option to `true`.\n\n``` javascript\nvar opts = {\n\t'depth': 2,\n\t'copy': true\n};\n\nvar out = flatten( arr, opts );\n// returns [ 1, 2, 3, [4, [ 5 ], 6], 7, 8, 9 ]\n\nconsole.log( arr[1][1][1] === out[3] );\n// returns false\n```\n\nTo indicate that the function may assume that the input `array` is a matrix, set the `matrix` option to `true`.\n\n``` javascript\nvar arr = [\n\t[ 1, 2, 3 ],\n\t[ 4, 5, 6 ],\n\t[ 7, 8, 9 ]\n];\n\nvar opts = {\n\t'matrix': true\n};\n\nvar out = flatten( arr, opts );\n// returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\n__Notes__:\n-\tthis `function` handles the generic case where an `array` may be heterogeneous (contain mixed data types) or have unknown dimensions. \n-\tif repeatedly flattening `arrays` having the same dimensions, create a customized flatten `function`, as documented below.\n\n\n\n#### flatten.createFlatten( dims[, options] )\n\nReturns a customized `function` for flattening `arrays` having specified dimensions.\n\n``` javascript\nvar dims = [ 3, 3 ];\n\n// Create a flatten function customized for flattening 3x3 arrays:\nvar flat = flatten.createFlatten( dims );\n\nvar arr = [\n\t[ 1, 2, 3 ],\n\t[ 4, 5, 6 ],\n\t[ 7, 8, 9 ]\n];\n\nvar out = flat( arr );\n// returns [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```\n\nThe `function` accepts the following `options`:\n-\t__copy__: `boolean` indicating whether `array` elements should be [deep copied](https://github.com/kgryte/utils-copy). Default: `false`.\n\n\nTo [deep copy](https://github.com/kgryte/utils-copy) `array` elements, set the `copy` option to `true`.\n\n``` javascript\nvar dims = [ 3, 3 ];\n\nvar opts = {\n\t'copy': true\n};\n\nvar flat = flatten.createFlatten( dims, opts );\n\nvar arr = [\n\t[ 1, 2, 3 ],\n\t[ 4, {'x':5}, 6 ],\n\t[ 7, 8, 9 ]\n];\n\nvar out = flat( arr );\n// returns [ 1, 2, 3, 4, {'x':5}, 6, 7, 8, 9 ]\n\nconsole.log( arr[1][1] === out[4] );\n// returns false\n```\n\n\n__Notes__:\n-\twhen repeatedly flattening `arrays` having the same shape, creating and applying a customized `flatten` function will provide performance benefits.\n-\t__no__ attempt is made to validate that input `arrays` actually have the specified dimensions. Input values are __assumed__ to be valid `arrays`. If validation is needed, see [validate.io-size](https://github.com/validate-io/size).\n\n\n\n\n## Examples\n\n``` javascript\nvar flatten = require( 'compute-flatten' );\n\nvar xStride,\n\tyStride,\n\tzStride,\n\tdata,\n\ttmp1,\n\ttmp2,\n\tarr,\n\tval,\n\tN, M, L,\n\ti, j, k;\n\nN = 1000;\nM = 100;\nL = 10;\n\n// Create an NxMxL (3D) array...\ndata = new Array( N );\nfor ( i = 0; i < N; i++ ) {\n\ttmp1 = new Array( M );\n\tfor ( j = 0; j < M; j++ ) {\n\t\ttmp2 = new Array( L );\n\t\tfor ( k = 0; k < L; k++ ) {\n\t\t\ttmp2[ k ] = M*L*i + j*L + k + 1;\n\t\t}\n\t\ttmp1[ j ] = tmp2;\n\t}\n\tdata[ i ] = tmp1;\n}\n// Create a flattened (strided) array:\narr = flatten( data );\n\n// To access the data[4][20][2] element...\nxStride = M * L;\nyStride = L;\nzStride = 1;\nval = arr[ 4*xStride + 20*yStride + 2*zStride ];\n\nconsole.log( val );\n// returns 4203\n\nconsole.log( data[4][20][2] === val );\n// returns true\n```\n\nTo run the example code from the top-level application directory,\n\n``` bash\n$ node ./examples/index.js\n```\n\n\n## Tests\n\n### Unit\n\nUnit tests use the [Mocha](http://mochajs.org/) test framework with [Chai](http://chaijs.com) assertions. To run the tests, execute the following command in the top-level application directory:\n\n``` bash\n$ make test\n```\n\nAll new feature development should have corresponding unit tests to validate correct functionality.\n\n\n### Test Coverage\n\nThis repository uses [Istanbul](https://github.com/gotwarlost/istanbul) as its code coverage tool. To generate a test coverage report, execute the following command in the top-level application directory:\n\n``` bash\n$ make test-cov\n```\n\nIstanbul creates a `./reports/coverage` directory. To access an HTML version of the report,\n\n``` bash\n$ make view-cov\n```\n\n\n---\n## License\n\n[MIT license](http://opensource.org/licenses/MIT). \n\n\n## Copyright\n\nCopyright &copy; 2015. Athan Reines.\n\n\n[npm-image]: http://img.shields.io/npm/v/compute-flatten.svg\n[npm-url]: https://npmjs.org/package/compute-flatten\n\n[travis-image]: http://img.shields.io/travis/compute-io/flatten/master.svg\n[travis-url]: https://travis-ci.org/compute-io/flatten\n\n[coveralls-image]: https://img.shields.io/coveralls/compute-io/flatten/master.svg\n[coveralls-url]: https://coveralls.io/r/compute-io/flatten?branch=master\n\n[dependencies-image]: http://img.shields.io/david/compute-io/flatten.svg\n[dependencies-url]: https://david-dm.org/compute-io/flatten\n\n[dev-dependencies-image]: http://img.shields.io/david/dev/compute-io/flatten.svg\n[dev-dependencies-url]: https://david-dm.org/dev/compute-io/flatten\n\n[github-issues-image]: http://img.shields.io/github/issues/compute-io/flatten.svg\n[github-issues-url]: https://github.com/compute-io/flatten/issues\n","maintainers":[{"name":"kgryte","email":"kgryte@gmail.com"}],"time":{"modified":"2022-06-13T20:28:12.813Z","created":"2015-04-25T09:21:27.108Z","0.0.0":"2015-04-25T09:21:27.108Z","1.0.0":"2015-04-25T09:22:46.544Z"},"homepage":"https://github.com/compute-io/flatten#readme","keywords":["compute.io","compute","computation","utils","utilities","flatten","linearize","flat","array","vector","matrix","reshape","analysis","data","math","mathematics","strided"],"repository":{"type":"git","url":"git://github.com/compute-io/flatten.git"},"contributors":[{"name":"Athan Reines","email":"kgryte@gmail.com"}],"author":{"name":"Athan Reines","email":"kgryte@gmail.com"},"bugs":{"url":"https://github.com/compute-io/flatten/issues"},"readmeFilename":"README.md"}